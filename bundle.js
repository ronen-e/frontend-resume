function inName(name){if(!name)return"";var newName=name.replace(/\s+(.+)/g,function(match,p1){return" "+p1.toUpperCase()});return newName}function logClicks(x,y){clickLocations.push({x:x,y:y}),console.log("x location: "+x+"; y location: "+y)}function initializeMap(){function locationFinder(data){function findLocations(data){var item;for(var k in data)data.hasOwnProperty(k)&&(item=data[k],"string"==typeof item&&"location"===k&&locations.push(item),"object"==typeof item&&item&&findLocations(item))}var locations=[];return findLocations(data),locations}function createMapMarker(placeData){var lat=placeData.geometry.location.lat(),lon=placeData.geometry.location.lng(),name=placeData.formatted_address,bounds=window.mapBounds,marker=new google.maps.Marker({map:map,position:placeData.geometry.location,title:name}),infoWindow=new google.maps.InfoWindow({content:name});google.maps.event.addListener(marker,"click",function(){infoWindow.open(map,marker)}),bounds.extend(new google.maps.LatLng(lat,lon)),map.fitBounds(bounds),map.setCenter(bounds.getCenter())}function callback(results,status){status==google.maps.places.PlacesServiceStatus.OK&&createMapMarker(results[0])}function pinPoster(locations){var service=new google.maps.places.PlacesService(map);locations.forEach(function(place){var request={query:place};service.textSearch(request,callback)})}var locations,mapOptions={disableDefaultUI:!0};map=new google.maps.Map(document.querySelector("#map"),mapOptions),window.mapBounds=new google.maps.LatLngBounds,locations=locationFinder(model),pinPoster(locations)}function hideEmptySections(){var $section,$item,shouldShow,sections=[[".flex-item","#topContacts, #lets-connect"],["h1","#header"],[".work-entry","#workExperience"],[".project-entry","#projects"],[".education-entry","#education"],["#map","#mapDiv"]];sections.forEach(function(section){$item=$(section[0]),$section=$(section[1]),shouldShow=$item.length>0,$section.toggle(shouldShow)})}function ContactsView($element){this.$element=$element}function SkillsView($element){this.$element=$element}function main(){$.getJSON("./data.json").done(function(appData){octopus.init(appData),hideEmptySections();try{initializeMap(),window.addEventListener("resize",function(e){map.fitBounds(mapBounds)}),jQuery(document).click(function(event){logClicks(event.pageX,event.pageY)})}catch(e){console.error("main Error:",e)}})}!function(window,undefined){function isArraylike(obj){var length=obj.length,type=jQuery.type(obj);return jQuery.isWindow(obj)?!1:1===obj.nodeType&&length?!0:"array"===type||"function"!==type&&(0===length||"number"==typeof length&&length>0&&length-1 in obj)}function createOptions(options){var object=optionsCache[options]={};return jQuery.each(options.match(core_rnotwhite)||[],function(_,flag){object[flag]=!0}),object}function Data(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=jQuery.expando+Math.random()}function dataAttr(elem,key,data){var name;if(data===undefined&&1===elem.nodeType)if(name="data-"+key.replace(rmultiDash,"-$1").toLowerCase(),data=elem.getAttribute(name),"string"==typeof data){try{data="true"===data?!0:"false"===data?!1:"null"===data?null:+data+""===data?+data:rbrace.test(data)?JSON.parse(data):data}catch(e){}data_user.set(elem,key,data)}else data=undefined;return data}function returnTrue(){return!0}function returnFalse(){return!1}function safeActiveElement(){try{return document.activeElement}catch(err){}}function sibling(cur,dir){for(;(cur=cur[dir])&&1!==cur.nodeType;);return cur}function winnow(elements,qualifier,not){if(jQuery.isFunction(qualifier))return jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not});if(qualifier.nodeType)return jQuery.grep(elements,function(elem){return elem===qualifier!==not});if("string"==typeof qualifier){if(isSimple.test(qualifier))return jQuery.filter(qualifier,elements,not);qualifier=jQuery.filter(qualifier,elements)}return jQuery.grep(elements,function(elem){return core_indexOf.call(qualifier,elem)>=0!==not})}function manipulationTarget(elem,content){return jQuery.nodeName(elem,"table")&&jQuery.nodeName(1===content.nodeType?content:content.firstChild,"tr")?elem.getElementsByTagName("tbody")[0]||elem.appendChild(elem.ownerDocument.createElement("tbody")):elem}function disableScript(elem){return elem.type=(null!==elem.getAttribute("type"))+"/"+elem.type,elem}function restoreScript(elem){var match=rscriptTypeMasked.exec(elem.type);return match?elem.type=match[1]:elem.removeAttribute("type"),elem}function setGlobalEval(elems,refElements){for(var l=elems.length,i=0;l>i;i++)data_priv.set(elems[i],"globalEval",!refElements||data_priv.get(refElements[i],"globalEval"))}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,pdataCur,udataOld,udataCur,events;if(1===dest.nodeType){if(data_priv.hasData(src)&&(pdataOld=data_priv.access(src),pdataCur=data_priv.set(dest,pdataOld),events=pdataOld.events)){delete pdataCur.handle,pdataCur.events={};for(type in events)for(i=0,l=events[type].length;l>i;i++)jQuery.event.add(dest,type,events[type][i])}data_user.hasData(src)&&(udataOld=data_user.access(src),udataCur=jQuery.extend({},udataOld),data_user.set(dest,udataCur))}}function getAll(context,tag){var ret=context.getElementsByTagName?context.getElementsByTagName(tag||"*"):context.querySelectorAll?context.querySelectorAll(tag||"*"):[];return tag===undefined||tag&&jQuery.nodeName(context,tag)?jQuery.merge([context],ret):ret}function fixInput(src,dest){var nodeName=dest.nodeName.toLowerCase();"input"===nodeName&&manipulation_rcheckableType.test(src.type)?dest.checked=src.checked:"input"!==nodeName&&"textarea"!==nodeName||(dest.defaultValue=src.defaultValue)}function vendorPropName(style,name){if(name in style)return name;for(var capName=name.charAt(0).toUpperCase()+name.slice(1),origName=name,i=cssPrefixes.length;i--;)if(name=cssPrefixes[i]+capName,name in style)return name;return origName}function isHidden(elem,el){return elem=el||elem,"none"===jQuery.css(elem,"display")||!jQuery.contains(elem.ownerDocument,elem)}function getStyles(elem){return window.getComputedStyle(elem,null)}function showHide(elements,show){for(var display,elem,hidden,values=[],index=0,length=elements.length;length>index;index++)elem=elements[index],elem.style&&(values[index]=data_priv.get(elem,"olddisplay"),display=elem.style.display,show?(values[index]||"none"!==display||(elem.style.display=""),""===elem.style.display&&isHidden(elem)&&(values[index]=data_priv.access(elem,"olddisplay",css_defaultDisplay(elem.nodeName)))):values[index]||(hidden=isHidden(elem),(display&&"none"!==display||!hidden)&&data_priv.set(elem,"olddisplay",hidden?display:jQuery.css(elem,"display"))));for(index=0;length>index;index++)elem=elements[index],elem.style&&(show&&"none"!==elem.style.display&&""!==elem.style.display||(elem.style.display=show?values[index]||"":"none"));return elements}function setPositiveNumber(elem,value,subtract){var matches=rnumsplit.exec(value);return matches?Math.max(0,matches[1]-(subtract||0))+(matches[2]||"px"):value}function augmentWidthOrHeight(elem,name,extra,isBorderBox,styles){for(var i=extra===(isBorderBox?"border":"content")?4:"width"===name?1:0,val=0;4>i;i+=2)"margin"===extra&&(val+=jQuery.css(elem,extra+cssExpand[i],!0,styles)),isBorderBox?("content"===extra&&(val-=jQuery.css(elem,"padding"+cssExpand[i],!0,styles)),"margin"!==extra&&(val-=jQuery.css(elem,"border"+cssExpand[i]+"Width",!0,styles))):(val+=jQuery.css(elem,"padding"+cssExpand[i],!0,styles),"padding"!==extra&&(val+=jQuery.css(elem,"border"+cssExpand[i]+"Width",!0,styles)));return val}function getWidthOrHeight(elem,name,extra){var valueIsBorderBox=!0,val="width"===name?elem.offsetWidth:elem.offsetHeight,styles=getStyles(elem),isBorderBox=jQuery.support.boxSizing&&"border-box"===jQuery.css(elem,"boxSizing",!1,styles);if(0>=val||null==val){if(val=curCSS(elem,name,styles),(0>val||null==val)&&(val=elem.style[name]),rnumnonpx.test(val))return val;valueIsBorderBox=isBorderBox&&(jQuery.support.boxSizingReliable||val===elem.style[name]),val=parseFloat(val)||0}return val+augmentWidthOrHeight(elem,name,extra||(isBorderBox?"border":"content"),valueIsBorderBox,styles)+"px"}function css_defaultDisplay(nodeName){var doc=document,display=elemdisplay[nodeName];return display||(display=actualDisplay(nodeName,doc),"none"!==display&&display||(iframe=(iframe||jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(doc.documentElement),doc=(iframe[0].contentWindow||iframe[0].contentDocument).document,doc.write("<!doctype html><html><body>"),doc.close(),display=actualDisplay(nodeName,doc),iframe.detach()),elemdisplay[nodeName]=display),display}function actualDisplay(name,doc){var elem=jQuery(doc.createElement(name)).appendTo(doc.body),display=jQuery.css(elem[0],"display");return elem.remove(),display}function buildParams(prefix,obj,traditional,add){var name;if(jQuery.isArray(obj))jQuery.each(obj,function(i,v){traditional||rbracket.test(prefix)?add(prefix,v):buildParams(prefix+"["+("object"==typeof v?i:"")+"]",v,traditional,add)});else if(traditional||"object"!==jQuery.type(obj))add(prefix,obj);else for(name in obj)buildParams(prefix+"["+name+"]",obj[name],traditional,add)}function addToPrefiltersOrTransports(structure){return function(dataTypeExpression,func){"string"!=typeof dataTypeExpression&&(func=dataTypeExpression,dataTypeExpression="*");var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(core_rnotwhite)||[];if(jQuery.isFunction(func))for(;dataType=dataTypes[i++];)"+"===dataType[0]?(dataType=dataType.slice(1)||"*",(structure[dataType]=structure[dataType]||[]).unshift(func)):(structure[dataType]=structure[dataType]||[]).push(func)}}function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){function inspect(dataType){var selected;return inspected[dataType]=!0,jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);return"string"!=typeof dataTypeOrTransport||seekingTransport||inspected[dataTypeOrTransport]?seekingTransport?!(selected=dataTypeOrTransport):void 0:(options.dataTypes.unshift(dataTypeOrTransport),inspect(dataTypeOrTransport),!1)}),selected}var inspected={},seekingTransport=structure===transports;return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*")}function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src)src[key]!==undefined&&((flatOptions[key]?target:deep||(deep={}))[key]=src[key]);return deep&&jQuery.extend(!0,target,deep),target}function ajaxHandleResponses(s,jqXHR,responses){for(var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;"*"===dataTypes[0];)dataTypes.shift(),ct===undefined&&(ct=s.mimeType||jqXHR.getResponseHeader("Content-Type"));if(ct)for(type in contents)if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break}if(dataTypes[0]in responses)finalDataType=dataTypes[0];else{for(type in responses){if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){finalDataType=type;break}firstDataType||(firstDataType=type)}finalDataType=finalDataType||firstDataType}return finalDataType?(finalDataType!==dataTypes[0]&&dataTypes.unshift(finalDataType),responses[finalDataType]):void 0}function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={},dataTypes=s.dataTypes.slice();if(dataTypes[1])for(conv in s.converters)converters[conv.toLowerCase()]=s.converters[conv];for(current=dataTypes.shift();current;)if(s.responseFields[current]&&(jqXHR[s.responseFields[current]]=response),!prev&&isSuccess&&s.dataFilter&&(response=s.dataFilter(response,s.dataType)),prev=current,current=dataTypes.shift())if("*"===current)current=prev;else if("*"!==prev&&prev!==current){if(conv=converters[prev+" "+current]||converters["* "+current],!conv)for(conv2 in converters)if(tmp=conv2.split(" "),tmp[1]===current&&(conv=converters[prev+" "+tmp[0]]||converters["* "+tmp[0]])){conv===!0?conv=converters[conv2]:converters[conv2]!==!0&&(current=tmp[0],dataTypes.unshift(tmp[1]));break}if(conv!==!0)if(conv&&s["throws"])response=conv(response);else try{response=conv(response)}catch(e){return{state:"parsererror",error:conv?e:"No conversion from "+prev+" to "+current}}}return{state:"success",data:response}}function createFxNow(){return setTimeout(function(){fxNow=undefined}),fxNow=jQuery.now()}function createTween(value,prop,animation){for(var tween,collection=(tweeners[prop]||[]).concat(tweeners["*"]),index=0,length=collection.length;length>index;index++)if(tween=collection[index].call(animation,prop,value))return tween}function Animation(elem,properties,options){var result,stopped,index=0,length=animationPrefilters.length,deferred=jQuery.Deferred().always(function(){delete tick.elem}),tick=function(){if(stopped)return!1;for(var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),temp=remaining/animation.duration||0,percent=1-temp,index=0,length=animation.tweens.length;length>index;index++)animation.tweens[index].run(percent);return deferred.notifyWith(elem,[animation,percent,remaining]),1>percent&&length?remaining:(deferred.resolveWith(elem,[animation]),!1)},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(!0,{specialEasing:{}},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);return animation.tweens.push(tween),tween},stop:function(gotoEnd){var index=0,length=gotoEnd?animation.tweens.length:0;if(stopped)return this;for(stopped=!0;length>index;index++)animation.tweens[index].run(1);return gotoEnd?deferred.resolveWith(elem,[animation,gotoEnd]):deferred.rejectWith(elem,[animation,gotoEnd]),this}}),props=animation.props;for(propFilter(props,animation.opts.specialEasing);length>index;index++)if(result=animationPrefilters[index].call(animation,elem,props,animation.opts))return result;return jQuery.map(props,createTween,animation),jQuery.isFunction(animation.opts.start)&&animation.opts.start.call(elem,animation),jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue})),animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)}function propFilter(props,specialEasing){var index,name,easing,value,hooks;for(index in props)if(name=jQuery.camelCase(index),easing=specialEasing[name],value=props[index],jQuery.isArray(value)&&(easing=value[1],value=props[index]=value[0]),index!==name&&(props[name]=value,delete props[index]),hooks=jQuery.cssHooks[name],hooks&&"expand"in hooks){value=hooks.expand(value),delete props[name];for(index in value)index in props||(props[index]=value[index],specialEasing[index]=easing)}else specialEasing[name]=easing}function defaultPrefilter(elem,props,opts){var prop,value,toggle,tween,hooks,oldfire,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHidden(elem),dataShow=data_priv.get(elem,"fxshow");opts.queue||(hooks=jQuery._queueHooks(elem,"fx"),null==hooks.unqueued&&(hooks.unqueued=0,oldfire=hooks.empty.fire,hooks.empty.fire=function(){hooks.unqueued||oldfire()}),hooks.unqueued++,anim.always(function(){anim.always(function(){hooks.unqueued--,jQuery.queue(elem,"fx").length||hooks.empty.fire()})})),1===elem.nodeType&&("height"in props||"width"in props)&&(opts.overflow=[style.overflow,style.overflowX,style.overflowY],"inline"===jQuery.css(elem,"display")&&"none"===jQuery.css(elem,"float")&&(style.display="inline-block")),opts.overflow&&(style.overflow="hidden",anim.always(function(){style.overflow=opts.overflow[0],style.overflowX=opts.overflow[1],style.overflowY=opts.overflow[2]}));for(prop in props)if(value=props[prop],rfxtypes.exec(value)){if(delete props[prop],toggle=toggle||"toggle"===value,value===(hidden?"hide":"show")){if("show"!==value||!dataShow||dataShow[prop]===undefined)continue;hidden=!0}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop)}if(!jQuery.isEmptyObject(orig)){dataShow?"hidden"in dataShow&&(hidden=dataShow.hidden):dataShow=data_priv.access(elem,"fxshow",{}),toggle&&(dataShow.hidden=!hidden),hidden?jQuery(elem).show():anim.done(function(){jQuery(elem).hide()}),anim.done(function(){var prop;data_priv.remove(elem,"fxshow");for(prop in orig)jQuery.style(elem,prop,orig[prop])});for(prop in orig)tween=createTween(hidden?dataShow[prop]:0,prop,anim),prop in dataShow||(dataShow[prop]=tween.start,hidden&&(tween.end=tween.start,tween.start="width"===prop||"height"===prop?1:0))}}function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing)}function genFx(type,includeWidth){var which,attrs={height:type},i=0;for(includeWidth=includeWidth?1:0;4>i;i+=2-includeWidth)which=cssExpand[i],attrs["margin"+which]=attrs["padding"+which]=type;return includeWidth&&(attrs.opacity=attrs.width=type),attrs}function getWindow(elem){return jQuery.isWindow(elem)?elem:9===elem.nodeType&&elem.defaultView}var rootjQuery,readyList,core_strundefined=typeof undefined,location=window.location,document=window.document,docElem=document.documentElement,_jQuery=window.jQuery,_$=window.$,class2type={},core_deletedIds=[],core_version="2.0.3",core_concat=core_deletedIds.concat,core_push=core_deletedIds.push,core_slice=core_deletedIds.slice,core_indexOf=core_deletedIds.indexOf,core_toString=class2type.toString,core_hasOwn=class2type.hasOwnProperty,core_trim=core_version.trim,jQuery=function(selector,context){return new jQuery.fn.init(selector,context,rootjQuery)},core_pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,core_rnotwhite=/\S+/g,rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,rsingleTag=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,rmsPrefix=/^-ms-/,rdashAlpha=/-([\da-z])/gi,fcamelCase=function(all,letter){return letter.toUpperCase()},completed=function(){document.removeEventListener("DOMContentLoaded",completed,!1),window.removeEventListener("load",completed,!1),jQuery.ready()};jQuery.fn=jQuery.prototype={jquery:core_version,constructor:jQuery,init:function(selector,context,rootjQuery){var match,elem;if(!selector)return this;if("string"==typeof selector){if(match="<"===selector.charAt(0)&&">"===selector.charAt(selector.length-1)&&selector.length>=3?[null,selector,null]:rquickExpr.exec(selector),!match||!match[1]&&context)return!context||context.jquery?(context||rootjQuery).find(selector):this.constructor(context).find(selector);if(match[1]){if(context=context instanceof jQuery?context[0]:context,jQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document,!0)),rsingleTag.test(match[1])&&jQuery.isPlainObject(context))for(match in context)jQuery.isFunction(this[match])?this[match](context[match]):this.attr(match,context[match]);return this}return elem=document.getElementById(match[2]),elem&&elem.parentNode&&(this.length=1,this[0]=elem),this.context=document,this.selector=selector,this}return selector.nodeType?(this.context=this[0]=selector,this.length=1,this):jQuery.isFunction(selector)?rootjQuery.ready(selector):(selector.selector!==undefined&&(this.selector=selector.selector,this.context=selector.context),jQuery.makeArray(selector,this))},selector:"",length:0,toArray:function(){return core_slice.call(this)},get:function(num){return null==num?this.toArray():0>num?this[this.length+num]:this[num]},pushStack:function(elems){var ret=jQuery.merge(this.constructor(),elems);return ret.prevObject=this,ret.context=this.context,ret},each:function(callback,args){return jQuery.each(this,callback,args)},ready:function(fn){return jQuery.ready.promise().done(fn),this},slice:function(){return this.pushStack(core_slice.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(i){var len=this.length,j=+i+(0>i?len:0);return this.pushStack(j>=0&&len>j?[this[j]]:[])},map:function(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem)}))},end:function(){return this.prevObject||this.constructor(null)},push:core_push,sort:[].sort,splice:[].splice},jQuery.fn.init.prototype=jQuery.fn,jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=!1;for("boolean"==typeof target&&(deep=target,target=arguments[1]||{},i=2),"object"==typeof target||jQuery.isFunction(target)||(target={}),length===i&&(target=this,--i);length>i;i++)if(null!=(options=arguments[i]))for(name in options)src=target[name],copy=options[name],target!==copy&&(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=jQuery.isArray(copy)))?(copyIsArray?(copyIsArray=!1,clone=src&&jQuery.isArray(src)?src:[]):clone=src&&jQuery.isPlainObject(src)?src:{},target[name]=jQuery.extend(deep,clone,copy)):copy!==undefined&&(target[name]=copy));return target},jQuery.extend({expando:"jQuery"+(core_version+Math.random()).replace(/\D/g,""),noConflict:function(deep){return window.$===jQuery&&(window.$=_$),deep&&window.jQuery===jQuery&&(window.jQuery=_jQuery),jQuery},isReady:!1,readyWait:1,holdReady:function(hold){hold?jQuery.readyWait++:jQuery.ready(!0)},ready:function(wait){(wait===!0?--jQuery.readyWait:jQuery.isReady)||(jQuery.isReady=!0,wait!==!0&&--jQuery.readyWait>0||(readyList.resolveWith(document,[jQuery]),jQuery.fn.trigger&&jQuery(document).trigger("ready").off("ready")))},isFunction:function(obj){return"function"===jQuery.type(obj)},isArray:Array.isArray,isWindow:function(obj){return null!=obj&&obj===obj.window},isNumeric:function(obj){return!isNaN(parseFloat(obj))&&isFinite(obj)},type:function(obj){return null==obj?String(obj):"object"==typeof obj||"function"==typeof obj?class2type[core_toString.call(obj)]||"object":typeof obj},isPlainObject:function(obj){if("object"!==jQuery.type(obj)||obj.nodeType||jQuery.isWindow(obj))return!1;try{if(obj.constructor&&!core_hasOwn.call(obj.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}return!0},isEmptyObject:function(obj){var name;for(name in obj)return!1;return!0},error:function(msg){throw new Error(msg)},parseHTML:function(data,context,keepScripts){if(!data||"string"!=typeof data)return null;"boolean"==typeof context&&(keepScripts=context,context=!1),context=context||document;var parsed=rsingleTag.exec(data),scripts=!keepScripts&&[];return parsed?[context.createElement(parsed[1])]:(parsed=jQuery.buildFragment([data],context,scripts),scripts&&jQuery(scripts).remove(),jQuery.merge([],parsed.childNodes))},parseJSON:JSON.parse,parseXML:function(data){var xml,tmp;if(!data||"string"!=typeof data)return null;try{tmp=new DOMParser,xml=tmp.parseFromString(data,"text/xml")}catch(e){xml=undefined}return xml&&!xml.getElementsByTagName("parsererror").length||jQuery.error("Invalid XML: "+data),xml},noop:function(){},globalEval:function(code){var script,indirect=eval;code=jQuery.trim(code),code&&(1===code.indexOf("use strict")?(script=document.createElement("script"),script.text=code,document.head.appendChild(script).parentNode.removeChild(script)):indirect(code))},camelCase:function(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase)},nodeName:function(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase()},each:function(obj,callback,args){var value,i=0,length=obj.length,isArray=isArraylike(obj);if(args){if(isArray)for(;length>i&&(value=callback.apply(obj[i],args),value!==!1);i++);else for(i in obj)if(value=callback.apply(obj[i],args),value===!1)break}else if(isArray)for(;length>i&&(value=callback.call(obj[i],i,obj[i]),value!==!1);i++);else for(i in obj)if(value=callback.call(obj[i],i,obj[i]),value===!1)break;return obj},trim:function(text){return null==text?"":core_trim.call(text)},makeArray:function(arr,results){var ret=results||[];return null!=arr&&(isArraylike(Object(arr))?jQuery.merge(ret,"string"==typeof arr?[arr]:arr):core_push.call(ret,arr)),ret},inArray:function(elem,arr,i){return null==arr?-1:core_indexOf.call(arr,elem,i)},merge:function(first,second){var l=second.length,i=first.length,j=0;if("number"==typeof l)for(;l>j;j++)first[i++]=second[j];else for(;second[j]!==undefined;)first[i++]=second[j++];return first.length=i,first},grep:function(elems,callback,inv){var retVal,ret=[],i=0,length=elems.length;for(inv=!!inv;length>i;i++)retVal=!!callback(elems[i],i),inv!==retVal&&ret.push(elems[i]);return ret},map:function(elems,callback,arg){var value,i=0,length=elems.length,isArray=isArraylike(elems),ret=[];if(isArray)for(;length>i;i++)value=callback(elems[i],i,arg),null!=value&&(ret[ret.length]=value);else for(i in elems)value=callback(elems[i],i,arg),null!=value&&(ret[ret.length]=value);return core_concat.apply([],ret)},guid:1,proxy:function(fn,context){var tmp,args,proxy;return"string"==typeof context&&(tmp=fn[context],context=fn,fn=tmp),jQuery.isFunction(fn)?(args=core_slice.call(arguments,2),proxy=function(){return fn.apply(context||this,args.concat(core_slice.call(arguments)))},proxy.guid=fn.guid=fn.guid||jQuery.guid++,proxy):undefined},access:function(elems,fn,key,value,chainable,emptyGet,raw){var i=0,length=elems.length,bulk=null==key;if("object"===jQuery.type(key)){chainable=!0;for(i in key)jQuery.access(elems,fn,i,key[i],!0,emptyGet,raw)}else if(value!==undefined&&(chainable=!0,jQuery.isFunction(value)||(raw=!0),bulk&&(raw?(fn.call(elems,value),fn=null):(bulk=fn,fn=function(elem,key,value){return bulk.call(jQuery(elem),value)})),fn))for(;length>i;i++)fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));return chainable?elems:bulk?fn.call(elems):length?fn(elems[0],key):emptyGet},now:Date.now,swap:function(elem,options,callback,args){var ret,name,old={};for(name in options)old[name]=elem.style[name],elem.style[name]=options[name];ret=callback.apply(elem,args||[]);for(name in options)elem.style[name]=old[name];return ret}}),jQuery.ready.promise=function(obj){return readyList||(readyList=jQuery.Deferred(),"complete"===document.readyState?setTimeout(jQuery.ready):(document.addEventListener("DOMContentLoaded",completed,!1),window.addEventListener("load",completed,!1))),readyList.promise(obj)},jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(i,name){class2type["[object "+name+"]"]=name.toLowerCase()}),rootjQuery=jQuery(document),function(window,undefined){function Sizzle(selector,context,results,seed){var match,elem,m,nodeType,i,groups,old,nid,newContext,newSelector;if((context?context.ownerDocument||context:preferredDoc)!==document&&setDocument(context),context=context||document,results=results||[],!selector||"string"!=typeof selector)return results;if(1!==(nodeType=context.nodeType)&&9!==nodeType)return[];if(documentIsHTML&&!seed){if(match=rquickExpr.exec(selector))if(m=match[1]){if(9===nodeType){if(elem=context.getElementById(m),!elem||!elem.parentNode)return results;if(elem.id===m)return results.push(elem),results}else if(context.ownerDocument&&(elem=context.ownerDocument.getElementById(m))&&contains(context,elem)&&elem.id===m)return results.push(elem),results}else{if(match[2])return push.apply(results,context.getElementsByTagName(selector)),results;if((m=match[3])&&support.getElementsByClassName&&context.getElementsByClassName)return push.apply(results,context.getElementsByClassName(m)),results}if(support.qsa&&(!rbuggyQSA||!rbuggyQSA.test(selector))){if(nid=old=expando,newContext=context,newSelector=9===nodeType&&selector,1===nodeType&&"object"!==context.nodeName.toLowerCase()){for(groups=tokenize(selector),(old=context.getAttribute("id"))?nid=old.replace(rescape,"\\$&"):context.setAttribute("id",nid),nid="[id='"+nid+"'] ",i=groups.length;i--;)groups[i]=nid+toSelector(groups[i]);newContext=rsibling.test(selector)&&context.parentNode||context,newSelector=groups.join(",")}if(newSelector)try{return push.apply(results,newContext.querySelectorAll(newSelector)),results}catch(qsaError){}finally{old||context.removeAttribute("id")}}}return select(selector.replace(rtrim,"$1"),context,results,seed)}function createCache(){function cache(key,value){return keys.push(key+=" ")>Expr.cacheLength&&delete cache[keys.shift()],cache[key]=value}var keys=[];return cache}function markFunction(fn){return fn[expando]=!0,fn}function assert(fn){var div=document.createElement("div");try{return!!fn(div)}catch(e){return!1}finally{div.parentNode&&div.parentNode.removeChild(div),div=null}}function addHandle(attrs,handler){for(var arr=attrs.split("|"),i=attrs.length;i--;)Expr.attrHandle[arr[i]]=handler}function siblingCheck(a,b){var cur=b&&a,diff=cur&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||MAX_NEGATIVE)-(~a.sourceIndex||MAX_NEGATIVE);if(diff)return diff;if(cur)for(;cur=cur.nextSibling;)if(cur===b)return-1;return a?1:-1}function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return"input"===name&&elem.type===type}}function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return("input"===name||"button"===name)&&elem.type===type}}function createPositionalPseudo(fn){return markFunction(function(argument){return argument=+argument,markFunction(function(seed,matches){for(var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;i--;)seed[j=matchIndexes[i]]&&(seed[j]=!(matches[j]=seed[j]))})})}function setFilters(){}function tokenize(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+" "];if(cached)return parseOnly?0:cached.slice(0);for(soFar=selector,groups=[],preFilters=Expr.preFilter;soFar;){matched&&!(match=rcomma.exec(soFar))||(match&&(soFar=soFar.slice(match[0].length)||soFar),groups.push(tokens=[])),matched=!1,(match=rcombinators.exec(soFar))&&(matched=match.shift(),tokens.push({value:matched,type:match[0].replace(rtrim," ")}),soFar=soFar.slice(matched.length));for(type in Expr.filter)!(match=matchExpr[type].exec(soFar))||preFilters[type]&&!(match=preFilters[type](match))||(matched=match.shift(),tokens.push({value:matched,type:type,matches:match}),soFar=soFar.slice(matched.length));if(!matched)break}return parseOnly?soFar.length:soFar?Sizzle.error(selector):tokenCache(selector,groups).slice(0)}function toSelector(tokens){for(var i=0,len=tokens.length,selector="";len>i;i++)selector+=tokens[i].value;return selector}function addCombinator(matcher,combinator,base){var dir=combinator.dir,checkNonElements=base&&"parentNode"===dir,doneName=done++;return combinator.first?function(elem,context,xml){for(;elem=elem[dir];)if(1===elem.nodeType||checkNonElements)return matcher(elem,context,xml)}:function(elem,context,xml){var data,cache,outerCache,dirkey=dirruns+" "+doneName;if(xml){for(;elem=elem[dir];)if((1===elem.nodeType||checkNonElements)&&matcher(elem,context,xml))return!0}else for(;elem=elem[dir];)if(1===elem.nodeType||checkNonElements)if(outerCache=elem[expando]||(elem[expando]={}),(cache=outerCache[dir])&&cache[0]===dirkey){if((data=cache[1])===!0||data===cachedruns)return data===!0}else if(cache=outerCache[dir]=[dirkey],cache[1]=matcher(elem,context,xml)||cachedruns,cache[1]===!0)return!0}}function elementMatcher(matchers){return matchers.length>1?function(elem,context,xml){for(var i=matchers.length;i--;)if(!matchers[i](elem,context,xml))return!1;return!0}:matchers[0]}function condense(unmatched,map,filter,context,xml){for(var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=null!=map;len>i;i++)(elem=unmatched[i])&&(filter&&!filter(elem,context,xml)||(newUnmatched.push(elem),mapped&&map.push(i)));return newUnmatched}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){return postFilter&&!postFilter[expando]&&(postFilter=setMatcher(postFilter)),postFinder&&!postFinder[expando]&&(postFinder=setMatcher(postFinder,postSelector)),markFunction(function(seed,results,context,xml){
var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),matcherIn=!preFilter||!seed&&selector?elems:condense(elems,preMap,preFilter,context,xml),matcherOut=matcher?postFinder||(seed?preFilter:preexisting||postFilter)?[]:results:matcherIn;if(matcher&&matcher(matcherIn,matcherOut,context,xml),postFilter)for(temp=condense(matcherOut,postMap),postFilter(temp,[],context,xml),i=temp.length;i--;)(elem=temp[i])&&(matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem));if(seed){if(postFinder||preFilter){if(postFinder){for(temp=[],i=matcherOut.length;i--;)(elem=matcherOut[i])&&temp.push(matcherIn[i]=elem);postFinder(null,matcherOut=[],temp,xml)}for(i=matcherOut.length;i--;)(elem=matcherOut[i])&&(temp=postFinder?indexOf.call(seed,elem):preMap[i])>-1&&(seed[temp]=!(results[temp]=elem))}}else matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut),postFinder?postFinder(null,results,matcherOut,xml):push.apply(results,matcherOut)})}function matcherFromTokens(tokens){for(var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i=leadingRelative?1:0,matchContext=addCombinator(function(elem){return elem===checkContext},implicitRelative,!0),matchAnyContext=addCombinator(function(elem){return indexOf.call(checkContext,elem)>-1},implicitRelative,!0),matchers=[function(elem,context,xml){return!leadingRelative&&(xml||context!==outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml))}];len>i;i++)if(matcher=Expr.relative[tokens[i].type])matchers=[addCombinator(elementMatcher(matchers),matcher)];else{if(matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches),matcher[expando]){for(j=++i;len>j&&!Expr.relative[tokens[j].type];j++);return setMatcher(i>1&&elementMatcher(matchers),i>1&&toSelector(tokens.slice(0,i-1).concat({value:" "===tokens[i-2].type?"*":""})).replace(rtrim,"$1"),matcher,j>i&&matcherFromTokens(tokens.slice(i,j)),len>j&&matcherFromTokens(tokens=tokens.slice(j)),len>j&&toSelector(tokens))}matchers.push(matcher)}return elementMatcher(matchers)}function matcherFromGroupMatchers(elementMatchers,setMatchers){var matcherCachedRuns=0,bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function(seed,context,xml,results,expandContext){var elem,j,matcher,setMatched=[],matchedCount=0,i="0",unmatched=seed&&[],outermost=null!=expandContext,contextBackup=outermostContext,elems=seed||byElement&&Expr.find.TAG("*",expandContext&&context.parentNode||context),dirrunsUnique=dirruns+=null==contextBackup?1:Math.random()||.1;for(outermost&&(outermostContext=context!==document&&context,cachedruns=matcherCachedRuns);null!=(elem=elems[i]);i++){if(byElement&&elem){for(j=0;matcher=elementMatchers[j++];)if(matcher(elem,context,xml)){results.push(elem);break}outermost&&(dirruns=dirrunsUnique,cachedruns=++matcherCachedRuns)}bySet&&((elem=!matcher&&elem)&&matchedCount--,seed&&unmatched.push(elem))}if(matchedCount+=i,bySet&&i!==matchedCount){for(j=0;matcher=setMatchers[j++];)matcher(unmatched,setMatched,context,xml);if(seed){if(matchedCount>0)for(;i--;)unmatched[i]||setMatched[i]||(setMatched[i]=pop.call(results));setMatched=condense(setMatched)}push.apply(results,setMatched),outermost&&!seed&&setMatched.length>0&&matchedCount+setMatchers.length>1&&Sizzle.uniqueSort(results)}return outermost&&(dirruns=dirrunsUnique,outermostContext=contextBackup),unmatched};return bySet?markFunction(superMatcher):superMatcher}function multipleContexts(selector,contexts,results){for(var i=0,len=contexts.length;len>i;i++)Sizzle(selector,contexts[i],results);return results}function select(selector,context,results,seed){var i,tokens,token,type,find,match=tokenize(selector);if(!seed&&1===match.length){if(tokens=match[0]=match[0].slice(0),tokens.length>2&&"ID"===(token=tokens[0]).type&&support.getById&&9===context.nodeType&&documentIsHTML&&Expr.relative[tokens[1].type]){if(context=(Expr.find.ID(token.matches[0].replace(runescape,funescape),context)||[])[0],!context)return results;selector=selector.slice(tokens.shift().value.length)}for(i=matchExpr.needsContext.test(selector)?0:tokens.length;i--&&(token=tokens[i],!Expr.relative[type=token.type]);)if((find=Expr.find[type])&&(seed=find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&context.parentNode||context))){if(tokens.splice(i,1),selector=seed.length&&toSelector(tokens),!selector)return push.apply(results,seed),results;break}}return compile(selector,match)(seed,context,!documentIsHTML,results,rsibling.test(selector)),results}var i,support,cachedruns,Expr,getText,isXML,compile,outermostContext,sortInput,setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains,expando="sizzle"+-new Date,preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),hasDuplicate=!1,sortOrder=function(a,b){return a===b?(hasDuplicate=!0,0):0},strundefined=typeof undefined,MAX_NEGATIVE=1<<31,hasOwn={}.hasOwnProperty,arr=[],pop=arr.pop,push_native=arr.push,push=arr.push,slice=arr.slice,indexOf=arr.indexOf||function(elem){for(var i=0,len=this.length;len>i;i++)if(this[i]===elem)return i;return-1},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",whitespace="[\\x20\\t\\r\\n\\f]",characterEncoding="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",identifier=characterEncoding.replace("w","w#"),attributes="\\["+whitespace+"*("+characterEncoding+")"+whitespace+"*(?:([*^$|!~]?=)"+whitespace+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+identifier+")|)|)"+whitespace+"*\\]",pseudos=":("+characterEncoding+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+attributes.replace(3,8)+")*)|.*)\\)|)",rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rcombinators=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),rsibling=new RegExp(whitespace+"*[+~]"),rattributeQuotes=new RegExp("="+whitespace+"*([^\\]'\"]*)"+whitespace+"*\\]","g"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^"+identifier+"$"),matchExpr={ID:new RegExp("^#("+characterEncoding+")"),CLASS:new RegExp("^\\.("+characterEncoding+")"),TAG:new RegExp("^("+characterEncoding.replace("w","w*")+")"),ATTR:new RegExp("^"+attributes),PSEUDO:new RegExp("^"+pseudos),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),bool:new RegExp("^(?:"+booleans+")$","i"),needsContext:new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},rnative=/^[^{]+\{\s*\[native \w/,rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rescape=/'|\\/g,runescape=new RegExp("\\\\([\\da-f]{1,6}"+whitespace+"?|("+whitespace+")|.)","ig"),funescape=function(_,escaped,escapedWhitespace){var high="0x"+escaped-65536;return high!==high||escapedWhitespace?escaped:0>high?String.fromCharCode(high+65536):String.fromCharCode(high>>10|55296,1023&high|56320)};try{push.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes),arr[preferredDoc.childNodes.length].nodeType}catch(e){push={apply:arr.length?function(target,els){push_native.apply(target,slice.call(els))}:function(target,els){for(var j=target.length,i=0;target[j++]=els[i++];);target.length=j-1}}}isXML=Sizzle.isXML=function(elem){var documentElement=elem&&(elem.ownerDocument||elem).documentElement;return documentElement?"HTML"!==documentElement.nodeName:!1},support=Sizzle.support={},setDocument=Sizzle.setDocument=function(node){var doc=node?node.ownerDocument||node:preferredDoc,parent=doc.defaultView;return doc!==document&&9===doc.nodeType&&doc.documentElement?(document=doc,docElem=doc.documentElement,documentIsHTML=!isXML(doc),parent&&parent.attachEvent&&parent!==parent.top&&parent.attachEvent("onbeforeunload",function(){setDocument()}),support.attributes=assert(function(div){return div.className="i",!div.getAttribute("className")}),support.getElementsByTagName=assert(function(div){return div.appendChild(doc.createComment("")),!div.getElementsByTagName("*").length}),support.getElementsByClassName=assert(function(div){return div.innerHTML="<div class='a'></div><div class='a i'></div>",div.firstChild.className="i",2===div.getElementsByClassName("i").length}),support.getById=assert(function(div){return docElem.appendChild(div).id=expando,!doc.getElementsByName||!doc.getElementsByName(expando).length}),support.getById?(Expr.find.ID=function(id,context){if(typeof context.getElementById!==strundefined&&documentIsHTML){var m=context.getElementById(id);return m&&m.parentNode?[m]:[]}},Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id")===attrId}}):(delete Expr.find.ID,Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=typeof elem.getAttributeNode!==strundefined&&elem.getAttributeNode("id");return node&&node.value===attrId}}),Expr.find.TAG=support.getElementsByTagName?function(tag,context){return typeof context.getElementsByTagName!==strundefined?context.getElementsByTagName(tag):void 0}:function(tag,context){var elem,tmp=[],i=0,results=context.getElementsByTagName(tag);if("*"===tag){for(;elem=results[i++];)1===elem.nodeType&&tmp.push(elem);return tmp}return results},Expr.find.CLASS=support.getElementsByClassName&&function(className,context){return typeof context.getElementsByClassName!==strundefined&&documentIsHTML?context.getElementsByClassName(className):void 0},rbuggyMatches=[],rbuggyQSA=[],(support.qsa=rnative.test(doc.querySelectorAll))&&(assert(function(div){div.innerHTML="<select><option selected=''></option></select>",div.querySelectorAll("[selected]").length||rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")"),div.querySelectorAll(":checked").length||rbuggyQSA.push(":checked")}),assert(function(div){var input=doc.createElement("input");input.setAttribute("type","hidden"),div.appendChild(input).setAttribute("t",""),div.querySelectorAll("[t^='']").length&&rbuggyQSA.push("[*^$]="+whitespace+"*(?:''|\"\")"),div.querySelectorAll(":enabled").length||rbuggyQSA.push(":enabled",":disabled"),div.querySelectorAll("*,:x"),rbuggyQSA.push(",.*:")})),(support.matchesSelector=rnative.test(matches=docElem.webkitMatchesSelector||docElem.mozMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector))&&assert(function(div){support.disconnectedMatch=matches.call(div,"div"),matches.call(div,"[s!='']:x"),rbuggyMatches.push("!=",pseudos)}),rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|")),rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join("|")),contains=rnative.test(docElem.contains)||docElem.compareDocumentPosition?function(a,b){var adown=9===a.nodeType?a.documentElement:a,bup=b&&b.parentNode;return a===bup||!(!bup||1!==bup.nodeType||!(adown.contains?adown.contains(bup):a.compareDocumentPosition&&16&a.compareDocumentPosition(bup)))}:function(a,b){if(b)for(;b=b.parentNode;)if(b===a)return!0;return!1},sortOrder=docElem.compareDocumentPosition?function(a,b){if(a===b)return hasDuplicate=!0,0;var compare=b.compareDocumentPosition&&a.compareDocumentPosition&&a.compareDocumentPosition(b);return compare?1&compare||!support.sortDetached&&b.compareDocumentPosition(a)===compare?a===doc||contains(preferredDoc,a)?-1:b===doc||contains(preferredDoc,b)?1:sortInput?indexOf.call(sortInput,a)-indexOf.call(sortInput,b):0:4&compare?-1:1:a.compareDocumentPosition?-1:1}:function(a,b){var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b];if(a===b)return hasDuplicate=!0,0;if(!aup||!bup)return a===doc?-1:b===doc?1:aup?-1:bup?1:sortInput?indexOf.call(sortInput,a)-indexOf.call(sortInput,b):0;if(aup===bup)return siblingCheck(a,b);for(cur=a;cur=cur.parentNode;)ap.unshift(cur);for(cur=b;cur=cur.parentNode;)bp.unshift(cur);for(;ap[i]===bp[i];)i++;return i?siblingCheck(ap[i],bp[i]):ap[i]===preferredDoc?-1:bp[i]===preferredDoc?1:0},doc):document},Sizzle.matches=function(expr,elements){return Sizzle(expr,null,null,elements)},Sizzle.matchesSelector=function(elem,expr){if((elem.ownerDocument||elem)!==document&&setDocument(elem),expr=expr.replace(rattributeQuotes,"='$1']"),support.matchesSelector&&documentIsHTML&&(!rbuggyMatches||!rbuggyMatches.test(expr))&&(!rbuggyQSA||!rbuggyQSA.test(expr)))try{var ret=matches.call(elem,expr);if(ret||support.disconnectedMatch||elem.document&&11!==elem.document.nodeType)return ret}catch(e){}return Sizzle(expr,document,null,[elem]).length>0},Sizzle.contains=function(context,elem){return(context.ownerDocument||context)!==document&&setDocument(context),contains(context,elem)},Sizzle.attr=function(elem,name){(elem.ownerDocument||elem)!==document&&setDocument(elem);var fn=Expr.attrHandle[name.toLowerCase()],val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):undefined;return val===undefined?support.attributes||!documentIsHTML?elem.getAttribute(name):(val=elem.getAttributeNode(name))&&val.specified?val.value:null:val},Sizzle.error=function(msg){throw new Error("Syntax error, unrecognized expression: "+msg)},Sizzle.uniqueSort=function(results){var elem,duplicates=[],j=0,i=0;if(hasDuplicate=!support.detectDuplicates,sortInput=!support.sortStable&&results.slice(0),results.sort(sortOrder),hasDuplicate){for(;elem=results[i++];)elem===results[i]&&(j=duplicates.push(i));for(;j--;)results.splice(duplicates[j],1)}return results},getText=Sizzle.getText=function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(nodeType){if(1===nodeType||9===nodeType||11===nodeType){if("string"==typeof elem.textContent)return elem.textContent;for(elem=elem.firstChild;elem;elem=elem.nextSibling)ret+=getText(elem)}else if(3===nodeType||4===nodeType)return elem.nodeValue}else for(;node=elem[i];i++)ret+=getText(node);return ret},Expr=Sizzle.selectors={cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(match){return match[1]=match[1].replace(runescape,funescape),match[3]=(match[4]||match[5]||"").replace(runescape,funescape),"~="===match[2]&&(match[3]=" "+match[3]+" "),match.slice(0,4)},CHILD:function(match){return match[1]=match[1].toLowerCase(),"nth"===match[1].slice(0,3)?(match[3]||Sizzle.error(match[0]),match[4]=+(match[4]?match[5]+(match[6]||1):2*("even"===match[3]||"odd"===match[3])),match[5]=+(match[7]+match[8]||"odd"===match[3])):match[3]&&Sizzle.error(match[0]),match},PSEUDO:function(match){var excess,unquoted=!match[5]&&match[2];return matchExpr.CHILD.test(match[0])?null:(match[3]&&match[4]!==undefined?match[2]=match[4]:unquoted&&rpseudo.test(unquoted)&&(excess=tokenize(unquoted,!0))&&(excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)&&(match[0]=match[0].slice(0,excess),match[2]=unquoted.slice(0,excess)),match.slice(0,3))}},filter:{TAG:function(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return"*"===nodeNameSelector?function(){return!0}:function(elem){return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName}},CLASS:function(className){var pattern=classCache[className+" "];return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){return pattern.test("string"==typeof elem.className&&elem.className||typeof elem.getAttribute!==strundefined&&elem.getAttribute("class")||"")})},ATTR:function(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);return null==result?"!="===operator:operator?(result+="","="===operator?result===check:"!="===operator?result!==check:"^="===operator?check&&0===result.indexOf(check):"*="===operator?check&&result.indexOf(check)>-1:"$="===operator?check&&result.slice(-check.length)===check:"~="===operator?(" "+result+" ").indexOf(check)>-1:"|="===operator?result===check||result.slice(0,check.length+1)===check+"-":!1):!0}},CHILD:function(type,what,argument,first,last){var simple="nth"!==type.slice(0,3),forward="last"!==type.slice(-4),ofType="of-type"===what;return 1===first&&0===last?function(elem){return!!elem.parentNode}:function(elem,context,xml){var cache,outerCache,node,diff,nodeIndex,start,dir=simple!==forward?"nextSibling":"previousSibling",parent=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType;if(parent){if(simple){for(;dir;){for(node=elem;node=node[dir];)if(ofType?node.nodeName.toLowerCase()===name:1===node.nodeType)return!1;start=dir="only"===type&&!start&&"nextSibling"}return!0}if(start=[forward?parent.firstChild:parent.lastChild],forward&&useCache){for(outerCache=parent[expando]||(parent[expando]={}),cache=outerCache[type]||[],nodeIndex=cache[0]===dirruns&&cache[1],diff=cache[0]===dirruns&&cache[2],node=nodeIndex&&parent.childNodes[nodeIndex];node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop();)if(1===node.nodeType&&++diff&&node===elem){outerCache[type]=[dirruns,nodeIndex,diff];break}}else if(useCache&&(cache=(elem[expando]||(elem[expando]={}))[type])&&cache[0]===dirruns)diff=cache[1];else for(;(node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop())&&((ofType?node.nodeName.toLowerCase()!==name:1!==node.nodeType)||!++diff||(useCache&&((node[expando]||(node[expando]={}))[type]=[dirruns,diff]),node!==elem)););return diff-=last,diff===first||diff%first===0&&diff/first>=0}}},PSEUDO:function(pseudo,argument){var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error("unsupported pseudo: "+pseudo);return fn[expando]?fn(argument):fn.length>1?(args=[pseudo,pseudo,"",argument],Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){for(var idx,matched=fn(seed,argument),i=matched.length;i--;)idx=indexOf.call(seed,matched[i]),seed[idx]=!(matches[idx]=matched[i])}):function(elem){return fn(elem,0,args)}):fn}},pseudos:{not:markFunction(function(selector){var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));return matcher[expando]?markFunction(function(seed,matches,context,xml){for(var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;i--;)(elem=unmatched[i])&&(seed[i]=!(matches[i]=elem))}):function(elem,context,xml){return input[0]=elem,matcher(input,null,xml,results),!results.pop()}}),has:markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length>0}}),contains:markFunction(function(text){return function(elem){return(elem.textContent||elem.innerText||getText(elem)).indexOf(text)>-1}}),lang:markFunction(function(lang){return ridentifier.test(lang||"")||Sizzle.error("unsupported lang: "+lang),lang=lang.replace(runescape,funescape).toLowerCase(),function(elem){var elemLang;do if(elemLang=documentIsHTML?elem.lang:elem.getAttribute("xml:lang")||elem.getAttribute("lang"))return elemLang=elemLang.toLowerCase(),elemLang===lang||0===elemLang.indexOf(lang+"-");while((elem=elem.parentNode)&&1===elem.nodeType);return!1}}),target:function(elem){var hash=window.location&&window.location.hash;return hash&&hash.slice(1)===elem.id},root:function(elem){return elem===docElem},focus:function(elem){return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex)},enabled:function(elem){return elem.disabled===!1},disabled:function(elem){return elem.disabled===!0},checked:function(elem){var nodeName=elem.nodeName.toLowerCase();return"input"===nodeName&&!!elem.checked||"option"===nodeName&&!!elem.selected},selected:function(elem){return elem.parentNode&&elem.parentNode.selectedIndex,elem.selected===!0},empty:function(elem){for(elem=elem.firstChild;elem;elem=elem.nextSibling)if(elem.nodeName>"@"||3===elem.nodeType||4===elem.nodeType)return!1;return!0},parent:function(elem){return!Expr.pseudos.empty(elem)},header:function(elem){return rheader.test(elem.nodeName)},input:function(elem){return rinputs.test(elem.nodeName)},button:function(elem){var name=elem.nodeName.toLowerCase();return"input"===name&&"button"===elem.type||"button"===name},text:function(elem){var attr;return"input"===elem.nodeName.toLowerCase()&&"text"===elem.type&&(null==(attr=elem.getAttribute("type"))||attr.toLowerCase()===elem.type)},first:createPositionalPseudo(function(){return[0]}),last:createPositionalPseudo(function(matchIndexes,length){return[length-1]}),eq:createPositionalPseudo(function(matchIndexes,length,argument){return[0>argument?argument+length:argument]}),even:createPositionalPseudo(function(matchIndexes,length){for(var i=0;length>i;i+=2)matchIndexes.push(i);return matchIndexes}),odd:createPositionalPseudo(function(matchIndexes,length){for(var i=1;length>i;i+=2)matchIndexes.push(i);return matchIndexes}),lt:createPositionalPseudo(function(matchIndexes,length,argument){for(var i=0>argument?argument+length:argument;--i>=0;)matchIndexes.push(i);return matchIndexes}),gt:createPositionalPseudo(function(matchIndexes,length,argument){for(var i=0>argument?argument+length:argument;++i<length;)matchIndexes.push(i);return matchIndexes})}},Expr.pseudos.nth=Expr.pseudos.eq;for(i in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})Expr.pseudos[i]=createInputPseudo(i);for(i in{submit:!0,reset:!0})Expr.pseudos[i]=createButtonPseudo(i);setFilters.prototype=Expr.filters=Expr.pseudos,Expr.setFilters=new setFilters,compile=Sizzle.compile=function(selector,group){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+" "];if(!cached){for(group||(group=tokenize(selector)),i=group.length;i--;)cached=matcherFromTokens(group[i]),cached[expando]?setMatchers.push(cached):elementMatchers.push(cached);cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers))}return cached},support.sortStable=expando.split("").sort(sortOrder).join("")===expando,support.detectDuplicates=hasDuplicate,setDocument(),support.sortDetached=assert(function(div1){return 1&div1.compareDocumentPosition(document.createElement("div"))}),assert(function(div){return div.innerHTML="<a href='#'></a>","#"===div.firstChild.getAttribute("href")})||addHandle("type|href|height|width",function(elem,name,isXML){return isXML?void 0:elem.getAttribute(name,"type"===name.toLowerCase()?1:2)}),support.attributes&&assert(function(div){return div.innerHTML="<input/>",div.firstChild.setAttribute("value",""),""===div.firstChild.getAttribute("value")})||addHandle("value",function(elem,name,isXML){return isXML||"input"!==elem.nodeName.toLowerCase()?void 0:elem.defaultValue}),assert(function(div){return null==div.getAttribute("disabled")})||addHandle(booleans,function(elem,name,isXML){var val;return isXML?void 0:(val=elem.getAttributeNode(name))&&val.specified?val.value:elem[name]===!0?name.toLowerCase():null}),jQuery.find=Sizzle,jQuery.expr=Sizzle.selectors,jQuery.expr[":"]=jQuery.expr.pseudos,jQuery.unique=Sizzle.uniqueSort,jQuery.text=Sizzle.getText,jQuery.isXMLDoc=Sizzle.isXML,jQuery.contains=Sizzle.contains}(window);var optionsCache={};jQuery.Callbacks=function(options){options="string"==typeof options?optionsCache[options]||createOptions(options):jQuery.extend({},options);var memory,fired,firing,firingStart,firingLength,firingIndex,list=[],stack=!options.once&&[],fire=function(data){for(memory=options.memory&&data,fired=!0,firingIndex=firingStart||0,firingStart=0,firingLength=list.length,firing=!0;list&&firingLength>firingIndex;firingIndex++)if(list[firingIndex].apply(data[0],data[1])===!1&&options.stopOnFalse){memory=!1;break}firing=!1,list&&(stack?stack.length&&fire(stack.shift()):memory?list=[]:self.disable())},self={add:function(){if(list){var start=list.length;!function add(args){jQuery.each(args,function(_,arg){var type=jQuery.type(arg);"function"===type?options.unique&&self.has(arg)||list.push(arg):arg&&arg.length&&"string"!==type&&add(arg)})}(arguments),firing?firingLength=list.length:memory&&(firingStart=start,fire(memory))}return this},remove:function(){return list&&jQuery.each(arguments,function(_,arg){for(var index;(index=jQuery.inArray(arg,list,index))>-1;)list.splice(index,1),firing&&(firingLength>=index&&firingLength--,firingIndex>=index&&firingIndex--)}),this},has:function(fn){return fn?jQuery.inArray(fn,list)>-1:!(!list||!list.length)},empty:function(){return list=[],firingLength=0,this},disable:function(){return list=stack=memory=undefined,this},disabled:function(){return!list},lock:function(){return stack=undefined,memory||self.disable(),this},locked:function(){return!stack},fireWith:function(context,args){return!list||fired&&!stack||(args=args||[],args=[context,args.slice?args.slice():args],firing?stack.push(args):fire(args)),this},fire:function(){return self.fireWith(this,arguments),this},fired:function(){return!!fired}};return self},jQuery.extend({Deferred:function(func){var tuples=[["resolve","done",jQuery.Callbacks("once memory"),"resolved"],["reject","fail",jQuery.Callbacks("once memory"),"rejected"],["notify","progress",jQuery.Callbacks("memory")]],state="pending",promise={state:function(){return state},always:function(){return deferred.done(arguments).fail(arguments),this},then:function(){var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(i,tuple){var action=tuple[0],fn=jQuery.isFunction(fns[i])&&fns[i];deferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);returned&&jQuery.isFunction(returned.promise)?returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify):newDefer[action+"With"](this===promise?newDefer.promise():this,fn?[returned]:arguments)})}),fns=null}).promise()},promise:function(obj){return null!=obj?jQuery.extend(obj,promise):promise}},deferred={};return promise.pipe=promise.then,jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[3];promise[tuple[1]]=list.add,stateString&&list.add(function(){state=stateString},tuples[1^i][2].disable,tuples[2][2].lock),deferred[tuple[0]]=function(){return deferred[tuple[0]+"With"](this===deferred?promise:this,arguments),this},deferred[tuple[0]+"With"]=list.fireWith}),promise.promise(deferred),func&&func.call(deferred,deferred),deferred},when:function(subordinate){var progressValues,progressContexts,resolveContexts,i=0,resolveValues=core_slice.call(arguments),length=resolveValues.length,remaining=1!==length||subordinate&&jQuery.isFunction(subordinate.promise)?length:0,deferred=1===remaining?subordinate:jQuery.Deferred(),updateFunc=function(i,contexts,values){return function(value){contexts[i]=this,values[i]=arguments.length>1?core_slice.call(arguments):value,values===progressValues?deferred.notifyWith(contexts,values):--remaining||deferred.resolveWith(contexts,values)}};if(length>1)for(progressValues=new Array(length),progressContexts=new Array(length),resolveContexts=new Array(length);length>i;i++)resolveValues[i]&&jQuery.isFunction(resolveValues[i].promise)?resolveValues[i].promise().done(updateFunc(i,resolveContexts,resolveValues)).fail(deferred.reject).progress(updateFunc(i,progressContexts,progressValues)):--remaining;return remaining||deferred.resolveWith(resolveContexts,resolveValues),deferred.promise()}}),jQuery.support=function(support){var input=document.createElement("input"),fragment=document.createDocumentFragment(),div=document.createElement("div"),select=document.createElement("select"),opt=select.appendChild(document.createElement("option"));return input.type?(input.type="checkbox",support.checkOn=""!==input.value,support.optSelected=opt.selected,support.reliableMarginRight=!0,support.boxSizingReliable=!0,support.pixelPosition=!1,input.checked=!0,support.noCloneChecked=input.cloneNode(!0).checked,select.disabled=!0,support.optDisabled=!opt.disabled,input=document.createElement("input"),input.value="t",input.type="radio",support.radioValue="t"===input.value,input.setAttribute("checked","t"),input.setAttribute("name","t"),fragment.appendChild(input),support.checkClone=fragment.cloneNode(!0).cloneNode(!0).lastChild.checked,support.focusinBubbles="onfocusin"in window,div.style.backgroundClip="content-box",div.cloneNode(!0).style.backgroundClip="",support.clearCloneStyle="content-box"===div.style.backgroundClip,jQuery(function(){var container,marginDiv,divReset="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",body=document.getElementsByTagName("body")[0];body&&(container=document.createElement("div"),container.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",body.appendChild(container).appendChild(div),div.innerHTML="",div.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",jQuery.swap(body,null!=body.style.zoom?{zoom:1}:{},function(){support.boxSizing=4===div.offsetWidth}),window.getComputedStyle&&(support.pixelPosition="1%"!==(window.getComputedStyle(div,null)||{}).top,support.boxSizingReliable="4px"===(window.getComputedStyle(div,null)||{width:"4px"}).width,marginDiv=div.appendChild(document.createElement("div")),marginDiv.style.cssText=div.style.cssText=divReset,marginDiv.style.marginRight=marginDiv.style.width="0",div.style.width="1px",support.reliableMarginRight=!parseFloat((window.getComputedStyle(marginDiv,null)||{}).marginRight)),body.removeChild(container))}),support):support}({});var data_user,data_priv,rbrace=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,rmultiDash=/([A-Z])/g;Data.uid=1,Data.accepts=function(owner){return owner.nodeType?1===owner.nodeType||9===owner.nodeType:!0},Data.prototype={key:function(owner){if(!Data.accepts(owner))return 0;var descriptor={},unlock=owner[this.expando];if(!unlock){unlock=Data.uid++;try{descriptor[this.expando]={value:unlock},Object.defineProperties(owner,descriptor)}catch(e){descriptor[this.expando]=unlock,jQuery.extend(owner,descriptor)}}return this.cache[unlock]||(this.cache[unlock]={}),unlock},set:function(owner,data,value){var prop,unlock=this.key(owner),cache=this.cache[unlock];if("string"==typeof data)cache[data]=value;else if(jQuery.isEmptyObject(cache))jQuery.extend(this.cache[unlock],data);else for(prop in data)cache[prop]=data[prop];return cache},get:function(owner,key){var cache=this.cache[this.key(owner)];return key===undefined?cache:cache[key]},access:function(owner,key,value){var stored;return key===undefined||key&&"string"==typeof key&&value===undefined?(stored=this.get(owner,key),stored!==undefined?stored:this.get(owner,jQuery.camelCase(key))):(this.set(owner,key,value),value!==undefined?value:key)},remove:function(owner,key){var i,name,camel,unlock=this.key(owner),cache=this.cache[unlock];if(key===undefined)this.cache[unlock]={};else{jQuery.isArray(key)?name=key.concat(key.map(jQuery.camelCase)):(camel=jQuery.camelCase(key),key in cache?name=[key,camel]:(name=camel,name=name in cache?[name]:name.match(core_rnotwhite)||[])),i=name.length;for(;i--;)delete cache[name[i]]}},hasData:function(owner){return!jQuery.isEmptyObject(this.cache[owner[this.expando]]||{})},discard:function(owner){owner[this.expando]&&delete this.cache[owner[this.expando]]}},data_user=new Data,data_priv=new Data,jQuery.extend({acceptData:Data.accepts,hasData:function(elem){return data_user.hasData(elem)||data_priv.hasData(elem)},data:function(elem,name,data){return data_user.access(elem,name,data)},removeData:function(elem,name){data_user.remove(elem,name)},_data:function(elem,name,data){return data_priv.access(elem,name,data)},_removeData:function(elem,name){data_priv.remove(elem,name);
}}),jQuery.fn.extend({data:function(key,value){var attrs,name,elem=this[0],i=0,data=null;if(key===undefined){if(this.length&&(data=data_user.get(elem),1===elem.nodeType&&!data_priv.get(elem,"hasDataAttrs"))){for(attrs=elem.attributes;i<attrs.length;i++)name=attrs[i].name,0===name.indexOf("data-")&&(name=jQuery.camelCase(name.slice(5)),dataAttr(elem,name,data[name]));data_priv.set(elem,"hasDataAttrs",!0)}return data}return"object"==typeof key?this.each(function(){data_user.set(this,key)}):jQuery.access(this,function(value){var data,camelKey=jQuery.camelCase(key);if(elem&&value===undefined){if(data=data_user.get(elem,key),data!==undefined)return data;if(data=data_user.get(elem,camelKey),data!==undefined)return data;if(data=dataAttr(elem,camelKey,undefined),data!==undefined)return data}else this.each(function(){var data=data_user.get(this,camelKey);data_user.set(this,camelKey,value),-1!==key.indexOf("-")&&data!==undefined&&data_user.set(this,key,value)})},null,value,arguments.length>1,null,!0)},removeData:function(key){return this.each(function(){data_user.remove(this,key)})}}),jQuery.extend({queue:function(elem,type,data){var queue;return elem?(type=(type||"fx")+"queue",queue=data_priv.get(elem,type),data&&(!queue||jQuery.isArray(data)?queue=data_priv.access(elem,type,jQuery.makeArray(data)):queue.push(data)),queue||[]):void 0},dequeue:function(elem,type){type=type||"fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function(){jQuery.dequeue(elem,type)};"inprogress"===fn&&(fn=queue.shift(),startLength--),fn&&("fx"===type&&queue.unshift("inprogress"),delete hooks.stop,fn.call(elem,next,hooks)),!startLength&&hooks&&hooks.empty.fire()},_queueHooks:function(elem,type){var key=type+"queueHooks";return data_priv.get(elem,key)||data_priv.access(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){data_priv.remove(elem,[type+"queue",key])})})}}),jQuery.fn.extend({queue:function(type,data){var setter=2;return"string"!=typeof type&&(data=type,type="fx",setter--),arguments.length<setter?jQuery.queue(this[0],type):data===undefined?this:this.each(function(){var queue=jQuery.queue(this,type,data);jQuery._queueHooks(this,type),"fx"===type&&"inprogress"!==queue[0]&&jQuery.dequeue(this,type)})},dequeue:function(type){return this.each(function(){jQuery.dequeue(this,type)})},delay:function(time,type){return time=jQuery.fx?jQuery.fx.speeds[time]||time:time,type=type||"fx",this.queue(type,function(next,hooks){var timeout=setTimeout(next,time);hooks.stop=function(){clearTimeout(timeout)}})},clearQueue:function(type){return this.queue(type||"fx",[])},promise:function(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function(){--count||defer.resolveWith(elements,[elements])};for("string"!=typeof type&&(obj=type,type=undefined),type=type||"fx";i--;)tmp=data_priv.get(elements[i],type+"queueHooks"),tmp&&tmp.empty&&(count++,tmp.empty.add(resolve));return resolve(),defer.promise(obj)}});var nodeHook,boolHook,rclass=/[\t\r\n\f]/g,rreturn=/\r/g,rfocusable=/^(?:input|select|textarea|button)$/i;jQuery.fn.extend({attr:function(name,value){return jQuery.access(this,jQuery.attr,name,value,arguments.length>1)},removeAttr:function(name){return this.each(function(){jQuery.removeAttr(this,name)})},prop:function(name,value){return jQuery.access(this,jQuery.prop,name,value,arguments.length>1)},removeProp:function(name){return this.each(function(){delete this[jQuery.propFix[name]||name]})},addClass:function(value){var classes,elem,cur,clazz,j,i=0,len=this.length,proceed="string"==typeof value&&value;if(jQuery.isFunction(value))return this.each(function(j){jQuery(this).addClass(value.call(this,j,this.className))});if(proceed)for(classes=(value||"").match(core_rnotwhite)||[];len>i;i++)if(elem=this[i],cur=1===elem.nodeType&&(elem.className?(" "+elem.className+" ").replace(rclass," "):" ")){for(j=0;clazz=classes[j++];)cur.indexOf(" "+clazz+" ")<0&&(cur+=clazz+" ");elem.className=jQuery.trim(cur)}return this},removeClass:function(value){var classes,elem,cur,clazz,j,i=0,len=this.length,proceed=0===arguments.length||"string"==typeof value&&value;if(jQuery.isFunction(value))return this.each(function(j){jQuery(this).removeClass(value.call(this,j,this.className))});if(proceed)for(classes=(value||"").match(core_rnotwhite)||[];len>i;i++)if(elem=this[i],cur=1===elem.nodeType&&(elem.className?(" "+elem.className+" ").replace(rclass," "):"")){for(j=0;clazz=classes[j++];)for(;cur.indexOf(" "+clazz+" ")>=0;)cur=cur.replace(" "+clazz+" "," ");elem.className=value?jQuery.trim(cur):""}return this},toggleClass:function(value,stateVal){var type=typeof value;return"boolean"==typeof stateVal&&"string"===type?stateVal?this.addClass(value):this.removeClass(value):jQuery.isFunction(value)?this.each(function(i){jQuery(this).toggleClass(value.call(this,i,this.className,stateVal),stateVal)}):this.each(function(){if("string"===type)for(var className,i=0,self=jQuery(this),classNames=value.match(core_rnotwhite)||[];className=classNames[i++];)self.hasClass(className)?self.removeClass(className):self.addClass(className);else type!==core_strundefined&&"boolean"!==type||(this.className&&data_priv.set(this,"__className__",this.className),this.className=this.className||value===!1?"":data_priv.get(this,"__className__")||"")})},hasClass:function(selector){for(var className=" "+selector+" ",i=0,l=this.length;l>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(rclass," ").indexOf(className)>=0)return!0;return!1},val:function(value){var hooks,ret,isFunction,elem=this[0];{if(arguments.length)return isFunction=jQuery.isFunction(value),this.each(function(i){var val;1===this.nodeType&&(val=isFunction?value.call(this,i,jQuery(this).val()):value,null==val?val="":"number"==typeof val?val+="":jQuery.isArray(val)&&(val=jQuery.map(val,function(value){return null==value?"":value+""})),hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()],hooks&&"set"in hooks&&hooks.set(this,val,"value")!==undefined||(this.value=val))});if(elem)return hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()],hooks&&"get"in hooks&&(ret=hooks.get(elem,"value"))!==undefined?ret:(ret=elem.value,"string"==typeof ret?ret.replace(rreturn,""):null==ret?"":ret)}}}),jQuery.extend({valHooks:{option:{get:function(elem){var val=elem.attributes.value;return!val||val.specified?elem.value:elem.text}},select:{get:function(elem){for(var value,option,options=elem.options,index=elem.selectedIndex,one="select-one"===elem.type||0>index,values=one?null:[],max=one?index+1:options.length,i=0>index?max:one?index:0;max>i;i++)if(option=options[i],(option.selected||i===index)&&(jQuery.support.optDisabled?!option.disabled:null===option.getAttribute("disabled"))&&(!option.parentNode.disabled||!jQuery.nodeName(option.parentNode,"optgroup"))){if(value=jQuery(option).val(),one)return value;values.push(value)}return values},set:function(elem,value){for(var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;i--;)option=options[i],(option.selected=jQuery.inArray(jQuery(option).val(),values)>=0)&&(optionSet=!0);return optionSet||(elem.selectedIndex=-1),values}}},attr:function(elem,name,value){var hooks,ret,nType=elem.nodeType;if(elem&&3!==nType&&8!==nType&&2!==nType)return typeof elem.getAttribute===core_strundefined?jQuery.prop(elem,name,value):(1===nType&&jQuery.isXMLDoc(elem)||(name=name.toLowerCase(),hooks=jQuery.attrHooks[name]||(jQuery.expr.match.bool.test(name)?boolHook:nodeHook)),value===undefined?hooks&&"get"in hooks&&null!==(ret=hooks.get(elem,name))?ret:(ret=jQuery.find.attr(elem,name),null==ret?undefined:ret):null!==value?hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined?ret:(elem.setAttribute(name,value+""),value):void jQuery.removeAttr(elem,name))},removeAttr:function(elem,value){var name,propName,i=0,attrNames=value&&value.match(core_rnotwhite);if(attrNames&&1===elem.nodeType)for(;name=attrNames[i++];)propName=jQuery.propFix[name]||name,jQuery.expr.match.bool.test(name)&&(elem[propName]=!1),elem.removeAttribute(name)},attrHooks:{type:{set:function(elem,value){if(!jQuery.support.radioValue&&"radio"===value&&jQuery.nodeName(elem,"input")){var val=elem.value;return elem.setAttribute("type",value),val&&(elem.value=val),value}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(elem,name,value){var ret,hooks,notxml,nType=elem.nodeType;if(elem&&3!==nType&&8!==nType&&2!==nType)return notxml=1!==nType||!jQuery.isXMLDoc(elem),notxml&&(name=jQuery.propFix[name]||name,hooks=jQuery.propHooks[name]),value!==undefined?hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined?ret:elem[name]=value:hooks&&"get"in hooks&&null!==(ret=hooks.get(elem,name))?ret:elem[name]},propHooks:{tabIndex:{get:function(elem){return elem.hasAttribute("tabindex")||rfocusable.test(elem.nodeName)||elem.href?elem.tabIndex:-1}}}}),boolHook={set:function(elem,value,name){return value===!1?jQuery.removeAttr(elem,name):elem.setAttribute(name,name),name}},jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){var getter=jQuery.expr.attrHandle[name]||jQuery.find.attr;jQuery.expr.attrHandle[name]=function(elem,name,isXML){var fn=jQuery.expr.attrHandle[name],ret=isXML?undefined:(jQuery.expr.attrHandle[name]=undefined)!=getter(elem,name,isXML)?name.toLowerCase():null;return jQuery.expr.attrHandle[name]=fn,ret}}),jQuery.support.optSelected||(jQuery.propHooks.selected={get:function(elem){var parent=elem.parentNode;return parent&&parent.parentNode&&parent.parentNode.selectedIndex,null}}),jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()]=this}),jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this]={set:function(elem,value){return jQuery.isArray(value)?elem.checked=jQuery.inArray(jQuery(elem).val(),value)>=0:void 0}},jQuery.support.checkOn||(jQuery.valHooks[this].get=function(elem){return null===elem.getAttribute("value")?"on":elem.value})});var rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|contextmenu)|click/,rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,rtypenamespace=/^([^.]*)(?:\.(.+)|)$/;jQuery.event={global:{},add:function(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=data_priv.get(elem);if(elemData){for(handler.handler&&(handleObjIn=handler,handler=handleObjIn.handler,selector=handleObjIn.selector),handler.guid||(handler.guid=jQuery.guid++),(events=elemData.events)||(events=elemData.events={}),(eventHandle=elemData.handle)||(eventHandle=elemData.handle=function(e){return typeof jQuery===core_strundefined||e&&jQuery.event.triggered===e.type?undefined:jQuery.event.dispatch.apply(eventHandle.elem,arguments)},eventHandle.elem=elem),types=(types||"").match(core_rnotwhite)||[""],t=types.length;t--;)tmp=rtypenamespace.exec(types[t])||[],type=origType=tmp[1],namespaces=(tmp[2]||"").split(".").sort(),type&&(special=jQuery.event.special[type]||{},type=(selector?special.delegateType:special.bindType)||type,special=jQuery.event.special[type]||{},handleObj=jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn),(handlers=events[type])||(handlers=events[type]=[],handlers.delegateCount=0,special.setup&&special.setup.call(elem,data,namespaces,eventHandle)!==!1||elem.addEventListener&&elem.addEventListener(type,eventHandle,!1)),special.add&&(special.add.call(elem,handleObj),handleObj.handler.guid||(handleObj.handler.guid=handler.guid)),selector?handlers.splice(handlers.delegateCount++,0,handleObj):handlers.push(handleObj),jQuery.event.global[type]=!0);elem=null}},remove:function(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=data_priv.hasData(elem)&&data_priv.get(elem);if(elemData&&(events=elemData.events)){for(types=(types||"").match(core_rnotwhite)||[""],t=types.length;t--;)if(tmp=rtypenamespace.exec(types[t])||[],type=origType=tmp[1],namespaces=(tmp[2]||"").split(".").sort(),type){for(special=jQuery.event.special[type]||{},type=(selector?special.delegateType:special.bindType)||type,handlers=events[type]||[],tmp=tmp[2]&&new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"),origCount=j=handlers.length;j--;)handleObj=handlers[j],!mappedTypes&&origType!==handleObj.origType||handler&&handler.guid!==handleObj.guid||tmp&&!tmp.test(handleObj.namespace)||selector&&selector!==handleObj.selector&&("**"!==selector||!handleObj.selector)||(handlers.splice(j,1),handleObj.selector&&handlers.delegateCount--,special.remove&&special.remove.call(elem,handleObj));origCount&&!handlers.length&&(special.teardown&&special.teardown.call(elem,namespaces,elemData.handle)!==!1||jQuery.removeEvent(elem,type,elemData.handle),delete events[type])}else for(type in events)jQuery.event.remove(elem,type+types[t],handler,selector,!0);jQuery.isEmptyObject(events)&&(delete elemData.handle,data_priv.remove(elem,"events"))}},trigger:function(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,eventPath=[elem||document],type=core_hasOwn.call(event,"type")?event.type:event,namespaces=core_hasOwn.call(event,"namespace")?event.namespace.split("."):[];if(cur=tmp=elem=elem||document,3!==elem.nodeType&&8!==elem.nodeType&&!rfocusMorph.test(type+jQuery.event.triggered)&&(type.indexOf(".")>=0&&(namespaces=type.split("."),type=namespaces.shift(),namespaces.sort()),ontype=type.indexOf(":")<0&&"on"+type,event=event[jQuery.expando]?event:new jQuery.Event(type,"object"==typeof event&&event),event.isTrigger=onlyHandlers?2:3,event.namespace=namespaces.join("."),event.namespace_re=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,event.result=undefined,event.target||(event.target=elem),data=null==data?[event]:jQuery.makeArray(data,[event]),special=jQuery.event.special[type]||{},onlyHandlers||!special.trigger||special.trigger.apply(elem,data)!==!1)){if(!onlyHandlers&&!special.noBubble&&!jQuery.isWindow(elem)){for(bubbleType=special.delegateType||type,rfocusMorph.test(bubbleType+type)||(cur=cur.parentNode);cur;cur=cur.parentNode)eventPath.push(cur),tmp=cur;tmp===(elem.ownerDocument||document)&&eventPath.push(tmp.defaultView||tmp.parentWindow||window)}for(i=0;(cur=eventPath[i++])&&!event.isPropagationStopped();)event.type=i>1?bubbleType:special.bindType||type,handle=(data_priv.get(cur,"events")||{})[event.type]&&data_priv.get(cur,"handle"),handle&&handle.apply(cur,data),handle=ontype&&cur[ontype],handle&&jQuery.acceptData(cur)&&handle.apply&&handle.apply(cur,data)===!1&&event.preventDefault();return event.type=type,onlyHandlers||event.isDefaultPrevented()||special._default&&special._default.apply(eventPath.pop(),data)!==!1||!jQuery.acceptData(elem)||ontype&&jQuery.isFunction(elem[type])&&!jQuery.isWindow(elem)&&(tmp=elem[ontype],tmp&&(elem[ontype]=null),jQuery.event.triggered=type,elem[type](),jQuery.event.triggered=undefined,tmp&&(elem[ontype]=tmp)),event.result}},dispatch:function(event){event=jQuery.event.fix(event);var i,j,ret,matched,handleObj,handlerQueue=[],args=core_slice.call(arguments),handlers=(data_priv.get(this,"events")||{})[event.type]||[],special=jQuery.event.special[event.type]||{};if(args[0]=event,event.delegateTarget=this,!special.preDispatch||special.preDispatch.call(this,event)!==!1){for(handlerQueue=jQuery.event.handlers.call(this,event,handlers),i=0;(matched=handlerQueue[i++])&&!event.isPropagationStopped();)for(event.currentTarget=matched.elem,j=0;(handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped();)event.namespace_re&&!event.namespace_re.test(handleObj.namespace)||(event.handleObj=handleObj,event.data=handleObj.data,ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args),ret!==undefined&&(event.result=ret)===!1&&(event.preventDefault(),event.stopPropagation()));return special.postDispatch&&special.postDispatch.call(this,event),event.result}},handlers:function(event,handlers){var i,matches,sel,handleObj,handlerQueue=[],delegateCount=handlers.delegateCount,cur=event.target;if(delegateCount&&cur.nodeType&&(!event.button||"click"!==event.type))for(;cur!==this;cur=cur.parentNode||this)if(cur.disabled!==!0||"click"!==event.type){for(matches=[],i=0;delegateCount>i;i++)handleObj=handlers[i],sel=handleObj.selector+" ",matches[sel]===undefined&&(matches[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>=0:jQuery.find(sel,this,null,[cur]).length),matches[sel]&&matches.push(handleObj);matches.length&&handlerQueue.push({elem:cur,handlers:matches})}return delegateCount<handlers.length&&handlerQueue.push({elem:this,handlers:handlers.slice(delegateCount)}),handlerQueue},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(event,original){return null==event.which&&(event.which=null!=original.charCode?original.charCode:original.keyCode),event}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(event,original){var eventDoc,doc,body,button=original.button;return null==event.pageX&&null!=original.clientX&&(eventDoc=event.target.ownerDocument||document,doc=eventDoc.documentElement,body=eventDoc.body,event.pageX=original.clientX+(doc&&doc.scrollLeft||body&&body.scrollLeft||0)-(doc&&doc.clientLeft||body&&body.clientLeft||0),event.pageY=original.clientY+(doc&&doc.scrollTop||body&&body.scrollTop||0)-(doc&&doc.clientTop||body&&body.clientTop||0)),event.which||button===undefined||(event.which=1&button?1:2&button?3:4&button?2:0),event}},fix:function(event){if(event[jQuery.expando])return event;var i,prop,copy,type=event.type,originalEvent=event,fixHook=this.fixHooks[type];for(fixHook||(this.fixHooks[type]=fixHook=rmouseEvent.test(type)?this.mouseHooks:rkeyEvent.test(type)?this.keyHooks:{}),copy=fixHook.props?this.props.concat(fixHook.props):this.props,event=new jQuery.Event(originalEvent),i=copy.length;i--;)prop=copy[i],event[prop]=originalEvent[prop];return event.target||(event.target=document),3===event.target.nodeType&&(event.target=event.target.parentNode),fixHook.filter?fixHook.filter(event,originalEvent):event},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==safeActiveElement()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===safeActiveElement()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&jQuery.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(event){return jQuery.nodeName(event.target,"a")}},beforeunload:{postDispatch:function(event){event.result!==undefined&&(event.originalEvent.returnValue=event.result)}}},simulate:function(type,elem,event,bubble){var e=jQuery.extend(new jQuery.Event,event,{type:type,isSimulated:!0,originalEvent:{}});bubble?jQuery.event.trigger(e,null,elem):jQuery.event.dispatch.call(elem,e),e.isDefaultPrevented()&&event.preventDefault()}},jQuery.removeEvent=function(elem,type,handle){elem.removeEventListener&&elem.removeEventListener(type,handle,!1)},jQuery.Event=function(src,props){return this instanceof jQuery.Event?(src&&src.type?(this.originalEvent=src,this.type=src.type,this.isDefaultPrevented=src.defaultPrevented||src.getPreventDefault&&src.getPreventDefault()?returnTrue:returnFalse):this.type=src,props&&jQuery.extend(this,props),this.timeStamp=src&&src.timeStamp||jQuery.now(),void(this[jQuery.expando]=!0)):new jQuery.Event(src,props)},jQuery.Event.prototype={isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=returnTrue,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=returnTrue,this.stopPropagation()}},jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj;return related&&(related===target||jQuery.contains(target,related))||(event.type=handleObj.origType,ret=handleObj.handler.apply(this,arguments),event.type=fix),ret}}}),jQuery.support.focusinBubbles||jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){var attaches=0,handler=function(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event),!0)};jQuery.event.special[fix]={setup:function(){0===attaches++&&document.addEventListener(orig,handler,!0)},teardown:function(){0===--attaches&&document.removeEventListener(orig,handler,!0)}}}),jQuery.fn.extend({on:function(types,selector,data,fn,one){var origFn,type;if("object"==typeof types){"string"!=typeof selector&&(data=data||selector,selector=undefined);for(type in types)this.on(type,selector,data,types[type],one);return this}if(null==data&&null==fn?(fn=selector,data=selector=undefined):null==fn&&("string"==typeof selector?(fn=data,data=undefined):(fn=data,data=selector,selector=undefined)),fn===!1)fn=returnFalse;else if(!fn)return this;return 1===one&&(origFn=fn,fn=function(event){return jQuery().off(event),origFn.apply(this,arguments)},fn.guid=origFn.guid||(origFn.guid=jQuery.guid++)),this.each(function(){jQuery.event.add(this,types,fn,data,selector)})},one:function(types,selector,data,fn){return this.on(types,selector,data,fn,1)},off:function(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj)return handleObj=types.handleObj,jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler),this;if("object"==typeof types){for(type in types)this.off(type,selector,types[type]);return this}return selector!==!1&&"function"!=typeof selector||(fn=selector,selector=undefined),fn===!1&&(fn=returnFalse),this.each(function(){jQuery.event.remove(this,types,fn,selector)})},trigger:function(type,data){return this.each(function(){jQuery.event.trigger(type,data,this)})},triggerHandler:function(type,data){var elem=this[0];return elem?jQuery.event.trigger(type,data,elem,!0):void 0}});var isSimple=/^.[^:#\[\.,]*$/,rparentsprev=/^(?:parents|prev(?:Until|All))/,rneedsContext=jQuery.expr.match.needsContext,guaranteedUnique={children:!0,contents:!0,next:!0,prev:!0};jQuery.fn.extend({find:function(selector){var i,ret=[],self=this,len=self.length;if("string"!=typeof selector)return this.pushStack(jQuery(selector).filter(function(){for(i=0;len>i;i++)if(jQuery.contains(self[i],this))return!0}));for(i=0;len>i;i++)jQuery.find(selector,self[i],ret);return ret=this.pushStack(len>1?jQuery.unique(ret):ret),ret.selector=this.selector?this.selector+" "+selector:selector,ret},has:function(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){for(var i=0;l>i;i++)if(jQuery.contains(this,targets[i]))return!0})},not:function(selector){return this.pushStack(winnow(this,selector||[],!0))},filter:function(selector){return this.pushStack(winnow(this,selector||[],!1))},is:function(selector){return!!winnow(this,"string"==typeof selector&&rneedsContext.test(selector)?jQuery(selector):selector||[],!1).length},closest:function(selectors,context){for(var cur,i=0,l=this.length,matched=[],pos=rneedsContext.test(selectors)||"string"!=typeof selectors?jQuery(selectors,context||this.context):0;l>i;i++)for(cur=this[i];cur&&cur!==context;cur=cur.parentNode)if(cur.nodeType<11&&(pos?pos.index(cur)>-1:1===cur.nodeType&&jQuery.find.matchesSelector(cur,selectors))){cur=matched.push(cur);break}return this.pushStack(matched.length>1?jQuery.unique(matched):matched)},index:function(elem){return elem?"string"==typeof elem?core_indexOf.call(jQuery(elem),this[0]):core_indexOf.call(this,elem.jquery?elem[0]:elem):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(selector,context){var set="string"==typeof selector?jQuery(selector,context):jQuery.makeArray(selector&&selector.nodeType?[selector]:selector),all=jQuery.merge(this.get(),set);return this.pushStack(jQuery.unique(all))},addBack:function(selector){return this.add(null==selector?this.prevObject:this.prevObject.filter(selector))}}),jQuery.each({parent:function(elem){var parent=elem.parentNode;return parent&&11!==parent.nodeType?parent:null},parents:function(elem){return jQuery.dir(elem,"parentNode")},parentsUntil:function(elem,i,until){return jQuery.dir(elem,"parentNode",until)},next:function(elem){return sibling(elem,"nextSibling")},prev:function(elem){return sibling(elem,"previousSibling")},nextAll:function(elem){return jQuery.dir(elem,"nextSibling")},prevAll:function(elem){return jQuery.dir(elem,"previousSibling")},nextUntil:function(elem,i,until){return jQuery.dir(elem,"nextSibling",until)},prevUntil:function(elem,i,until){return jQuery.dir(elem,"previousSibling",until)},siblings:function(elem){return jQuery.sibling((elem.parentNode||{}).firstChild,elem)},children:function(elem){return jQuery.sibling(elem.firstChild)},contents:function(elem){return elem.contentDocument||jQuery.merge([],elem.childNodes)}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);return"Until"!==name.slice(-5)&&(selector=until),selector&&"string"==typeof selector&&(matched=jQuery.filter(selector,matched)),this.length>1&&(guaranteedUnique[name]||jQuery.unique(matched),rparentsprev.test(name)&&matched.reverse()),this.pushStack(matched)}}),jQuery.extend({filter:function(expr,elems,not){var elem=elems[0];return not&&(expr=":not("+expr+")"),1===elems.length&&1===elem.nodeType?jQuery.find.matchesSelector(elem,expr)?[elem]:[]:jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return 1===elem.nodeType}))},dir:function(elem,dir,until){for(var matched=[],truncate=until!==undefined;(elem=elem[dir])&&9!==elem.nodeType;)if(1===elem.nodeType){if(truncate&&jQuery(elem).is(until))break;matched.push(elem)}return matched},sibling:function(n,elem){for(var matched=[];n;n=n.nextSibling)1===n.nodeType&&n!==elem&&matched.push(n);return matched}});var rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,rtagName=/<([\w:]+)/,rhtml=/<|&#?\w+;/,rnoInnerhtml=/<(?:script|style|link)/i,manipulation_rcheckableType=/^(?:checkbox|radio)$/i,rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rscriptType=/^$|\/(?:java|ecma)script/i,rscriptTypeMasked=/^true\/(.*)/,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,wrapMap={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};wrapMap.optgroup=wrapMap.option,wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead,wrapMap.th=wrapMap.td,jQuery.fn.extend({text:function(value){return jQuery.access(this,function(value){return value===undefined?jQuery.text(this):this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(value))},null,value,arguments.length)},append:function(){return this.domManip(arguments,function(elem){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var target=manipulationTarget(this,elem);target.appendChild(elem)}})},prepend:function(){return this.domManip(arguments,function(elem){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild)}})},before:function(){return this.domManip(arguments,function(elem){this.parentNode&&this.parentNode.insertBefore(elem,this)})},after:function(){return this.domManip(arguments,function(elem){this.parentNode&&this.parentNode.insertBefore(elem,this.nextSibling)})},remove:function(selector,keepData){for(var elem,elems=selector?jQuery.filter(selector,this):this,i=0;null!=(elem=elems[i]);i++)keepData||1!==elem.nodeType||jQuery.cleanData(getAll(elem)),elem.parentNode&&(keepData&&jQuery.contains(elem.ownerDocument,elem)&&setGlobalEval(getAll(elem,"script")),elem.parentNode.removeChild(elem));return this},empty:function(){for(var elem,i=0;null!=(elem=this[i]);i++)1===elem.nodeType&&(jQuery.cleanData(getAll(elem,!1)),elem.textContent="");return this},clone:function(dataAndEvents,deepDataAndEvents){return dataAndEvents=null==dataAndEvents?!1:dataAndEvents,deepDataAndEvents=null==deepDataAndEvents?dataAndEvents:deepDataAndEvents,this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents)})},html:function(value){return jQuery.access(this,function(value){var elem=this[0]||{},i=0,l=this.length;if(value===undefined&&1===elem.nodeType)return elem.innerHTML;if("string"==typeof value&&!rnoInnerhtml.test(value)&&!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){value=value.replace(rxhtmlTag,"<$1></$2>");try{for(;l>i;i++)elem=this[i]||{},1===elem.nodeType&&(jQuery.cleanData(getAll(elem,!1)),elem.innerHTML=value);elem=0}catch(e){}}elem&&this.empty().append(value)},null,value,arguments.length)},replaceWith:function(){var args=jQuery.map(this,function(elem){return[elem.nextSibling,elem.parentNode]}),i=0;return this.domManip(arguments,function(elem){var next=args[i++],parent=args[i++];parent&&(next&&next.parentNode!==parent&&(next=this.nextSibling),jQuery(this).remove(),parent.insertBefore(elem,next))},!0),i?this:this.remove()},detach:function(selector){return this.remove(selector,!0)},domManip:function(args,callback,allowIntersection){args=core_concat.apply([],args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=this.length,set=this,iNoClone=l-1,value=args[0],isFunction=jQuery.isFunction(value);if(isFunction||!(1>=l||"string"!=typeof value||jQuery.support.checkClone)&&rchecked.test(value))return this.each(function(index){var self=set.eq(index);isFunction&&(args[0]=value.call(this,index,self.html())),self.domManip(args,callback,allowIntersection)});if(l&&(fragment=jQuery.buildFragment(args,this[0].ownerDocument,!1,!allowIntersection&&this),first=fragment.firstChild,1===fragment.childNodes.length&&(fragment=first),first)){for(scripts=jQuery.map(getAll(fragment,"script"),disableScript),hasScripts=scripts.length;l>i;i++)node=fragment,i!==iNoClone&&(node=jQuery.clone(node,!0,!0),hasScripts&&jQuery.merge(scripts,getAll(node,"script"))),callback.call(this[i],node,i);if(hasScripts)for(doc=scripts[scripts.length-1].ownerDocument,jQuery.map(scripts,restoreScript),i=0;hasScripts>i;i++)node=scripts[i],rscriptType.test(node.type||"")&&!data_priv.access(node,"globalEval")&&jQuery.contains(doc,node)&&(node.src?jQuery._evalUrl(node.src):jQuery.globalEval(node.textContent.replace(rcleanScript,"")))}return this}}),jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){for(var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;last>=i;i++)elems=i===last?this:this.clone(!0),jQuery(insert[i])[original](elems),core_push.apply(ret,elems.get());return this.pushStack(ret)}}),jQuery.extend({clone:function(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(!0),inPage=jQuery.contains(elem.ownerDocument,elem);if(!(jQuery.support.noCloneChecked||1!==elem.nodeType&&11!==elem.nodeType||jQuery.isXMLDoc(elem)))for(destElements=getAll(clone),
srcElements=getAll(elem),i=0,l=srcElements.length;l>i;i++)fixInput(srcElements[i],destElements[i]);if(dataAndEvents)if(deepDataAndEvents)for(srcElements=srcElements||getAll(elem),destElements=destElements||getAll(clone),i=0,l=srcElements.length;l>i;i++)cloneCopyEvent(srcElements[i],destElements[i]);else cloneCopyEvent(elem,clone);return destElements=getAll(clone,"script"),destElements.length>0&&setGlobalEval(destElements,!inPage&&getAll(elem,"script")),clone},buildFragment:function(elems,context,scripts,selection){for(var elem,tmp,tag,wrap,contains,j,i=0,l=elems.length,fragment=context.createDocumentFragment(),nodes=[];l>i;i++)if(elem=elems[i],elem||0===elem)if("object"===jQuery.type(elem))jQuery.merge(nodes,elem.nodeType?[elem]:elem);else if(rhtml.test(elem)){for(tmp=tmp||fragment.appendChild(context.createElement("div")),tag=(rtagName.exec(elem)||["",""])[1].toLowerCase(),wrap=wrapMap[tag]||wrapMap._default,tmp.innerHTML=wrap[1]+elem.replace(rxhtmlTag,"<$1></$2>")+wrap[2],j=wrap[0];j--;)tmp=tmp.lastChild;jQuery.merge(nodes,tmp.childNodes),tmp=fragment.firstChild,tmp.textContent=""}else nodes.push(context.createTextNode(elem));for(fragment.textContent="",i=0;elem=nodes[i++];)if((!selection||-1===jQuery.inArray(elem,selection))&&(contains=jQuery.contains(elem.ownerDocument,elem),tmp=getAll(fragment.appendChild(elem),"script"),contains&&setGlobalEval(tmp),scripts))for(j=0;elem=tmp[j++];)rscriptType.test(elem.type||"")&&scripts.push(elem);return fragment},cleanData:function(elems){for(var data,elem,events,type,key,j,special=jQuery.event.special,i=0;(elem=elems[i])!==undefined;i++){if(Data.accepts(elem)&&(key=elem[data_priv.expando],key&&(data=data_priv.cache[key]))){if(events=Object.keys(data.events||{}),events.length)for(j=0;(type=events[j])!==undefined;j++)special[type]?jQuery.event.remove(elem,type):jQuery.removeEvent(elem,type,data.handle);data_priv.cache[key]&&delete data_priv.cache[key]}delete data_user.cache[elem[data_user.expando]]}},_evalUrl:function(url){return jQuery.ajax({url:url,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}}),jQuery.fn.extend({wrapAll:function(html){var wrap;return jQuery.isFunction(html)?this.each(function(i){jQuery(this).wrapAll(html.call(this,i))}):(this[0]&&(wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&wrap.insertBefore(this[0]),wrap.map(function(){for(var elem=this;elem.firstElementChild;)elem=elem.firstElementChild;return elem}).append(this)),this)},wrapInner:function(html){return jQuery.isFunction(html)?this.each(function(i){jQuery(this).wrapInner(html.call(this,i))}):this.each(function(){var self=jQuery(this),contents=self.contents();contents.length?contents.wrapAll(html):self.append(html)})},wrap:function(html){var isFunction=jQuery.isFunction(html);return this.each(function(i){jQuery(this).wrapAll(isFunction?html.call(this,i):html)})},unwrap:function(){return this.parent().each(function(){jQuery.nodeName(this,"body")||jQuery(this).replaceWith(this.childNodes)}).end()}});var curCSS,iframe,rdisplayswap=/^(none|table(?!-c[ea]).+)/,rmargin=/^margin/,rnumsplit=new RegExp("^("+core_pnum+")(.*)$","i"),rnumnonpx=new RegExp("^("+core_pnum+")(?!px)[a-z%]+$","i"),rrelNum=new RegExp("^([+-])=("+core_pnum+")","i"),elemdisplay={BODY:"block"},cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:0,fontWeight:400},cssExpand=["Top","Right","Bottom","Left"],cssPrefixes=["Webkit","O","Moz","ms"];jQuery.fn.extend({css:function(name,value){return jQuery.access(this,function(elem,name,value){var styles,len,map={},i=0;if(jQuery.isArray(name)){for(styles=getStyles(elem),len=name.length;len>i;i++)map[name[i]]=jQuery.css(elem,name[i],!1,styles);return map}return value!==undefined?jQuery.style(elem,name,value):jQuery.css(elem,name)},name,value,arguments.length>1)},show:function(){return showHide(this,!0)},hide:function(){return showHide(this)},toggle:function(state){return"boolean"==typeof state?state?this.show():this.hide():this.each(function(){isHidden(this)?jQuery(this).show():jQuery(this).hide()})}}),jQuery.extend({cssHooks:{opacity:{get:function(elem,computed){if(computed){var ret=curCSS(elem,"opacity");return""===ret?"1":ret}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(elem,name,value,extra){if(elem&&3!==elem.nodeType&&8!==elem.nodeType&&elem.style){var ret,type,hooks,origName=jQuery.camelCase(name),style=elem.style;return name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(style,origName)),hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName],value===undefined?hooks&&"get"in hooks&&(ret=hooks.get(elem,!1,extra))!==undefined?ret:style[name]:(type=typeof value,"string"===type&&(ret=rrelNum.exec(value))&&(value=(ret[1]+1)*ret[2]+parseFloat(jQuery.css(elem,name)),type="number"),null==value||"number"===type&&isNaN(value)||("number"!==type||jQuery.cssNumber[origName]||(value+="px"),jQuery.support.clearCloneStyle||""!==value||0!==name.indexOf("background")||(style[name]="inherit"),hooks&&"set"in hooks&&(value=hooks.set(elem,value,extra))===undefined||(style[name]=value)),void 0)}},css:function(elem,name,extra,styles){var val,num,hooks,origName=jQuery.camelCase(name);return name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(elem.style,origName)),hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName],hooks&&"get"in hooks&&(val=hooks.get(elem,!0,extra)),val===undefined&&(val=curCSS(elem,name,styles)),"normal"===val&&name in cssNormalTransform&&(val=cssNormalTransform[name]),""===extra||extra?(num=parseFloat(val),extra===!0||jQuery.isNumeric(num)?num||0:val):val}}),curCSS=function(elem,name,_computed){var width,minWidth,maxWidth,computed=_computed||getStyles(elem),ret=computed?computed.getPropertyValue(name)||computed[name]:undefined,style=elem.style;return computed&&(""!==ret||jQuery.contains(elem.ownerDocument,elem)||(ret=jQuery.style(elem,name)),rnumnonpx.test(ret)&&rmargin.test(name)&&(width=style.width,minWidth=style.minWidth,maxWidth=style.maxWidth,style.minWidth=style.maxWidth=style.width=ret,ret=computed.width,style.width=width,style.minWidth=minWidth,style.maxWidth=maxWidth)),ret},jQuery.each(["height","width"],function(i,name){jQuery.cssHooks[name]={get:function(elem,computed,extra){return computed?0===elem.offsetWidth&&rdisplayswap.test(jQuery.css(elem,"display"))?jQuery.swap(elem,cssShow,function(){return getWidthOrHeight(elem,name,extra)}):getWidthOrHeight(elem,name,extra):void 0},set:function(elem,value,extra){var styles=extra&&getStyles(elem);return setPositiveNumber(elem,value,extra?augmentWidthOrHeight(elem,name,extra,jQuery.support.boxSizing&&"border-box"===jQuery.css(elem,"boxSizing",!1,styles),styles):0)}}}),jQuery(function(){jQuery.support.reliableMarginRight||(jQuery.cssHooks.marginRight={get:function(elem,computed){return computed?jQuery.swap(elem,{display:"inline-block"},curCSS,[elem,"marginRight"]):void 0}}),!jQuery.support.pixelPosition&&jQuery.fn.position&&jQuery.each(["top","left"],function(i,prop){jQuery.cssHooks[prop]={get:function(elem,computed){return computed?(computed=curCSS(elem,prop),rnumnonpx.test(computed)?jQuery(elem).position()[prop]+"px":computed):void 0}}})}),jQuery.expr&&jQuery.expr.filters&&(jQuery.expr.filters.hidden=function(elem){return elem.offsetWidth<=0&&elem.offsetHeight<=0},jQuery.expr.filters.visible=function(elem){return!jQuery.expr.filters.hidden(elem)}),jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function(value){for(var i=0,expanded={},parts="string"==typeof value?value.split(" "):[value];4>i;i++)expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];return expanded}},rmargin.test(prefix)||(jQuery.cssHooks[prefix+suffix].set=setPositiveNumber)});var r20=/%20/g,rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;jQuery.fn.extend({serialize:function(){return jQuery.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this}).filter(function(){var type=this.type;return this.name&&!jQuery(this).is(":disabled")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!manipulation_rcheckableType.test(type))}).map(function(i,elem){var val=jQuery(this).val();return null==val?null:jQuery.isArray(val)?jQuery.map(val,function(val){return{name:elem.name,value:val.replace(rCRLF,"\r\n")}}):{name:elem.name,value:val.replace(rCRLF,"\r\n")}}).get()}}),jQuery.param=function(a,traditional){var prefix,s=[],add=function(key,value){value=jQuery.isFunction(value)?value():null==value?"":value,s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value)};if(traditional===undefined&&(traditional=jQuery.ajaxSettings&&jQuery.ajaxSettings.traditional),jQuery.isArray(a)||a.jquery&&!jQuery.isPlainObject(a))jQuery.each(a,function(){add(this.name,this.value)});else for(prefix in a)buildParams(prefix,a[prefix],traditional,add);return s.join("&").replace(r20,"+")},jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(i,name){jQuery.fn[name]=function(data,fn){return arguments.length>0?this.on(name,null,data,fn):this.trigger(name)}}),jQuery.fn.extend({hover:function(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver)},bind:function(types,data,fn){return this.on(types,null,data,fn)},unbind:function(types,fn){return this.off(types,null,fn)},delegate:function(selector,types,data,fn){return this.on(types,selector,data,fn)},undelegate:function(selector,types,fn){return 1===arguments.length?this.off(selector,"**"):this.off(types,selector||"**",fn)}});var ajaxLocParts,ajaxLocation,ajax_nonce=jQuery.now(),ajax_rquery=/\?/,rhash=/#.*$/,rts=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/gm,rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,rurl=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,_load=jQuery.fn.load,prefilters={},transports={},allTypes="*/".concat("*");try{ajaxLocation=location.href}catch(e){ajaxLocation=document.createElement("a"),ajaxLocation.href="",ajaxLocation=ajaxLocation.href}ajaxLocParts=rurl.exec(ajaxLocation.toLowerCase())||[],jQuery.fn.load=function(url,params,callback){if("string"!=typeof url&&_load)return _load.apply(this,arguments);var selector,type,response,self=this,off=url.indexOf(" ");return off>=0&&(selector=url.slice(off),url=url.slice(0,off)),jQuery.isFunction(params)?(callback=params,params=undefined):params&&"object"==typeof params&&(type="POST"),self.length>0&&jQuery.ajax({url:url,type:type,dataType:"html",data:params}).done(function(responseText){response=arguments,self.html(selector?jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):responseText)}).complete(callback&&function(jqXHR,status){self.each(callback,response||[jqXHR.responseText,status,jqXHR])}),this},jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(i,type){jQuery.fn[type]=function(fn){return this.on(type,fn)}}),jQuery.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ajaxLocation,type:"GET",isLocal:rlocalProtocol.test(ajaxLocParts[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":jQuery.parseJSON,"text xml":jQuery.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(target,settings){return settings?ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):ajaxExtend(jQuery.ajaxSettings,target)},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),ajax:function(url,options){function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;2!==state&&(state=2,timeoutTimer&&clearTimeout(timeoutTimer),transport=undefined,responseHeadersString=headers||"",jqXHR.readyState=status>0?4:0,isSuccess=status>=200&&300>status||304===status,responses&&(response=ajaxHandleResponses(s,jqXHR,responses)),response=ajaxConvert(s,response,jqXHR,isSuccess),isSuccess?(s.ifModified&&(modified=jqXHR.getResponseHeader("Last-Modified"),modified&&(jQuery.lastModified[cacheURL]=modified),modified=jqXHR.getResponseHeader("etag"),modified&&(jQuery.etag[cacheURL]=modified)),204===status||"HEAD"===s.type?statusText="nocontent":304===status?statusText="notmodified":(statusText=response.state,success=response.data,error=response.error,isSuccess=!error)):(error=statusText,!status&&statusText||(statusText="error",0>status&&(status=0))),jqXHR.status=status,jqXHR.statusText=(nativeStatusText||statusText)+"",isSuccess?deferred.resolveWith(callbackContext,[success,statusText,jqXHR]):deferred.rejectWith(callbackContext,[jqXHR,statusText,error]),jqXHR.statusCode(statusCode),statusCode=undefined,fireGlobals&&globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error]),completeDeferred.fireWith(callbackContext,[jqXHR,statusText]),fireGlobals&&(globalEventContext.trigger("ajaxComplete",[jqXHR,s]),--jQuery.active||jQuery.event.trigger("ajaxStop")))}"object"==typeof url&&(options=url,url=undefined),options=options||{};var transport,cacheURL,responseHeadersString,responseHeaders,timeoutTimer,parts,fireGlobals,i,s=jQuery.ajaxSetup({},options),callbackContext=s.context||s,globalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),statusCode=s.statusCode||{},requestHeaders={},requestHeadersNames={},state=0,strAbort="canceled",jqXHR={readyState:0,getResponseHeader:function(key){var match;if(2===state){if(!responseHeaders)for(responseHeaders={};match=rheaders.exec(responseHeadersString);)responseHeaders[match[1].toLowerCase()]=match[2];match=responseHeaders[key.toLowerCase()]}return null==match?null:match},getAllResponseHeaders:function(){return 2===state?responseHeadersString:null},setRequestHeader:function(name,value){var lname=name.toLowerCase();return state||(name=requestHeadersNames[lname]=requestHeadersNames[lname]||name,requestHeaders[name]=value),this},overrideMimeType:function(type){return state||(s.mimeType=type),this},statusCode:function(map){var code;if(map)if(2>state)for(code in map)statusCode[code]=[statusCode[code],map[code]];else jqXHR.always(map[jqXHR.status]);return this},abort:function(statusText){var finalText=statusText||strAbort;return transport&&transport.abort(finalText),done(0,finalText),this}};if(deferred.promise(jqXHR).complete=completeDeferred.add,jqXHR.success=jqXHR.done,jqXHR.error=jqXHR.fail,s.url=((url||s.url||ajaxLocation)+"").replace(rhash,"").replace(rprotocol,ajaxLocParts[1]+"//"),s.type=options.method||options.type||s.method||s.type,s.dataTypes=jQuery.trim(s.dataType||"*").toLowerCase().match(core_rnotwhite)||[""],null==s.crossDomain&&(parts=rurl.exec(s.url.toLowerCase()),s.crossDomain=!(!parts||parts[1]===ajaxLocParts[1]&&parts[2]===ajaxLocParts[2]&&(parts[3]||("http:"===parts[1]?"80":"443"))===(ajaxLocParts[3]||("http:"===ajaxLocParts[1]?"80":"443")))),s.data&&s.processData&&"string"!=typeof s.data&&(s.data=jQuery.param(s.data,s.traditional)),inspectPrefiltersOrTransports(prefilters,s,options,jqXHR),2===state)return jqXHR;fireGlobals=s.global,fireGlobals&&0===jQuery.active++&&jQuery.event.trigger("ajaxStart"),s.type=s.type.toUpperCase(),s.hasContent=!rnoContent.test(s.type),cacheURL=s.url,s.hasContent||(s.data&&(cacheURL=s.url+=(ajax_rquery.test(cacheURL)?"&":"?")+s.data,delete s.data),s.cache===!1&&(s.url=rts.test(cacheURL)?cacheURL.replace(rts,"$1_="+ajax_nonce++):cacheURL+(ajax_rquery.test(cacheURL)?"&":"?")+"_="+ajax_nonce++)),s.ifModified&&(jQuery.lastModified[cacheURL]&&jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]),jQuery.etag[cacheURL]&&jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL])),(s.data&&s.hasContent&&s.contentType!==!1||options.contentType)&&jqXHR.setRequestHeader("Content-Type",s.contentType),jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+("*"!==s.dataTypes[0]?", "+allTypes+"; q=0.01":""):s.accepts["*"]);for(i in s.headers)jqXHR.setRequestHeader(i,s.headers[i]);if(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===!1||2===state))return jqXHR.abort();strAbort="abort";for(i in{success:1,error:1,complete:1})jqXHR[i](s[i]);if(transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR)){jqXHR.readyState=1,fireGlobals&&globalEventContext.trigger("ajaxSend",[jqXHR,s]),s.async&&s.timeout>0&&(timeoutTimer=setTimeout(function(){jqXHR.abort("timeout")},s.timeout));try{state=1,transport.send(requestHeaders,done)}catch(e){if(!(2>state))throw e;done(-1,e)}}else done(-1,"No Transport");return jqXHR},getJSON:function(url,data,callback){return jQuery.get(url,data,callback,"json")},getScript:function(url,callback){return jQuery.get(url,undefined,callback,"script")}}),jQuery.each(["get","post"],function(i,method){jQuery[method]=function(url,data,callback,type){return jQuery.isFunction(data)&&(type=type||callback,callback=data,data=undefined),jQuery.ajax({url:url,type:method,dataType:type,data:data,success:callback})}}),jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(text){return jQuery.globalEval(text),text}}}),jQuery.ajaxPrefilter("script",function(s){s.cache===undefined&&(s.cache=!1),s.crossDomain&&(s.type="GET")}),jQuery.ajaxTransport("script",function(s){if(s.crossDomain){var script,callback;return{send:function(_,complete){script=jQuery("<script>").prop({async:!0,charset:s.scriptCharset,src:s.url}).on("load error",callback=function(evt){script.remove(),callback=null,evt&&complete("error"===evt.type?404:200,evt.type)}),document.head.appendChild(script[0])},abort:function(){callback&&callback()}}}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/;jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var callback=oldCallbacks.pop()||jQuery.expando+"_"+ajax_nonce++;return this[callback]=!0,callback}}),jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp!==!1&&(rjsonp.test(s.url)?"url":"string"==typeof s.data&&!(s.contentType||"").indexOf("application/x-www-form-urlencoded")&&rjsonp.test(s.data)&&"data");return jsonProp||"jsonp"===s.dataTypes[0]?(callbackName=s.jsonpCallback=jQuery.isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback,jsonProp?s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName):s.jsonp!==!1&&(s.url+=(ajax_rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName),s.converters["script json"]=function(){return responseContainer||jQuery.error(callbackName+" was not called"),responseContainer[0]},s.dataTypes[0]="json",overwritten=window[callbackName],window[callbackName]=function(){responseContainer=arguments},jqXHR.always(function(){window[callbackName]=overwritten,s[callbackName]&&(s.jsonpCallback=originalSettings.jsonpCallback,oldCallbacks.push(callbackName)),responseContainer&&jQuery.isFunction(overwritten)&&overwritten(responseContainer[0]),responseContainer=overwritten=undefined}),"script"):void 0}),jQuery.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var xhrSupported=jQuery.ajaxSettings.xhr(),xhrSuccessStatus={0:200,1223:204},xhrId=0,xhrCallbacks={};window.ActiveXObject&&jQuery(window).on("unload",function(){for(var key in xhrCallbacks)xhrCallbacks[key]();xhrCallbacks=undefined}),jQuery.support.cors=!!xhrSupported&&"withCredentials"in xhrSupported,jQuery.support.ajax=xhrSupported=!!xhrSupported,jQuery.ajaxTransport(function(options){var callback;return jQuery.support.cors||xhrSupported&&!options.crossDomain?{send:function(headers,complete){var i,id,xhr=options.xhr();if(xhr.open(options.type,options.url,options.async,options.username,options.password),options.xhrFields)for(i in options.xhrFields)xhr[i]=options.xhrFields[i];options.mimeType&&xhr.overrideMimeType&&xhr.overrideMimeType(options.mimeType),options.crossDomain||headers["X-Requested-With"]||(headers["X-Requested-With"]="XMLHttpRequest");for(i in headers)xhr.setRequestHeader(i,headers[i]);callback=function(type){return function(){callback&&(delete xhrCallbacks[id],callback=xhr.onload=xhr.onerror=null,"abort"===type?xhr.abort():"error"===type?complete(xhr.status||404,xhr.statusText):complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,"string"==typeof xhr.responseText?{text:xhr.responseText}:undefined,xhr.getAllResponseHeaders()))}},xhr.onload=callback(),xhr.onerror=callback("error"),callback=xhrCallbacks[id=xhrId++]=callback("abort"),xhr.send(options.hasContent&&options.data||null)},abort:function(){callback&&callback()}}:void 0});var fxNow,timerId,rfxtypes=/^(?:toggle|show|hide)$/,rfxnum=new RegExp("^(?:([+-])=|)("+core_pnum+")([a-z%]*)$","i"),rrun=/queueHooks$/,animationPrefilters=[defaultPrefilter],tweeners={"*":[function(prop,value){var tween=this.createTween(prop,value),target=tween.cur(),parts=rfxnum.exec(value),unit=parts&&parts[3]||(jQuery.cssNumber[prop]?"":"px"),start=(jQuery.cssNumber[prop]||"px"!==unit&&+target)&&rfxnum.exec(jQuery.css(tween.elem,prop)),scale=1,maxIterations=20;if(start&&start[3]!==unit){unit=unit||start[3],parts=parts||[],start=+target||1;do scale=scale||".5",start/=scale,jQuery.style(tween.elem,prop,start+unit);while(scale!==(scale=tween.cur()/target)&&1!==scale&&--maxIterations)}return parts&&(start=tween.start=+start||+target||0,tween.unit=unit,tween.end=parts[1]?start+(parts[1]+1)*parts[2]:+parts[2]),tween}]};jQuery.Animation=jQuery.extend(Animation,{tweener:function(props,callback){jQuery.isFunction(props)?(callback=props,props=["*"]):props=props.split(" ");for(var prop,index=0,length=props.length;length>index;index++)prop=props[index],tweeners[prop]=tweeners[prop]||[],tweeners[prop].unshift(callback)},prefilter:function(callback,prepend){prepend?animationPrefilters.unshift(callback):animationPrefilters.push(callback)}}),jQuery.Tween=Tween,Tween.prototype={constructor:Tween,init:function(elem,options,prop,end,easing,unit){this.elem=elem,this.prop=prop,this.easing=easing||"swing",this.options=options,this.start=this.now=this.cur(),this.end=end,this.unit=unit||(jQuery.cssNumber[prop]?"":"px")},cur:function(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this)},run:function(percent){var eased,hooks=Tween.propHooks[this.prop];return this.options.duration?this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration):this.pos=eased=percent,this.now=(this.end-this.start)*eased+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),hooks&&hooks.set?hooks.set(this):Tween.propHooks._default.set(this),this}},Tween.prototype.init.prototype=Tween.prototype,Tween.propHooks={_default:{get:function(tween){var result;return null==tween.elem[tween.prop]||tween.elem.style&&null!=tween.elem.style[tween.prop]?(result=jQuery.css(tween.elem,tween.prop,""),result&&"auto"!==result?result:0):tween.elem[tween.prop]},set:function(tween){jQuery.fx.step[tween.prop]?jQuery.fx.step[tween.prop](tween):tween.elem.style&&(null!=tween.elem.style[jQuery.cssProps[tween.prop]]||jQuery.cssHooks[tween.prop])?jQuery.style(tween.elem,tween.prop,tween.now+tween.unit):tween.elem[tween.prop]=tween.now}}},Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={set:function(tween){tween.elem.nodeType&&tween.elem.parentNode&&(tween.elem[tween.prop]=tween.now)}},jQuery.each(["toggle","show","hide"],function(i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return null==speed||"boolean"==typeof speed?cssFn.apply(this,arguments):this.animate(genFx(name,!0),speed,easing,callback)}}),jQuery.fn.extend({fadeTo:function(speed,to,easing,callback){return this.filter(isHidden).css("opacity",0).show().end().animate({opacity:to},speed,easing,callback)},animate:function(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function(){var anim=Animation(this,jQuery.extend({},prop),optall);(empty||data_priv.get(this,"finish"))&&anim.stop(!0)};return doAnimation.finish=doAnimation,empty||optall.queue===!1?this.each(doAnimation):this.queue(optall.queue,doAnimation)},stop:function(type,clearQueue,gotoEnd){var stopQueue=function(hooks){var stop=hooks.stop;delete hooks.stop,stop(gotoEnd)};return"string"!=typeof type&&(gotoEnd=clearQueue,clearQueue=type,type=undefined),clearQueue&&type!==!1&&this.queue(type||"fx",[]),this.each(function(){var dequeue=!0,index=null!=type&&type+"queueHooks",timers=jQuery.timers,data=data_priv.get(this);if(index)data[index]&&data[index].stop&&stopQueue(data[index]);else for(index in data)data[index]&&data[index].stop&&rrun.test(index)&&stopQueue(data[index]);for(index=timers.length;index--;)timers[index].elem!==this||null!=type&&timers[index].queue!==type||(timers[index].anim.stop(gotoEnd),dequeue=!1,timers.splice(index,1));!dequeue&&gotoEnd||jQuery.dequeue(this,type)})},finish:function(type){return type!==!1&&(type=type||"fx"),this.each(function(){var index,data=data_priv.get(this),queue=data[type+"queue"],hooks=data[type+"queueHooks"],timers=jQuery.timers,length=queue?queue.length:0;for(data.finish=!0,jQuery.queue(this,type,[]),hooks&&hooks.stop&&hooks.stop.call(this,!0),index=timers.length;index--;)timers[index].elem===this&&timers[index].queue===type&&(timers[index].anim.stop(!0),timers.splice(index,1));for(index=0;length>index;index++)queue[index]&&queue[index].finish&&queue[index].finish.call(this);delete data.finish})}}),jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback)}}),jQuery.speed=function(speed,easing,fn){var opt=speed&&"object"==typeof speed?jQuery.extend({},speed):{complete:fn||!fn&&easing||jQuery.isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!jQuery.isFunction(easing)&&easing};return opt.duration=jQuery.fx.off?0:"number"==typeof opt.duration?opt.duration:opt.duration in jQuery.fx.speeds?jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default,null!=opt.queue&&opt.queue!==!0||(opt.queue="fx"),opt.old=opt.complete,opt.complete=function(){jQuery.isFunction(opt.old)&&opt.old.call(this),opt.queue&&jQuery.dequeue(this,opt.queue)},opt},jQuery.easing={linear:function(p){return p},swing:function(p){return.5-Math.cos(p*Math.PI)/2}},jQuery.timers=[],jQuery.fx=Tween.prototype.init,jQuery.fx.tick=function(){var timer,timers=jQuery.timers,i=0;for(fxNow=jQuery.now();i<timers.length;i++)timer=timers[i],timer()||timers[i]!==timer||timers.splice(i--,1);timers.length||jQuery.fx.stop(),fxNow=undefined},jQuery.fx.timer=function(timer){timer()&&jQuery.timers.push(timer)&&jQuery.fx.start()},jQuery.fx.interval=13,jQuery.fx.start=function(){timerId||(timerId=setInterval(jQuery.fx.tick,jQuery.fx.interval))},jQuery.fx.stop=function(){clearInterval(timerId),timerId=null},jQuery.fx.speeds={slow:600,fast:200,_default:400},jQuery.fx.step={},jQuery.expr&&jQuery.expr.filters&&(jQuery.expr.filters.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem}).length}),jQuery.fn.offset=function(options){if(arguments.length)return options===undefined?this:this.each(function(i){jQuery.offset.setOffset(this,options,i)});var docElem,win,elem=this[0],box={top:0,left:0},doc=elem&&elem.ownerDocument;if(doc)return docElem=doc.documentElement,jQuery.contains(docElem,elem)?(typeof elem.getBoundingClientRect!==core_strundefined&&(box=elem.getBoundingClientRect()),win=getWindow(doc),{top:box.top+win.pageYOffset-docElem.clientTop,left:box.left+win.pageXOffset-docElem.clientLeft}):box},jQuery.offset={setOffset:function(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={};"static"===position&&(elem.style.position="relative"),curOffset=curElem.offset(),curCSSTop=jQuery.css(elem,"top"),curCSSLeft=jQuery.css(elem,"left"),calculatePosition=("absolute"===position||"fixed"===position)&&(curCSSTop+curCSSLeft).indexOf("auto")>-1,calculatePosition?(curPosition=curElem.position(),curTop=curPosition.top,curLeft=curPosition.left):(curTop=parseFloat(curCSSTop)||0,curLeft=parseFloat(curCSSLeft)||0),jQuery.isFunction(options)&&(options=options.call(elem,i,curOffset)),null!=options.top&&(props.top=options.top-curOffset.top+curTop),null!=options.left&&(props.left=options.left-curOffset.left+curLeft),"using"in options?options.using.call(elem,props):curElem.css(props)}},jQuery.fn.extend({position:function(){if(this[0]){var offsetParent,offset,elem=this[0],parentOffset={top:0,left:0};return"fixed"===jQuery.css(elem,"position")?offset=elem.getBoundingClientRect():(offsetParent=this.offsetParent(),offset=this.offset(),jQuery.nodeName(offsetParent[0],"html")||(parentOffset=offsetParent.offset()),parentOffset.top+=jQuery.css(offsetParent[0],"borderTopWidth",!0),parentOffset.left+=jQuery.css(offsetParent[0],"borderLeftWidth",!0)),{top:offset.top-parentOffset.top-jQuery.css(elem,"marginTop",!0),left:offset.left-parentOffset.left-jQuery.css(elem,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var offsetParent=this.offsetParent||docElem;offsetParent&&!jQuery.nodeName(offsetParent,"html")&&"static"===jQuery.css(offsetParent,"position");)offsetParent=offsetParent.offsetParent;return offsetParent||docElem})}}),jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top="pageYOffset"===prop;jQuery.fn[method]=function(val){return jQuery.access(this,function(elem,method,val){var win=getWindow(elem);return val===undefined?win?win[prop]:elem[method]:void(win?win.scrollTo(top?window.pageXOffset:val,top?val:window.pageYOffset):elem[method]=val)},method,val,arguments.length,null)}}),jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},function(defaultExtra,funcName){jQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||"boolean"!=typeof margin),extra=defaultExtra||(margin===!0||value===!0?"margin":"border");return jQuery.access(this,function(elem,type,value){var doc;return jQuery.isWindow(elem)?elem.document.documentElement["client"+name]:9===elem.nodeType?(doc=elem.documentElement,Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name])):value===undefined?jQuery.css(elem,type,extra):jQuery.style(elem,type,value,extra)},type,chainable?margin:undefined,chainable,null)}})}),jQuery.fn.size=function(){return this.length},jQuery.fn.andSelf=jQuery.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=jQuery:"function"==typeof define&&define.amd&&define("jquery",[],function(){return jQuery}),"object"==typeof window&&"object"==typeof window.document&&(window.jQuery=window.$=jQuery);
}(window),function(){function tmpl(str,data){var fn=/\W/.test(str)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+str.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,function(match){return match.replace(/\'/g,"\r")}).replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):cache[str]=cache[str]||tmpl(document.getElementById(str).innerHTML);return data?fn(data):fn}var cache={};window.tmpl=tmpl}(),clickLocations=[];var map;ContactsView.prototype.getHTML=function(type,value){var html='<li class="flex-item"><span class="orange-text">{{type}}</span><span class="white-text">{{value}}</span></li>';return html.replace("{{type}}",type).replace("{{value}}",value)},ContactsView.prototype.render=function(){var bio=octopus.getBio(),view=this,contactTypes=Object.keys(bio.contacts),contactsHTML=contactTypes.reduce(function(html,type){return html+view.getHTML(type,bio.contacts[type])},"");this.$element.html(contactsHTML)},SkillsView.prototype.getHTML=function(value){var html='<li class="flex-item"><span class="white-text">{{value}}</span></li>';return html.replace("{{value}}",value)},SkillsView.prototype.render=function(){var skills=octopus.getBio().skills,view=this,skillsHTML=skills.reduce(function(html,skill){return html+view.getHTML(skill)},"");this.$element.html(skillsHTML)};var mapView={init:function(){this.$element=$("#mapDiv"),this.render()},render:function(){this.$element.append('<div id="map"></div>')}},bioView={init:function(){this.$element=$("#header"),this.contactsView=new ContactsView(this.$element.find("#topContacts")),this.skillsView=new SkillsView(this.$element.find("#skills")),this.render()},render:function(){var bio=octopus.getBio();this.$element.find("#name").text(bio.name),this.$element.find("#role").text(bio.role),this.$element.find("#profileImage").attr("src",bio.biopic),this.$element.find("#welcomeMessage").text(bio.welcomeMessage),this.contactsView.render(),this.skillsView.render()}},workView={init:function(){this.$element=$("#workExperience"),this.template=tmpl("work_template"),this.render()},render:function(){var workObj=octopus.getWork(),html=this.template(workObj);this.$element.append(html)}},projectsView={init:function(){this.$element=$("#projects"),this.template=tmpl("projects_template"),this.render()},render:function(){var projectsObj=octopus.getProjects(),html=this.template(projectsObj);this.$element.append(html)}},educationView={init:function(){this.$element=$("#education"),this.schoolsTemplate=tmpl("education_schools_template"),this.onlineCoursesTemplate=tmpl("education_onlineCourses_template"),this.render()},render:function(){var education=octopus.getEducation();this.$element.append(this.schoolsTemplate(education)),this.$element.append(this.onlineCoursesTemplate(education))}},letsConnectView={init:function(){this.$element=$("#lets-connect"),this.contactsView=new ContactsView(this.$element.find("#footerContacts")),this.render()},render:function(){this.contactsView.render()}},model=null,view={bio:bioView,work:workView,projects:projectsView,education:educationView,map:mapView,letsConnect:letsConnectView,init:function(){this.bio.init(),this.work.init(),this.projects.init(),this.education.init(),this.map.init(),this.letsConnect.init()}},octopus={init:function(appData){model=appData,view.init()},getBio:function(){return model.bio},getWork:function(){return model.work},getProjects:function(){return model.projects},getEducation:function(){return model.education}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci5qcyIsImNvbnRhY3RzLmpzIiwic2tpbGxzLmpzIiwicmVzdW1lQnVpbGRlci5qcyIsImpRdWVyeS5qcyIsInRtcGwuanMiLCJtYXAuanMiLCJiaW8uanMiLCJ3b3JrLmpzIiwicHJvamVjdHMuanMiLCJlZHVjYXRpb24uanMiLCJsZXRzLWNvbm5lY3QuanMiXSwibmFtZXMiOlsiaW5OYW1lIiwibmFtZSIsIm5ld05hbWUiLCJyZXBsYWNlIiwibWF0Y2giLCJwMSIsInRvVXBwZXJDYXNlIiwibG9nQ2xpY2tzIiwieCIsInkiLCJjbGlja0xvY2F0aW9ucyIsInB1c2giLCJjb25zb2xlIiwibG9nIiwiaW5pdGlhbGl6ZU1hcCIsImxvY2F0aW9uRmluZGVyIiwiZGF0YSIsImZpbmRMb2NhdGlvbnMiLCJpdGVtIiwiayIsImhhc093blByb3BlcnR5IiwibG9jYXRpb25zIiwiY3JlYXRlTWFwTWFya2VyIiwicGxhY2VEYXRhIiwibGF0IiwiZ2VvbWV0cnkiLCJsb2NhdGlvbiIsImxvbiIsImxuZyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiYm91bmRzIiwid2luZG93IiwibWFwQm91bmRzIiwibWFya2VyIiwiZ29vZ2xlIiwibWFwcyIsIk1hcmtlciIsIm1hcCIsInBvc2l0aW9uIiwidGl0bGUiLCJpbmZvV2luZG93IiwiSW5mb1dpbmRvdyIsImNvbnRlbnQiLCJldmVudCIsImFkZExpc3RlbmVyIiwib3BlbiIsImV4dGVuZCIsIkxhdExuZyIsImZpdEJvdW5kcyIsInNldENlbnRlciIsImdldENlbnRlciIsImNhbGxiYWNrIiwicmVzdWx0cyIsInN0YXR1cyIsInBsYWNlcyIsIlBsYWNlc1NlcnZpY2VTdGF0dXMiLCJPSyIsInBpblBvc3RlciIsInNlcnZpY2UiLCJQbGFjZXNTZXJ2aWNlIiwiZm9yRWFjaCIsInBsYWNlIiwicmVxdWVzdCIsInF1ZXJ5IiwidGV4dFNlYXJjaCIsIm1hcE9wdGlvbnMiLCJkaXNhYmxlRGVmYXVsdFVJIiwiTWFwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiTGF0TG5nQm91bmRzIiwibW9kZWwiLCJoaWRlRW1wdHlTZWN0aW9ucyIsIiRzZWN0aW9uIiwiJGl0ZW0iLCJzaG91bGRTaG93Iiwic2VjdGlvbnMiLCJzZWN0aW9uIiwiJCIsImxlbmd0aCIsInRvZ2dsZSIsIkNvbnRhY3RzVmlldyIsIiRlbGVtZW50IiwidGhpcyIsIlNraWxsc1ZpZXciLCJtYWluIiwiZ2V0SlNPTiIsImRvbmUiLCJhcHBEYXRhIiwib2N0b3B1cyIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImpRdWVyeSIsImNsaWNrIiwicGFnZVgiLCJwYWdlWSIsImVycm9yIiwidW5kZWZpbmVkIiwiaXNBcnJheWxpa2UiLCJvYmoiLCJ0eXBlIiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0Iiwib3B0aW9uc0NhY2hlIiwiZWFjaCIsImNvcmVfcm5vdHdoaXRlIiwiXyIsImZsYWciLCJEYXRhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjYWNoZSIsImdldCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwiZGF0YUF0dHIiLCJlbGVtIiwia2V5Iiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicmJyYWNlIiwidGVzdCIsIkpTT04iLCJwYXJzZSIsImRhdGFfdXNlciIsInNldCIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwiaSIsImNhbGwiLCJpc1NpbXBsZSIsImZpbHRlciIsImNvcmVfaW5kZXhPZiIsIm1hbmlwdWxhdGlvblRhcmdldCIsIm5vZGVOYW1lIiwiZmlyc3RDaGlsZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJleGVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiZGF0YV9wcml2IiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiYWRkIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsImZpeElucHV0IiwibWFuaXB1bGF0aW9uX3JjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsInZlbmRvclByb3BOYW1lIiwic3R5bGUiLCJjYXBOYW1lIiwiY2hhckF0Iiwic2xpY2UiLCJvcmlnTmFtZSIsImNzc1ByZWZpeGVzIiwiaXNIaWRkZW4iLCJlbCIsImNzcyIsImNvbnRhaW5zIiwiZ2V0U3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInNob3dIaWRlIiwic2hvdyIsImRpc3BsYXkiLCJoaWRkZW4iLCJ2YWx1ZXMiLCJpbmRleCIsImNzc19kZWZhdWx0RGlzcGxheSIsInNldFBvc2l0aXZlTnVtYmVyIiwidmFsdWUiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJybnVtc3BsaXQiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwic3VwcG9ydCIsImJveFNpemluZyIsImN1ckNTUyIsInJudW1ub25weCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsImRvYyIsImVsZW1kaXNwbGF5IiwiYWN0dWFsRGlzcGxheSIsImlmcmFtZSIsImFwcGVuZFRvIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJkZXRhY2giLCJib2R5IiwicmVtb3ZlIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsImlzQXJyYXkiLCJ2IiwicmJyYWNrZXQiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJvcmlnaW5hbE9wdGlvbnMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJ0YXJnZXQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInRtcCIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJzcGxpdCIsInN0YXRlIiwiY3JlYXRlRnhOb3ciLCJzZXRUaW1lb3V0IiwiZnhOb3ciLCJub3ciLCJjcmVhdGVUd2VlbiIsInByb3AiLCJhbmltYXRpb24iLCJ0d2VlbiIsImNvbGxlY3Rpb24iLCJ0d2VlbmVycyIsImNvbmNhdCIsIkFuaW1hdGlvbiIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJhbHdheXMiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvbWlzZSIsInByb3BzIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJlbmQiLCJUd2VlbiIsImVhc2luZyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3BGaWx0ZXIiLCJzdGFydCIsImZ4IiwidGltZXIiLCJhbmltIiwicXVldWUiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiZmFpbCIsImhvb2tzIiwiY2FtZWxDYXNlIiwiY3NzSG9va3MiLCJleHBhbmQiLCJkZWZhdWx0UHJlZmlsdGVyIiwib2xkZmlyZSIsIm9yaWciLCJkYXRhU2hvdyIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsImhpZGUiLCJwcm90b3R5cGUiLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5Iiwid2lkdGgiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsInJvb3RqUXVlcnkiLCJyZWFkeUxpc3QiLCJjb3JlX3N0cnVuZGVmaW5lZCIsImRvY0VsZW0iLCJfalF1ZXJ5IiwiXyQiLCJjbGFzczJ0eXBlIiwiY29yZV9kZWxldGVkSWRzIiwiY29yZV92ZXJzaW9uIiwiY29yZV9jb25jYXQiLCJjb3JlX3B1c2giLCJjb3JlX3NsaWNlIiwiaW5kZXhPZiIsImNvcmVfdG9TdHJpbmciLCJ0b1N0cmluZyIsImNvcmVfaGFzT3duIiwiY29yZV90cmltIiwidHJpbSIsInNlbGVjdG9yIiwiZm4iLCJjb3JlX3BudW0iLCJzb3VyY2UiLCJycXVpY2tFeHByIiwicnNpbmdsZVRhZyIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJmaW5kIiwicGFyc2VIVE1MIiwiaXNQbGFpbk9iamVjdCIsImF0dHIiLCJnZXRFbGVtZW50QnlJZCIsInBhcmVudE5vZGUiLCJtYWtlQXJyYXkiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImFyZ3MiLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsIm5vQ29uZmxpY3QiLCJpc1JlYWR5IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VyIiwib2ZmIiwiQXJyYXkiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwiU3RyaW5nIiwibXNnIiwiRXJyb3IiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInNjcmlwdHMiLCJidWlsZEZyYWdtZW50IiwiY2hpbGROb2RlcyIsInBhcnNlSlNPTiIsInBhcnNlWE1MIiwieG1sIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwibm9vcCIsImdsb2JhbEV2YWwiLCJjb2RlIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidGV4dCIsImhlYWQiLCJyZW1vdmVDaGlsZCIsInN0cmluZyIsImFyciIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnYiLCJyZXRWYWwiLCJhcmciLCJndWlkIiwicHJveHkiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJEYXRlIiwic3dhcCIsIm9sZCIsInJlYWR5U3RhdGUiLCJTaXp6bGUiLCJzZWVkIiwibSIsImdyb3VwcyIsIm5pZCIsIm5ld0NvbnRleHQiLCJuZXdTZWxlY3RvciIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJyYnVnZ3lRU0EiLCJ0b2tlbml6ZSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJqb2luIiwicXNhRXJyb3IiLCJzZWxlY3QiLCJydHJpbSIsImNyZWF0ZUNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInBhcnNlT25seSIsIm1hdGNoZWQiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbkNhY2hlIiwicHJlRmlsdGVyIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwibWF0Y2hFeHByIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm91dGVyQ2FjaGUiLCJkaXJrZXkiLCJkaXJydW5zIiwiY2FjaGVkcnVucyIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJtYXRjaGVyQ2FjaGVkUnVucyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwiZXhwYW5kQ29udGV4dCIsInNldE1hdGNoZWQiLCJtYXRjaGVkQ291bnQiLCJvdXRlcm1vc3QiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJjb250ZXh0cyIsInRva2VuIiwiZ2V0QnlJZCIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImNvbXBpbGUiLCJnZXRUZXh0IiwiaXNYTUwiLCJzb3J0SW5wdXQiLCJyYnVnZ3lNYXRjaGVzIiwiY2xhc3NDYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJoYXNEdXBsaWNhdGUiLCJzb3J0T3JkZXIiLCJzdHJ1bmRlZmluZWQiLCJoYXNPd24iLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImNoYXJhY3RlckVuY29kaW5nIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwiUmVnRXhwIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0Iiwicm5hdGl2ZSIsInJpbnB1dHMiLCJyaGVhZGVyIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsImZyb21DaGFyQ29kZSIsImVscyIsIm5vZGUiLCJwYXJlbnQiLCJhdHRhY2hFdmVudCIsInRvcCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJpbm5lckhUTUwiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInBzZXVkbyIsImlkeCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsImdyb3VwIiwiZGl2MSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmciLCJmaXJpbmdTdGFydCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4IiwibGlzdCIsInN0YWNrIiwib25jZSIsInN0b3BPbkZhbHNlIiwic2VsZiIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsImFjdGlvbiIsInJldHVybmVkIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vdGlmeSIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwib3B0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmVsaWFibGVNYXJnaW5SaWdodCIsInBpeGVsUG9zaXRpb24iLCJub0Nsb25lQ2hlY2tlZCIsImNsb25lTm9kZSIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsImNoZWNrQ2xvbmUiLCJmb2N1c2luQnViYmxlcyIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiY29udGFpbmVyIiwibWFyZ2luRGl2IiwiZGl2UmVzZXQiLCJjc3NUZXh0Iiwiem9vbSIsIm1hcmdpblJpZ2h0IiwidWlkIiwiYWNjZXB0cyIsIm93bmVyIiwiZGVzY3JpcHRvciIsInVubG9jayIsImRlZmluZVByb3BlcnRpZXMiLCJzdG9yZWQiLCJjYW1lbCIsImRpc2NhcmQiLCJhY2NlcHREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsIm5leHQiLCJzZXR0ZXIiLCJkZWxheSIsInRpbWUiLCJzcGVlZHMiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJub2RlSG9vayIsImJvb2xIb29rIiwicmNsYXNzIiwicnJldHVybiIsInJmb2N1c2FibGUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGF6eiIsInByb2NlZWQiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJ2YWxIb29rcyIsIm9wdGlvbiIsIm9uZSIsIm9wdGlvblNldCIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJmb3IiLCJjbGFzcyIsIm5vdHhtbCIsInByb3BIb29rcyIsImhhc0F0dHJpYnV0ZSIsImdldHRlciIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicmZvY3VzTW9ycGgiLCJydHlwZW5hbWVzcGFjZSIsImdsb2JhbCIsInR5cGVzIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJuYW1lc3BhY2VfcmUiLCJub0J1YmJsZSIsInBhcmVudFdpbmRvdyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfZGVmYXVsdCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb3VzZUhvb2tzIiwiZXZlbnREb2MiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJsb2FkIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJnZXRQcmV2ZW50RGVmYXVsdCIsInRpbWVTdGFtcCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJhdHRhY2hlcyIsIm9uIiwib3JpZ0ZuIiwidHJpZ2dlckhhbmRsZXIiLCJycGFyZW50c3ByZXYiLCJybmVlZHNDb250ZXh0IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwidGFyZ2V0cyIsImlzIiwiY2xvc2VzdCIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsInVudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwicmV2ZXJzZSIsInRydW5jYXRlIiwibiIsInJ4aHRtbFRhZyIsInJ0YWdOYW1lIiwicmh0bWwiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJzY3JpcHRUeXBlIiwicmNsZWFuU2NyaXB0Iiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiYXBwZW5kIiwiY3JlYXRlVGV4dE5vZGUiLCJkb21NYW5pcCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwiaHRtbCIsInJlcGxhY2VXaXRoIiwiYWxsb3dJbnRlcnNlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwic2VsZWN0aW9uIiwid3JhcCIsIm5vZGVzIiwidXJsIiwiYWpheCIsImFzeW5jIiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwicmRpc3BsYXlzd2FwIiwicm1hcmdpbiIsInJyZWxOdW0iLCJCT0RZIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNvbXB1dGVkIiwiY3NzTnVtYmVyIiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJjc3NQcm9wcyIsImZsb2F0IiwiX2NvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJ2aXNpYmxlIiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJyMjAiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInNlcmlhbGl6ZSIsInBhcmFtIiwic2VyaWFsaXplQXJyYXkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImFqYXhMb2NQYXJ0cyIsImFqYXhMb2NhdGlvbiIsImFqYXhfbm9uY2UiLCJhamF4X3JxdWVyeSIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJydXJsIiwiX2xvYWQiLCJwcmVmaWx0ZXJzIiwiYWxsVHlwZXMiLCJwYXJhbXMiLCJyZXNwb25zZVRleHQiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCIqIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1cHBvcnRlZCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhocklkIiwieGhyQ2FsbGJhY2tzIiwiQWN0aXZlWE9iamVjdCIsImNvcnMiLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJ0aW1lcklkIiwicmZ4bnVtIiwicnJ1biIsInVuaXQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwiZWFzZWQiLCJzdGVwIiwiY3NzRm4iLCJzcGVlZCIsImFuaW1hdGUiLCJmYWRlVG8iLCJ0byIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsIndpbiIsImJveCIsImxlZnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwic2l6ZSIsImFuZFNlbGYiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lIiwiYW1kIiwidG1wbCIsInN0ciIsIkZ1bmN0aW9uIiwiZ2V0SFRNTCIsInJlbmRlciIsImJpbyIsImdldEJpbyIsInZpZXciLCJjb250YWN0VHlwZXMiLCJjb250YWN0cyIsImNvbnRhY3RzSFRNTCIsInJlZHVjZSIsInNraWxscyIsInNraWxsc0hUTUwiLCJza2lsbCIsIm1hcFZpZXciLCJiaW9WaWV3IiwiY29udGFjdHNWaWV3Iiwic2tpbGxzVmlldyIsInJvbGUiLCJiaW9waWMiLCJ3ZWxjb21lTWVzc2FnZSIsIndvcmtWaWV3IiwidGVtcGxhdGUiLCJ3b3JrT2JqIiwiZ2V0V29yayIsInByb2plY3RzVmlldyIsInByb2plY3RzT2JqIiwiZ2V0UHJvamVjdHMiLCJlZHVjYXRpb25WaWV3Iiwic2Nob29sc1RlbXBsYXRlIiwib25saW5lQ291cnNlc1RlbXBsYXRlIiwiZWR1Y2F0aW9uIiwiZ2V0RWR1Y2F0aW9uIiwibGV0c0Nvbm5lY3RWaWV3Iiwid29yayIsInByb2plY3RzIiwibGV0c0Nvbm5lY3QiXSwibWFwcGluZ3MiOiJBQUFBLFFBQUFBLFFBQUFDLE1BQ0EsSUFBQUEsS0FDQSxNQUFBLEVBRUEsSUFBQUMsU0FBQUQsS0FBQUUsUUFBQSxXQUFBLFNBQUFDLE1BQUFDLElBQUEsTUFBQSxJQUFBQSxHQUFBQyxlQUNBLE9BQUFKLFNBUUEsUUFBQUssV0FBQUMsRUFBQUMsR0FDQUMsZUFBQUMsTUFFQUgsRUFBQUEsRUFDQUMsRUFBQUEsSUFHQUcsUUFBQUMsSUFBQSxlQUFBTCxFQUFBLGlCQUFBQyxHQWVBLFFBQUFLLGlCQW1CQSxRQUFBQyxnQkFBQUMsTUFJQSxRQUFBQyxlQUFBRCxNQUVBLEdBQUFFLEtBQ0EsS0FBQSxHQUFBQyxLQUFBSCxNQUNBQSxL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LFNBQUFGLFNBQ0FqQixNQUFBaUIsUUFDQW1sQyxLQUFBamxDLFFBRUFnbEMsT0FBQSxXQUNBLE1BQUFubUMsT0FBQWttQyxLQUVBb0IsUUFBQSxXQUNBLE1BQUF0bkMsT0FBQWdvQyxNQUVBUCxZQUFBLFdBQ0EsTUFBQXpuQyxPQUFBaW9DLFVBRUFILGFBQUEsV0FDQSxNQUFBOW5DLE9BQUE2bkMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5OYW1lKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgbmV3TmFtZSA9IG5hbWUucmVwbGFjZSgvXFxzKyguKykvZywgZnVuY3Rpb24obWF0Y2gsIHAxKSB7IHJldHVybiAnICcgKyBwMS50b1VwcGVyQ2FzZSgpOyB9KTtcbiAgICByZXR1cm4gbmV3TmFtZTtcbn1cblxuLypcblRoZSBuZXh0IGZldyBsaW5lcyBhYm91dCBjbGlja3MgYXJlIGZvciB0aGUgQ29sbGVjdGluZyBDbGljayBMb2NhdGlvbnMgcXVpeiBpbiBMZXNzb24gMi5cbiovXG5jbGlja0xvY2F0aW9ucyA9IFtdO1xuXG5mdW5jdGlvbiBsb2dDbGlja3MoeCx5KSB7XG4gIGNsaWNrTG9jYXRpb25zLnB1c2goXG4gICAge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9XG4gICk7XG4gIGNvbnNvbGUubG9nKCd4IGxvY2F0aW9uOiAnICsgeCArICc7IHkgbG9jYXRpb246ICcgKyB5KTtcbn1cblxuXG4vKlxuVGhpcyBpcyB0aGUgZnVuIHBhcnQuIEhlcmUncyB3aGVyZSB3ZSBnZW5lcmF0ZSB0aGUgY3VzdG9tIEdvb2dsZSBNYXAgZm9yIHRoZSB3ZWJzaXRlLlxuU2VlIHRoZSBkb2N1bWVudGF0aW9uIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG5odHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vamF2YXNjcmlwdC9yZWZlcmVuY2VcbiovXG52YXIgbWFwOyAgICAvLyBkZWNsYXJlcyBhIGdsb2JhbCBtYXAgdmFyaWFibGVcblxuXG4vKlxuU3RhcnQgaGVyZSEgaW5pdGlhbGl6ZU1hcCgpIGlzIGNhbGxlZCB3aGVuIHBhZ2UgaXMgbG9hZGVkLlxuKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVNYXAoKSB7XG5cbiAgdmFyIGxvY2F0aW9ucztcblxuICB2YXIgbWFwT3B0aW9ucyA9IHtcbiAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlXG4gIH07XG5cbiAgLyogXG4gIEZvciB0aGUgbWFwIHRvIGJlIGRpc3BsYXllZCwgdGhlIGdvb2dsZU1hcCB2YXIgbXVzdCBiZVxuICBhcHBlbmRlZCB0byAjbWFwRGl2IGluIHJlc3VtZUJ1aWxkZXIuanMuIFxuICAqL1xuICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXAnKSwgbWFwT3B0aW9ucyk7XG5cblxuICAvKlxuICBsb2NhdGlvbkZpbmRlcigpIHJldHVybnMgYW4gYXJyYXkgb2YgZXZlcnkgbG9jYXRpb24gc3RyaW5nIGZyb20gdGhlIEpTT05zXG4gIHdyaXR0ZW4gZm9yIGJpbywgZWR1Y2F0aW9uLCBhbmQgd29yay5cbiAgKi9cbiAgZnVuY3Rpb24gbG9jYXRpb25GaW5kZXIoZGF0YSkge1xuXG4gICAgLy8gaW5pdGlhbGl6ZXMgYW4gZW1wdHkgYXJyYXlcbiAgICB2YXIgbG9jYXRpb25zID0gW107XG4gICAgZnVuY3Rpb24gZmluZExvY2F0aW9ucyhkYXRhKSB7XG4gICAgICAgIC8vIGdvIG92ZXIgZGF0YVxuICAgICAgICB2YXIgaXRlbTtcbiAgICAgICAgZm9yICh2YXIgayBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGZvdW5kIGxvY2F0aW9uIC0gYWRkIGl0XG4gICAgICAgICAgICAgICAgaXRlbSA9IGRhdGFba107XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyAmJiBrID09PSAnbG9jYXRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9ucy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZmluZExvY2F0aW9ucyhpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kTG9jYXRpb25zKGRhdGEpO1xuXG4gICAgcmV0dXJuIGxvY2F0aW9ucztcbiAgfVxuXG4gIC8qXG4gIGNyZWF0ZU1hcE1hcmtlcihwbGFjZURhdGEpIHJlYWRzIEdvb2dsZSBQbGFjZXMgc2VhcmNoIHJlc3VsdHMgdG8gY3JlYXRlIG1hcCBwaW5zLlxuICBwbGFjZURhdGEgaXMgdGhlIG9iamVjdCByZXR1cm5lZCBmcm9tIHNlYXJjaCByZXN1bHRzIGNvbnRhaW5pbmcgaW5mb3JtYXRpb25cbiAgYWJvdXQgYSBzaW5nbGUgbG9jYXRpb24uXG4gICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1hcE1hcmtlcihwbGFjZURhdGEpIHtcblxuICAgIC8vIFRoZSBuZXh0IGxpbmVzIHNhdmUgbG9jYXRpb24gZGF0YSBmcm9tIHRoZSBzZWFyY2ggcmVzdWx0IG9iamVjdCB0byBsb2NhbCB2YXJpYWJsZXNcbiAgICB2YXIgbGF0ID0gcGxhY2VEYXRhLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpOyAgLy8gbGF0aXR1ZGUgZnJvbSB0aGUgcGxhY2Ugc2VydmljZVxuICAgIHZhciBsb24gPSBwbGFjZURhdGEuZ2VvbWV0cnkubG9jYXRpb24ubG5nKCk7ICAvLyBsb25naXR1ZGUgZnJvbSB0aGUgcGxhY2Ugc2VydmljZVxuICAgIHZhciBuYW1lID0gcGxhY2VEYXRhLmZvcm1hdHRlZF9hZGRyZXNzOyAgIC8vIG5hbWUgb2YgdGhlIHBsYWNlIGZyb20gdGhlIHBsYWNlIHNlcnZpY2VcbiAgICB2YXIgYm91bmRzID0gd2luZG93Lm1hcEJvdW5kczsgICAgICAgICAgICAvLyBjdXJyZW50IGJvdW5kYXJpZXMgb2YgdGhlIG1hcCB3aW5kb3dcblxuICAgIC8vIG1hcmtlciBpcyBhbiBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGRhdGEgYWJvdXQgdGhlIHBpbiBmb3IgYSBzaW5nbGUgbG9jYXRpb25cbiAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICBtYXA6IG1hcCxcbiAgICAgIHBvc2l0aW9uOiBwbGFjZURhdGEuZ2VvbWV0cnkubG9jYXRpb24sXG4gICAgICB0aXRsZTogbmFtZVxuICAgIH0pO1xuXG4gICAgLy8gaW5mb1dpbmRvd3MgYXJlIHRoZSBsaXR0bGUgaGVscGVyIHdpbmRvd3MgdGhhdCBvcGVuIHdoZW4geW91IGNsaWNrXG4gICAgLy8gb3IgaG92ZXIgb3ZlciBhIHBpbiBvbiBhIG1hcC4gVGhleSB1c3VhbGx5IGNvbnRhaW4gbW9yZSBpbmZvcm1hdGlvblxuICAgIC8vIGFib3V0IGEgbG9jYXRpb24uXG4gICAgdmFyIGluZm9XaW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICBjb250ZW50OiBuYW1lXG4gICAgfSk7XG5cbiAgICAvLyBobW1tbSwgSSB3b25kZXIgd2hhdCB0aGlzIGlzIGFib3V0Li4uXG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgICB9KTtcblxuICAgIC8vIHRoaXMgaXMgd2hlcmUgdGhlIHBpbiBhY3R1YWxseSBnZXRzIGFkZGVkIHRvIHRoZSBtYXAuXG4gICAgLy8gYm91bmRzLmV4dGVuZCgpIHRha2VzIGluIGEgbWFwIGxvY2F0aW9uIG9iamVjdFxuICAgIGJvdW5kcy5leHRlbmQobmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsYXQsIGxvbikpO1xuICAgIC8vIGZpdCB0aGUgbWFwIHRvIHRoZSBuZXcgbWFya2VyXG4gICAgbWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuICAgIC8vIGNlbnRlciB0aGUgbWFwXG4gICAgbWFwLnNldENlbnRlcihib3VuZHMuZ2V0Q2VudGVyKCkpO1xuICB9XG5cbiAgLypcbiAgY2FsbGJhY2socmVzdWx0cywgc3RhdHVzKSBtYWtlcyBzdXJlIHRoZSBzZWFyY2ggcmV0dXJuZWQgcmVzdWx0cyBmb3IgYSBsb2NhdGlvbi5cbiAgSWYgc28sIGl0IGNyZWF0ZXMgYSBuZXcgbWFwIG1hcmtlciBmb3IgdGhhdCBsb2NhdGlvbi5cbiAgKi9cbiAgZnVuY3Rpb24gY2FsbGJhY2socmVzdWx0cywgc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VzU2VydmljZVN0YXR1cy5PSykge1xuICAgICAgY3JlYXRlTWFwTWFya2VyKHJlc3VsdHNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gIHBpblBvc3Rlcihsb2NhdGlvbnMpIHRha2VzIGluIHRoZSBhcnJheSBvZiBsb2NhdGlvbnMgY3JlYXRlZCBieSBsb2NhdGlvbkZpbmRlcigpXG4gIGFuZCBmaXJlcyBvZmYgR29vZ2xlIHBsYWNlIHNlYXJjaGVzIGZvciBlYWNoIGxvY2F0aW9uXG4gICovXG4gIGZ1bmN0aW9uIHBpblBvc3Rlcihsb2NhdGlvbnMpIHtcblxuICAgIC8vIGNyZWF0ZXMgYSBHb29nbGUgcGxhY2Ugc2VhcmNoIHNlcnZpY2Ugb2JqZWN0LiBQbGFjZXNTZXJ2aWNlIGRvZXMgdGhlIHdvcmsgb2ZcbiAgICAvLyBhY3R1YWxseSBzZWFyY2hpbmcgZm9yIGxvY2F0aW9uIGRhdGEuXG4gICAgdmFyIHNlcnZpY2UgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLlBsYWNlc1NlcnZpY2UobWFwKTtcblxuICAgIC8vIEl0ZXJhdGVzIHRocm91Z2ggdGhlIGFycmF5IG9mIGxvY2F0aW9ucywgY3JlYXRlcyBhIHNlYXJjaCBvYmplY3QgZm9yIGVhY2ggbG9jYXRpb25cbiAgICAgIGxvY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHBsYWNlKXtcbiAgICAgIC8vIHRoZSBzZWFyY2ggcmVxdWVzdCBvYmplY3RcbiAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICBxdWVyeTogcGxhY2VcbiAgICAgIH07XG5cbiAgICAgIC8vIEFjdHVhbGx5IHNlYXJjaGVzIHRoZSBHb29nbGUgTWFwcyBBUEkgZm9yIGxvY2F0aW9uIGRhdGEgYW5kIHJ1bnMgdGhlIGNhbGxiYWNrXG4gICAgICAvLyBmdW5jdGlvbiB3aXRoIHRoZSBzZWFyY2ggcmVzdWx0cyBhZnRlciBlYWNoIHNlYXJjaC5cbiAgICAgIHNlcnZpY2UudGV4dFNlYXJjaChyZXF1ZXN0LCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBTZXRzIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBtYXAgYmFzZWQgb24gcGluIGxvY2F0aW9uc1xuICB3aW5kb3cubWFwQm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuXG4gIC8vIGxvY2F0aW9ucyBpcyBhbiBhcnJheSBvZiBsb2NhdGlvbiBzdHJpbmdzIHJldHVybmVkIGZyb20gbG9jYXRpb25GaW5kZXIoKVxuICBsb2NhdGlvbnMgPSBsb2NhdGlvbkZpbmRlcihtb2RlbCk7XG5cbiAgLy8gcGluUG9zdGVyKGxvY2F0aW9ucykgY3JlYXRlcyBwaW5zIG9uIHRoZSBtYXAgZm9yIGVhY2ggbG9jYXRpb24gaW5cbiAgLy8gdGhlIGxvY2F0aW9ucyBhcnJheVxuICBwaW5Qb3N0ZXIobG9jYXRpb25zKTtcblxufVxuXG5cbmZ1bmN0aW9uIGhpZGVFbXB0eVNlY3Rpb25zKCkge1xuICAgIHZhciAkc2VjdGlvbiwgJGl0ZW0sIHNob3VsZFNob3c7XG5cbiAgICAvLyBmb2xsb3dzIFtpdGVtU2VsZWN0b3IsIGNvbnRhaW5lclNlbGVjdG9yXVxuICAgIHZhciBzZWN0aW9ucyA9IFtcbiAgICAgICAgWycuZmxleC1pdGVtJywgJyN0b3BDb250YWN0cywgI2xldHMtY29ubmVjdCddLFxuICAgICAgICBbJ2gxJywgJyNoZWFkZXInXSxcbiAgICAgICAgWycud29yay1lbnRyeScsICcjd29ya0V4cGVyaWVuY2UnXSxcbiAgICAgICAgWycucHJvamVjdC1lbnRyeScsICcjcHJvamVjdHMnXSxcbiAgICAgICAgWycuZWR1Y2F0aW9uLWVudHJ5JywgJyNlZHVjYXRpb24nXSxcbiAgICAgICAgWycjbWFwJywgJyNtYXBEaXYnXVxuICAgIF07XG5cbiAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgJGl0ZW0gPSAkKHNlY3Rpb25bMF0pO1xuICAgICAgICAkc2VjdGlvbiA9ICQoc2VjdGlvblsxXSk7XG4gICAgICAgIHNob3VsZFNob3cgPSAkaXRlbS5sZW5ndGggPiAwO1xuICAgICAgICAkc2VjdGlvbi50b2dnbGUoc2hvdWxkU2hvdyk7XG4gICAgfSk7XG59XG4iLCJmdW5jdGlvbiBDb250YWN0c1ZpZXcgKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xufVxuQ29udGFjdHNWaWV3LnByb3RvdHlwZS5nZXRIVE1MID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHtcbiAgICB2YXIgaHRtbCA9ICc8bGkgY2xhc3M9XCJmbGV4LWl0ZW1cIj48c3BhbiBjbGFzcz1cIm9yYW5nZS10ZXh0XCI+e3t0eXBlfX08L3NwYW4+PHNwYW4gY2xhc3M9XCJ3aGl0ZS10ZXh0XCI+e3t2YWx1ZX19PC9zcGFuPjwvbGk+JztcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKCd7e3R5cGV9fScsIHR5cGUpLnJlcGxhY2UoJ3t7dmFsdWV9fScsIHZhbHVlKTtcbn07XG5Db250YWN0c1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiaW8gPSBvY3RvcHVzLmdldEJpbygpO1xuICAgIHZhciB2aWV3ID0gdGhpcztcbiAgICB2YXIgY29udGFjdFR5cGVzID0gT2JqZWN0LmtleXMoYmlvLmNvbnRhY3RzKTtcbiAgICB2YXIgY29udGFjdHNIVE1MID0gY29udGFjdFR5cGVzLnJlZHVjZShmdW5jdGlvbihodG1sLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiBodG1sICsgdmlldy5nZXRIVE1MKHR5cGUsIGJpby5jb250YWN0c1t0eXBlXSk7XG4gICAgfSwgJycpO1xuICAgIHRoaXMuJGVsZW1lbnQuaHRtbChjb250YWN0c0hUTUwpO1xufTtcbiIsImZ1bmN0aW9uIFNraWxsc1ZpZXcgKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xufVxuU2tpbGxzVmlldy5wcm90b3R5cGUuZ2V0SFRNTCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGh0bWwgPSAnPGxpIGNsYXNzPVwiZmxleC1pdGVtXCI+PHNwYW4gY2xhc3M9XCJ3aGl0ZS10ZXh0XCI+e3t2YWx1ZX19PC9zcGFuPjwvbGk+JztcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKCd7e3ZhbHVlfX0nLCB2YWx1ZSk7XG59O1xuU2tpbGxzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNraWxscyA9IG9jdG9wdXMuZ2V0QmlvKCkuc2tpbGxzO1xuICAgIHZhciB2aWV3ID0gdGhpcztcbiAgICB2YXIgc2tpbGxzSFRNTCA9IHNraWxscy5yZWR1Y2UoZnVuY3Rpb24oaHRtbCwgc2tpbGwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgKyB2aWV3LmdldEhUTUwoc2tpbGwpO1xuICAgIH0sICcnKTtcbiAgICB0aGlzLiRlbGVtZW50Lmh0bWwoc2tpbGxzSFRNTCk7XG59O1xuIiwiLypcbiogIFRPRE9cbiogIG5hbWVzcGFjZVxuKiAgYnVuZGxlIC0gV2VicGFja1xuKiAgbWluaWZ5XG4qICBFUzIwMTVcbiogIHRyYW5zbGF0aW9ucyBzdXBwb3J0XG4qICBSZWFjdFxuKiAgUmVkdXhcbiogIGV4cHJlc3MgLSBoZXJva3UgZGVwbG95XG4qICBEQiAtIG1vbmdvZGIgLyByZWRpc1xuKiAgcmVwbGFjZSBqUXVlcnkgd2l0aCBhIGxpZ2h0ZXIgbGlicmFyeSBlLmcgemVwdG8sIGRvbVxuKi9cblxudmFyIG1vZGVsID0gbnVsbDtcblxudmFyIHZpZXcgPSB7XG4gICAgYmlvOiBiaW9WaWV3LFxuICAgIHdvcms6IHdvcmtWaWV3LFxuICAgIHByb2plY3RzOiBwcm9qZWN0c1ZpZXcsXG4gICAgZWR1Y2F0aW9uOiBlZHVjYXRpb25WaWV3LFxuICAgIG1hcDogbWFwVmlldyxcbiAgICBsZXRzQ29ubmVjdDogbGV0c0Nvbm5lY3RWaWV3LFxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmJpby5pbml0KCk7XG4gICAgICAgIHRoaXMud29yay5pbml0KCk7XG4gICAgICAgIHRoaXMucHJvamVjdHMuaW5pdCgpO1xuICAgICAgICB0aGlzLmVkdWNhdGlvbi5pbml0KCk7XG4gICAgICAgIHRoaXMubWFwLmluaXQoKTtcbiAgICAgICAgdGhpcy5sZXRzQ29ubmVjdC5pbml0KCk7XG4gICAgfVxufTtcblxudmFyIG9jdG9wdXMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oYXBwRGF0YSkge1xuICAgICAgICBtb2RlbCA9IGFwcERhdGE7XG4gICAgICAgIHZpZXcuaW5pdCgpO1xuICAgIH0sXG4gICAgZ2V0QmlvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmJpbztcbiAgICB9LFxuICAgIGdldFdvcms6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbW9kZWwud29yaztcbiAgICB9LFxuICAgIGdldFByb2plY3RzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLnByb2plY3RzO1xuICAgIH0sXG4gICAgZ2V0RWR1Y2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmVkdWNhdGlvbjtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICAgICAkLmdldEpTT04oJy4vZGF0YS5qc29uJykuZG9uZShmdW5jdGlvbiBpbml0aWFsaXplKGFwcERhdGEpIHtcbiAgICAgICAgIG9jdG9wdXMuaW5pdChhcHBEYXRhKTtcbiAgICAgICAgIGhpZGVFbXB0eVNlY3Rpb25zKCk7XG5cbiAgICAgICAgIC8vIENhbGxzIHRoZSBpbml0aWFsaXplTWFwKCkgZnVuY3Rpb24gd2hlbiB0aGUgcGFnZSBsb2Fkc1xuICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICBpbml0aWFsaXplTWFwKCk7XG4gICAgICAgICAgICAgLy8gVmFuaWxsYSBKUyB3YXkgdG8gbGlzdGVuIGZvciByZXNpemluZyBvZiB0aGUgd2luZG93XG4gICAgICAgICAgICAgLy8gYW5kIGFkanVzdCBtYXAgYm91bmRzXG4gICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBtYXAgYm91bmRzIGdldCB1cGRhdGVkIG9uIHBhZ2UgcmVzaXplXG4gICAgICAgICAgICAgICAgIG1hcC5maXRCb3VuZHMobWFwQm91bmRzKTtcbiAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgIC8vIGxvZ3MgY2xpY2tzIG9uIHBhZ2VcbiAgICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgIGxvZ0NsaWNrcyhldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xuICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdtYWluIEVycm9yOicsIGUpO1xuICAgICAgICAgfVxuICAgICB9KTtcbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4wLjNcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDEzLTA3LTAzVDEzOjMwWlxuICovXG4oZnVuY3Rpb24oIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG4vLyBDYW4ndCBkbyB0aGlzIGJlY2F1c2Ugc2V2ZXJhbCBhcHBzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vL1widXNlIHN0cmljdFwiO1xudmFyXG4gIC8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxuICByb290alF1ZXJ5LFxuXG4gIC8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxuICByZWFkeUxpc3QsXG5cbiAgLy8gU3VwcG9ydDogSUU5XG4gIC8vIEZvciBgdHlwZW9mIHhtbE5vZGUubWV0aG9kYCBpbnN0ZWFkIG9mIGB4bWxOb2RlLm1ldGhvZCAhPT0gdW5kZWZpbmVkYFxuICBjb3JlX3N0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQsXG5cbiAgLy8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG4gIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cbiAgLy8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gIF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG4gIC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gIF8kID0gd2luZG93LiQsXG5cbiAgLy8gW1tDbGFzc11dIC0+IHR5cGUgcGFpcnNcbiAgY2xhc3MydHlwZSA9IHt9LFxuXG4gIC8vIExpc3Qgb2YgZGVsZXRlZCBkYXRhIGNhY2hlIGlkcywgc28gd2UgY2FuIHJldXNlIHRoZW1cbiAgY29yZV9kZWxldGVkSWRzID0gW10sXG5cbiAgY29yZV92ZXJzaW9uID0gXCIyLjAuM1wiLFxuXG4gIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gc29tZSBjb3JlIG1ldGhvZHNcbiAgY29yZV9jb25jYXQgPSBjb3JlX2RlbGV0ZWRJZHMuY29uY2F0LFxuICBjb3JlX3B1c2ggPSBjb3JlX2RlbGV0ZWRJZHMucHVzaCxcbiAgY29yZV9zbGljZSA9IGNvcmVfZGVsZXRlZElkcy5zbGljZSxcbiAgY29yZV9pbmRleE9mID0gY29yZV9kZWxldGVkSWRzLmluZGV4T2YsXG4gIGNvcmVfdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nLFxuICBjb3JlX2hhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHksXG4gIGNvcmVfdHJpbSA9IGNvcmVfdmVyc2lvbi50cmltLFxuXG4gIC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG4gIGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcbiAgICAvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcbiAgICByZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCwgcm9vdGpRdWVyeSApO1xuICB9LFxuXG4gIC8vIFVzZWQgZm9yIG1hdGNoaW5nIG51bWJlcnNcbiAgY29yZV9wbnVtID0gL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLFxuXG4gIC8vIFVzZWQgZm9yIHNwbGl0dGluZyBvbiB3aGl0ZXNwYWNlXG4gIGNvcmVfcm5vdHdoaXRlID0gL1xcUysvZyxcblxuICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG4gIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuICBycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cbiAgLy8gTWF0Y2ggYSBzdGFuZGFsb25lIHRhZ1xuICByc2luZ2xlVGFnID0gL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvLFxuXG4gIC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuICBybXNQcmVmaXggPSAvXi1tcy0vLFxuICByZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG4gIC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbiAgZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcbiAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gIH0sXG5cbiAgLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAgY29tcGxldGVkID0gZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcbiAgICBqUXVlcnkucmVhZHkoKTtcbiAgfTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcbiAgLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuICBqcXVlcnk6IGNvcmVfdmVyc2lvbixcblxuICBjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuICBpbml0OiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3RqUXVlcnkgKSB7XG4gICAgdmFyIG1hdGNoLCBlbGVtO1xuXG4gICAgLy8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG4gICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG4gICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICBpZiAoIHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gXCI8XCIgJiYgc2VsZWN0b3IuY2hhckF0KCBzZWxlY3Rvci5sZW5ndGggLSAxICkgPT09IFwiPlwiICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuICAgICAgICAvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuICAgICAgICBtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcbiAgICAgIGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHtcblxuICAgICAgICAvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcbiAgICAgICAgaWYgKCBtYXRjaFsxXSApIHtcbiAgICAgICAgICBjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xuXG4gICAgICAgICAgLy8gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuICAgICAgICAgIGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcbiAgICAgICAgICAgIG1hdGNoWzFdLFxuICAgICAgICAgICAgY29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApICk7XG5cbiAgICAgICAgICAvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG4gICAgICAgICAgaWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcbiAgICAgICAgICAgIGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG4gICAgICAgICAgICAgIC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuICAgICAgICAgICAgICAgIHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuICAgICAgICAgICAgICAvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgLy8gSEFORExFOiAkKCNpZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7XG5cbiAgICAgICAgICAvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuICAgICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcbiAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3RcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgICAgICAgIHRoaXNbMF0gPSBlbGVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuICAgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuICAgICAgfSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG4gICAgICAgIHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XG5cbiAgICAgIC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuICAgICAgLy8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG4gICAgICB9XG5cbiAgICAvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcbiAgICB9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgLy8gSEFORExFOiAkKGZ1bmN0aW9uKVxuICAgIC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuICAgIH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuICAgICAgcmV0dXJuIHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICk7XG4gICAgfVxuXG4gICAgaWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuICAgICAgdGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcbiAgfSxcblxuICAvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXG4gIHNlbGVjdG9yOiBcIlwiLFxuXG4gIC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuICBsZW5ndGg6IDAsXG5cbiAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcmVfc2xpY2UuY2FsbCggdGhpcyApO1xuICB9LFxuXG4gIC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1JcbiAgLy8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcbiAgZ2V0OiBmdW5jdGlvbiggbnVtICkge1xuICAgIHJldHVybiBudW0gPT0gbnVsbCA/XG5cbiAgICAgIC8vIFJldHVybiBhICdjbGVhbicgYXJyYXlcbiAgICAgIHRoaXMudG9BcnJheSgpIDpcblxuICAgICAgLy8gUmV0dXJuIGp1c3QgdGhlIG9iamVjdFxuICAgICAgKCBudW0gPCAwID8gdGhpc1sgdGhpcy5sZW5ndGggKyBudW0gXSA6IHRoaXNbIG51bSBdICk7XG4gIH0sXG5cbiAgLy8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuICAvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcbiAgcHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cbiAgICAvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuICAgIHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuICAgIC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG4gICAgcmV0LnByZXZPYmplY3QgPSB0aGlzO1xuICAgIHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgLy8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG4gIC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG4gIC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LilcbiAgZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuICAgIHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcbiAgfSxcblxuICByZWFkeTogZnVuY3Rpb24oIGZuICkge1xuICAgIC8vIEFkZCB0aGUgY2FsbGJhY2tcbiAgICBqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBzbGljZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBjb3JlX3NsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuICB9LFxuXG4gIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lcSggMCApO1xuICB9LFxuXG4gIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVxKCAtMSApO1xuICB9LFxuXG4gIGVxOiBmdW5jdGlvbiggaSApIHtcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG4gICAgICBqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbal0gXSA6IFtdICk7XG4gIH0sXG5cbiAgbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcbiAgICB9KSk7XG4gIH0sXG5cbiAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IobnVsbCk7XG4gIH0sXG5cbiAgLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cbiAgcHVzaDogY29yZV9wdXNoLFxuICBzb3J0OiBbXS5zb3J0LFxuICBzcGxpY2U6IFtdLnNwbGljZVxufTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxualF1ZXJ5LmZuLmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgIGkgPSAxLFxuICAgIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgZGVlcCA9IGZhbHNlO1xuXG4gIC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cbiAgaWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcbiAgICBkZWVwID0gdGFyZ2V0O1xuICAgIHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICAvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG4gICAgaSA9IDI7XG4gIH1cblxuICAvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcbiAgaWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbih0YXJnZXQpICkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG5cbiAgLy8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG4gIGlmICggbGVuZ3RoID09PSBpICkge1xuICAgIHRhcmdldCA9IHRoaXM7XG4gICAgLS1pO1xuICB9XG5cbiAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuICAgIGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHtcbiAgICAgIC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3RcbiAgICAgIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcbiAgICAgICAgc3JjID0gdGFyZ2V0WyBuYW1lIF07XG4gICAgICAgIGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cbiAgICAgICAgLy8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuICAgICAgICBpZiAoIHRhcmdldCA9PT0gY29weSApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuICAgICAgICBpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KGNvcHkpKSApICkge1xuICAgICAgICAgIGlmICggY29weUlzQXJyYXkgKSB7XG4gICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cbiAgICAgICAgICB0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cbiAgICAgICAgLy8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuICAgICAgICB9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoe1xuICAvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2VcbiAgZXhwYW5kbzogXCJqUXVlcnlcIiArICggY29yZV92ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG4gIG5vQ29uZmxpY3Q6IGZ1bmN0aW9uKCBkZWVwICkge1xuICAgIGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcbiAgICAgIHdpbmRvdy4kID0gXyQ7XG4gICAgfVxuXG4gICAgaWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcbiAgICAgIHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuICAgIH1cblxuICAgIHJldHVybiBqUXVlcnk7XG4gIH0sXG5cbiAgLy8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cbiAgaXNSZWFkeTogZmFsc2UsXG5cbiAgLy8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuICAvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuICByZWFkeVdhaXQ6IDEsXG5cbiAgLy8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG4gIGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG4gICAgaWYgKCBob2xkICkge1xuICAgICAgalF1ZXJ5LnJlYWR5V2FpdCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBqUXVlcnkucmVhZHkoIHRydWUgKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuICByZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cbiAgICAvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG4gICAgaWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG4gICAgalF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG4gICAgLy8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcbiAgICBpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG4gICAgcmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG4gICAgLy8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG4gICAgaWYgKCBqUXVlcnkuZm4udHJpZ2dlciApIHtcbiAgICAgIGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VyKFwicmVhZHlcIikub2ZmKFwicmVhZHlcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uXG4gIC8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnRcbiAgLy8gYXJlbid0IHN1cHBvcnRlZC4gVGhleSByZXR1cm4gZmFsc2Ugb24gSUUgKCMyOTY4KS5cbiAgaXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcbiAgICByZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuICB9LFxuXG4gIGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cbiAgaXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcbiAgfSxcblxuICBpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgcmV0dXJuICFpc05hTiggcGFyc2VGbG9hdChvYmopICkgJiYgaXNGaW5pdGUoIG9iaiApO1xuICB9LFxuXG4gIHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgaWYgKCBvYmogPT0gbnVsbCApIHtcbiAgICAgIHJldHVybiBTdHJpbmcoIG9iaiApO1xuICAgIH1cbiAgICAvLyBTdXBwb3J0OiBTYWZhcmkgPD0gNS4xIChmdW5jdGlvbmlzaCBSZWdFeHApXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cbiAgICAgIGNsYXNzMnR5cGVbIGNvcmVfdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG4gICAgICB0eXBlb2Ygb2JqO1xuICB9LFxuXG4gIGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgLy8gTm90IHBsYWluIG9iamVjdHM6XG4gICAgLy8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgIC8vIC0gRE9NIG5vZGVzXG4gICAgLy8gLSB3aW5kb3dcbiAgICBpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTdXBwb3J0OiBGaXJlZm94IDwyMFxuICAgIC8vIFRoZSB0cnkvY2F0Y2ggc3VwcHJlc3NlcyBleGNlcHRpb25zIHRocm93biB3aGVuIGF0dGVtcHRpbmcgdG8gYWNjZXNzXG4gICAgLy8gdGhlIFwiY29uc3RydWN0b3JcIiBwcm9wZXJ0eSBvZiBjZXJ0YWluIGhvc3Qgb2JqZWN0cywgaWUuIHx3aW5kb3cubG9jYXRpb258XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODE0NjIyXG4gICAgdHJ5IHtcbiAgICAgIGlmICggb2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgIWNvcmVfaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoICggZSApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgZnVuY3Rpb24gaGFzbid0IHJldHVybmVkIGFscmVhZHksIHdlJ3JlIGNvbmZpZGVudCB0aGF0XG4gICAgLy8gfG9ianwgaXMgYSBwbGFpbiBvYmplY3QsIGNyZWF0ZWQgYnkge30gb3IgY29uc3RydWN0ZWQgd2l0aCBuZXcgT2JqZWN0XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgaXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcbiAgICB2YXIgbmFtZTtcbiAgICBmb3IgKCBuYW1lIGluIG9iaiApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcbiAgfSxcblxuICAvLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuICAvLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4gIC8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbiAgcGFyc2VIVE1MOiBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG4gICAgaWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcbiAgICAgIGtlZXBTY3JpcHRzID0gY29udGV4dDtcbiAgICAgIGNvbnRleHQgPSBmYWxzZTtcbiAgICB9XG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cbiAgICB2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXG4gICAgICBzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG4gICAgLy8gU2luZ2xlIHRhZ1xuICAgIGlmICggcGFyc2VkICkge1xuICAgICAgcmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuICAgIH1cblxuICAgIHBhcnNlZCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG4gICAgaWYgKCBzY3JpcHRzICkge1xuICAgICAgalF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG4gIH0sXG5cbiAgcGFyc2VKU09OOiBKU09OLnBhcnNlLFxuXG4gIC8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbiAgcGFyc2VYTUw6IGZ1bmN0aW9uKCBkYXRhICkge1xuICAgIHZhciB4bWwsIHRtcDtcbiAgICBpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydDogSUU5XG4gICAgdHJ5IHtcbiAgICAgIHRtcCA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgIHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEgLCBcInRleHQveG1sXCIgKTtcbiAgICB9IGNhdGNoICggZSApIHtcbiAgICAgIHhtbCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG4gICAgICBqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuICAgIH1cbiAgICByZXR1cm4geG1sO1xuICB9LFxuXG4gIG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cbiAgLy8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcbiAgZ2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG4gICAgdmFyIHNjcmlwdCxcbiAgICAgICAgaW5kaXJlY3QgPSBldmFsO1xuXG4gICAgY29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cbiAgICBpZiAoIGNvZGUgKSB7XG4gICAgICAvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuICAgICAgLy8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcbiAgICAgIC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG4gICAgICBpZiAoIGNvZGUuaW5kZXhPZihcInVzZSBzdHJpY3RcIikgPT09IDEgKSB7XG4gICAgICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIHNjcmlwdC50ZXh0ID0gY29kZTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxuICAgICAgLy8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcbiAgICAgICAgaW5kaXJlY3QoIGNvZGUgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuICAvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG4gIGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbiAgfSxcblxuICBub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG4gICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH0sXG5cbiAgLy8gYXJncyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuICBlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjaywgYXJncyApIHtcbiAgICB2YXIgdmFsdWUsXG4gICAgICBpID0gMCxcbiAgICAgIGxlbmd0aCA9IG9iai5sZW5ndGgsXG4gICAgICBpc0FycmF5ID0gaXNBcnJheWxpa2UoIG9iaiApO1xuXG4gICAgaWYgKCBhcmdzICkge1xuICAgICAgaWYgKCBpc0FycmF5ICkge1xuICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG4gICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoIGkgaW4gb2JqICkge1xuICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XG5cbiAgICAgICAgICBpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gQSBzcGVjaWFsLCBmYXN0LCBjYXNlIGZvciB0aGUgbW9zdCBjb21tb24gdXNlIG9mIGVhY2hcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCBpc0FycmF5ICkge1xuICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG4gICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoIGkgaW4gb2JqICkge1xuICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XG5cbiAgICAgICAgICBpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgdHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCIgOiBjb3JlX3RyaW0uY2FsbCggdGV4dCApO1xuICB9LFxuXG4gIC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcbiAgbWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuICAgIHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG4gICAgaWYgKCBhcnIgIT0gbnVsbCApIHtcbiAgICAgIGlmICggaXNBcnJheWxpa2UoIE9iamVjdChhcnIpICkgKSB7XG4gICAgICAgIGpRdWVyeS5tZXJnZSggcmV0LFxuICAgICAgICAgIHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuICAgICAgICAgIFsgYXJyIF0gOiBhcnJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcmVfcHVzaC5jYWxsKCByZXQsIGFyciApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcbiAgICByZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGNvcmVfaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcbiAgfSxcblxuICBtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG4gICAgdmFyIGwgPSBzZWNvbmQubGVuZ3RoLFxuICAgICAgaSA9IGZpcnN0Lmxlbmd0aCxcbiAgICAgIGogPSAwO1xuXG4gICAgaWYgKCB0eXBlb2YgbCA9PT0gXCJudW1iZXJcIiApIHtcbiAgICAgIGZvciAoIDsgaiA8IGw7IGorKyApIHtcbiAgICAgICAgZmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICggc2Vjb25kW2pdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmlyc3QubGVuZ3RoID0gaTtcblxuICAgIHJldHVybiBmaXJzdDtcbiAgfSxcblxuICBncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnYgKSB7XG4gICAgdmFyIHJldFZhbCxcbiAgICAgIHJldCA9IFtdLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG4gICAgaW52ID0gISFpbnY7XG5cbiAgICAvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG4gICAgLy8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cbiAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgIHJldFZhbCA9ICEhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcbiAgICAgIGlmICggaW52ICE9PSByZXRWYWwgKSB7XG4gICAgICAgIHJldC5wdXNoKCBlbGVtc1sgaSBdICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICAvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcbiAgbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG4gICAgdmFyIHZhbHVlLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG4gICAgICBpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG4gICAgICByZXQgPSBbXTtcblxuICAgIC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpclxuICAgIGlmICggaXNBcnJheSApIHtcbiAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuICAgICAgICBpZiAoIHZhbHVlICE9IG51bGwgKSB7XG4gICAgICAgICAgcmV0WyByZXQubGVuZ3RoIF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICggaSBpbiBlbGVtcyApIHtcbiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cbiAgICAgICAgaWYgKCB2YWx1ZSAhPSBudWxsICkge1xuICAgICAgICAgIHJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG4gICAgcmV0dXJuIGNvcmVfY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG4gIH0sXG5cbiAgLy8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG4gIGd1aWQ6IDEsXG5cbiAgLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4gIC8vIGFyZ3VtZW50cy5cbiAgcHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcbiAgICB2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuICAgIGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICB0bXAgPSBmblsgY29udGV4dCBdO1xuICAgICAgY29udGV4dCA9IGZuO1xuICAgICAgZm4gPSB0bXA7XG4gICAgfVxuXG4gICAgLy8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcbiAgICAvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTaW11bGF0ZWQgYmluZFxuICAgIGFyZ3MgPSBjb3JlX3NsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuICAgIHByb3h5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIGNvcmVfc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuICAgIH07XG5cbiAgICAvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcbiAgICBwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuICAgIHJldHVybiBwcm94eTtcbiAgfSxcblxuICAvLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbiAgLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG4gIGFjY2VzczogZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuICAgIHZhciBpID0gMCxcbiAgICAgIGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcbiAgICAgIGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuICAgIC8vIFNldHMgbWFueSB2YWx1ZXNcbiAgICBpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcbiAgICAgIGNoYWluYWJsZSA9IHRydWU7XG4gICAgICBmb3IgKCBpIGluIGtleSApIHtcbiAgICAgICAgalF1ZXJ5LmFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbaV0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcbiAgICAgIH1cblxuICAgIC8vIFNldHMgb25lIHZhbHVlXG4gICAgfSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgIGNoYWluYWJsZSA9IHRydWU7XG5cbiAgICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuICAgICAgICByYXcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIGJ1bGsgKSB7XG4gICAgICAgIC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuICAgICAgICBpZiAoIHJhdyApIHtcbiAgICAgICAgICBmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcbiAgICAgICAgICBmbiA9IG51bGw7XG5cbiAgICAgICAgLy8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1bGsgPSBmbjtcbiAgICAgICAgICBmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIGZuICkge1xuICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICBmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hhaW5hYmxlID9cbiAgICAgIGVsZW1zIDpcblxuICAgICAgLy8gR2V0c1xuICAgICAgYnVsayA/XG4gICAgICAgIGZuLmNhbGwoIGVsZW1zICkgOlxuICAgICAgICBsZW5ndGggPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XG4gIH0sXG5cbiAgbm93OiBEYXRlLm5vdyxcblxuICAvLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICAvLyBOb3RlOiB0aGlzIG1ldGhvZCBiZWxvbmdzIHRvIHRoZSBjc3MgbW9kdWxlIGJ1dCBpdCdzIG5lZWRlZCBoZXJlIGZvciB0aGUgc3VwcG9ydCBtb2R1bGUuXG4gIC8vIElmIHN1cHBvcnQgZ2V0cyBtb2R1bGFyaXplZCwgdGhpcyBtZXRob2Qgc2hvdWxkIGJlIG1vdmVkIGJhY2sgdG8gdGhlIGNzcyBtb2R1bGUuXG4gIHN3YXA6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcbiAgICB2YXIgcmV0LCBuYW1lLFxuICAgICAgb2xkID0ge307XG5cbiAgICAvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcbiAgICBmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG4gICAgICBvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcbiAgICAgIGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcbiAgICB9XG5cbiAgICByZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG4gICAgLy8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG4gICAgZm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuICAgICAgZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxufSk7XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCAhcmVhZHlMaXN0ICkge1xuXG4gICAgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbiAgICAvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbiAgICAvLyB3ZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcbiAgICAvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG4gICAgaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG4gICAgICAvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcbiAgICAgIHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuICAgICAgLy8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgY2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59KTtcblxuZnVuY3Rpb24gaXNBcnJheWxpa2UoIG9iaiApIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGgsXG4gICAgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuICBpZiAoIGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCBvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCB0eXBlICE9PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAoIGxlbmd0aCA9PT0gMCB8fFxuICAgIHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmogKTtcbn1cblxuLy8gQWxsIGpRdWVyeSBvYmplY3RzIHNob3VsZCBwb2ludCBiYWNrIHRvIHRoZXNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KGRvY3VtZW50KTtcbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjEuOS40LXByZVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDEzLTA2LTAzXG4gKi9cbihmdW5jdGlvbiggd2luZG93LCB1bmRlZmluZWQgKSB7XG5cbnZhciBpLFxuICBzdXBwb3J0LFxuICBjYWNoZWRydW5zLFxuICBFeHByLFxuICBnZXRUZXh0LFxuICBpc1hNTCxcbiAgY29tcGlsZSxcbiAgb3V0ZXJtb3N0Q29udGV4dCxcbiAgc29ydElucHV0LFxuXG4gIC8vIExvY2FsIGRvY3VtZW50IHZhcnNcbiAgc2V0RG9jdW1lbnQsXG4gIGRvY3VtZW50LFxuICBkb2NFbGVtLFxuICBkb2N1bWVudElzSFRNTCxcbiAgcmJ1Z2d5UVNBLFxuICByYnVnZ3lNYXRjaGVzLFxuICBtYXRjaGVzLFxuICBjb250YWlucyxcblxuICAvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG4gIGV4cGFuZG8gPSBcInNpenpsZVwiICsgLShuZXcgRGF0ZSgpKSxcbiAgcHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuICBkaXJydW5zID0gMCxcbiAgZG9uZSA9IDAsXG4gIGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICB0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcbiAgY29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG4gIGhhc0R1cGxpY2F0ZSA9IGZhbHNlLFxuICBzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgICBpZiAoIGEgPT09IGIgKSB7XG4gICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuXG4gIC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcbiAgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZCxcbiAgTUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuICAvLyBJbnN0YW5jZSBtZXRob2RzXG4gIGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG4gIGFyciA9IFtdLFxuICBwb3AgPSBhcnIucG9wLFxuICBwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuICBwdXNoID0gYXJyLnB1c2gsXG4gIHNsaWNlID0gYXJyLnNsaWNlLFxuICAvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgaWYgd2UgY2FuJ3QgdXNlIGEgbmF0aXZlIG9uZVxuICBpbmRleE9mID0gYXJyLmluZGV4T2YgfHwgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgbGVuID0gdGhpcy5sZW5ndGg7XG4gICAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICBpZiAoIHRoaXNbaV0gPT09IGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH0sXG5cbiAgYm9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9uc1xuXG4gIC8vIFdoaXRlc3BhY2UgY2hhcmFjdGVycyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuICB3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xuICBjaGFyYWN0ZXJFbmNvZGluZyA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cbiAgLy8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcbiAgLy8gQW4gdW5xdW90ZWQgdmFsdWUgc2hvdWxkIGJlIGEgQ1NTIGlkZW50aWZpZXIgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcbiAgLy8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG4gIGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXG5cbiAgLy8gQWNjZXB0YWJsZSBvcGVyYXRvcnMgaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG4gIGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuICAgIFwiKig/OihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbJ1xcXCJdKSgoPzpcXFxcXFxcXC58W15cXFxcXFxcXF0pKj8pXFxcXDN8KFwiICsgaWRlbnRpZmllciArIFwiKXwpfClcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG4gIC8vIFByZWZlciBhcmd1bWVudHMgcXVvdGVkLFxuICAvLyAgIHRoZW4gbm90IGNvbnRhaW5pbmcgcHNldWRvcy9icmFja2V0cyxcbiAgLy8gICB0aGVuIGF0dHJpYnV0ZSBzZWxlY3RvcnMvbm9uLXBhcmVudGhldGljYWwgZXhwcmVzc2lvbnMsXG4gIC8vICAgdGhlbiBhbnl0aGluZyBlbHNlXG4gIC8vIFRoZXNlIHByZWZlcmVuY2VzIGFyZSBoZXJlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9yc1xuICAvLyAgIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIFBTRVVETyBwcmVGaWx0ZXJcbiAgcHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoKFsnXFxcIl0pKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXSkqPylcXFxcM3woKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzLnJlcGxhY2UoIDMsIDggKSArIFwiKSopfC4qKVxcXFwpfClcIixcblxuICAvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG4gIHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuICByY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcbiAgcmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cbiAgcnNpYmxpbmcgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIqWyt+XVwiICksXG4gIHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuICBycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuICByaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cbiAgbWF0Y2hFeHByID0ge1xuICAgIFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcbiAgICBcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuICAgIFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncqXCIgKSArIFwiKVwiICksXG4gICAgXCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuICAgIFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuICAgIFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG4gICAgICBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuICAgICAgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG4gICAgXCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG4gICAgLy8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG4gICAgLy8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuICAgIFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG4gICAgICB3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcbiAgfSxcblxuICBybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuICAvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcbiAgcnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG4gIHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICByaGVhZGVyID0gL15oXFxkJC9pLFxuXG4gIHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cbiAgLy8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuICBydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuICBmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG4gICAgdmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcbiAgICAvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuICAgIC8vIFN1cHBvcnQ6IEZpcmVmb3hcbiAgICAvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcbiAgICByZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG4gICAgICBlc2NhcGVkIDpcbiAgICAgIC8vIEJNUCBjb2RlcG9pbnRcbiAgICAgIGhpZ2ggPCAwID9cbiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG4gICAgICAgIC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcbiAgfTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG4gIHB1c2guYXBwbHkoXG4gICAgKGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuICAgIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG4gICk7XG4gIC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG4gIC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcbiAgYXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuICBwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cbiAgICAvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuICAgIGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcbiAgICAgIHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuICAgIH0gOlxuXG4gICAgLy8gU3VwcG9ydDogSUU8OVxuICAgIC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcbiAgICBmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG4gICAgICB2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG4gICAgICAgIGkgPSAwO1xuICAgICAgLy8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG4gICAgICB3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG4gICAgICB0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuICB2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLFxuICAgIC8vIFFTQSB2YXJzXG4gICAgaSwgZ3JvdXBzLCBvbGQsIG5pZCwgbmV3Q29udGV4dCwgbmV3U2VsZWN0b3I7XG5cbiAgaWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcbiAgICBzZXREb2N1bWVudCggY29udGV4dCApO1xuICB9XG5cbiAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG4gIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG4gIGlmICggIXNlbGVjdG9yIHx8IHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIGlmICggKG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZSkgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCBkb2N1bWVudElzSFRNTCAmJiAhc2VlZCApIHtcblxuICAgIC8vIFNob3J0Y3V0c1xuICAgIGlmICggKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcbiAgICAgIC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcbiAgICAgIGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG4gICAgICAgIGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG4gICAgICAgICAgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcbiAgICAgICAgICAvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuICAgICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcbiAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcbiAgICAgICAgICAgIC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuICAgICAgICAgICAgaWYgKCBlbGVtLmlkID09PSBtICkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG4gICAgICAgICAgaWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcbiAgICAgICAgICAgIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCggZWxlbSApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcbiAgICAgIH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuXG4gICAgICAvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG4gICAgICB9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBRU0EgcGF0aFxuICAgIGlmICggc3VwcG9ydC5xc2EgJiYgKCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcbiAgICAgIG5pZCA9IG9sZCA9IGV4cGFuZG87XG4gICAgICBuZXdDb250ZXh0ID0gY29udGV4dDtcbiAgICAgIG5ld1NlbGVjdG9yID0gbm9kZVR5cGUgPT09IDkgJiYgc2VsZWN0b3I7XG5cbiAgICAgIC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllc1xuICAgICAgLy8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdFxuICAgICAgLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXG4gICAgICAvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHNcbiAgICAgIGlmICggbm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuICAgICAgICBncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblxuICAgICAgICBpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSApIHtcbiAgICAgICAgICBuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIG5pZCApO1xuICAgICAgICB9XG4gICAgICAgIG5pZCA9IFwiW2lkPSdcIiArIG5pZCArIFwiJ10gXCI7XG5cbiAgICAgICAgaSA9IGdyb3Vwcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgIGdyb3Vwc1tpXSA9IG5pZCArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuICAgICAgICB9XG4gICAgICAgIG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIGNvbnRleHQucGFyZW50Tm9kZSB8fCBjb250ZXh0O1xuICAgICAgICBuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCBuZXdTZWxlY3RvciApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLFxuICAgICAgICAgICAgbmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSBjYXRjaChxc2FFcnJvcikge1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmICggIW9sZCApIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQWxsIG90aGVyc1xuICByZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqICBwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICogIGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG4gIHZhciBrZXlzID0gW107XG5cbiAgZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG4gICAgLy8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1NylcbiAgICBpZiAoIGtleXMucHVzaCgga2V5ICs9IFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuICAgICAgLy8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG4gICAgICBkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuICAgIH1cbiAgICByZXR1cm4gKGNhY2hlWyBrZXkgXSA9IHZhbHVlKTtcbiAgfVxuICByZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG4gIGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICB0cnkge1xuICAgIHJldHVybiAhIWZuKCBkaXYgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcbiAgICBpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuICAgIGRpdiA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcbiAgdmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcbiAgICBpID0gYXR0cnMubGVuZ3RoO1xuXG4gIHdoaWxlICggaS0tICkge1xuICAgIEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG4gIHZhciBjdXIgPSBiICYmIGEsXG4gICAgZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuICAgICAgKCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuICAvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcbiAgaWYgKCBkaWZmICkge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcbiAgaWYgKCBjdXIgKSB7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcbiAgICAgIGlmICggY3VyID09PSBiICkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG4gIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcbiAgcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG4gICAgYXJndW1lbnQgPSArYXJndW1lbnQ7XG4gICAgcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcbiAgICAgIHZhciBqLFxuICAgICAgICBtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuICAgICAgICBpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuICAgICAgLy8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG4gICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgaWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcbiAgICAgICAgICBzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogRGV0ZWN0IHhtbFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuICAvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG4gIHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuICB2YXIgZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jLFxuICAgIHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuICAvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG4gIGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG5cbiAgLy8gU2V0IG91ciBkb2N1bWVudFxuICBkb2N1bWVudCA9IGRvYztcbiAgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLy8gU3VwcG9ydCB0ZXN0c1xuICBkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cbiAgLy8gU3VwcG9ydDogSUU+OFxuICAvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gXCJkb2N1bWVudFwiIHZhcmlhYmxlIGFuZCBpZiBpZnJhbWUgaGFzIGJlZW4gcmVsb2FkZWQsXG4gIC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcbiAgLy8gSUU2LTggZG8gbm90IHN1cHBvcnQgdGhlIGRlZmF1bHRWaWV3IHByb3BlcnR5IHNvIHBhcmVudCB3aWxsIGJlIHVuZGVmaW5lZFxuICBpZiAoIHBhcmVudCAmJiBwYXJlbnQuYXR0YWNoRXZlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuICAgIHBhcmVudC5hdHRhY2hFdmVudCggXCJvbmJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHNldERvY3VtZW50KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiBBdHRyaWJ1dGVzXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvLyBTdXBwb3J0OiBJRTw4XG4gIC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllcyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcbiAgc3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG4gICAgZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuICAgIHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcbiAgfSk7XG5cbiAgLyogZ2V0RWxlbWVudChzKUJ5KlxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLy8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuICBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG4gICAgZGl2LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuICAgIHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG4gIH0pO1xuXG4gIC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlDbGFzc05hbWUgY2FuIGJlIHRydXN0ZWRcbiAgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG4gICAgZGl2LmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz0nYSc+PC9kaXY+PGRpdiBjbGFzcz0nYSBpJz48L2Rpdj5cIjtcblxuICAgIC8vIFN1cHBvcnQ6IFNhZmFyaTw0XG4gICAgLy8gQ2F0Y2ggY2xhc3Mgb3Zlci1jYWNoaW5nXG4gICAgZGl2LmZpcnN0Q2hpbGQuY2xhc3NOYW1lID0gXCJpXCI7XG4gICAgLy8gU3VwcG9ydDogT3BlcmE8MTBcbiAgICAvLyBDYXRjaCBnRUJDTiBmYWlsdXJlIHRvIGZpbmQgbm9uLWxlYWRpbmcgY2xhc3Nlc1xuICAgIHJldHVybiBkaXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImlcIikubGVuZ3RoID09PSAyO1xuICB9KTtcblxuICAvLyBTdXBwb3J0OiBJRTwxMFxuICAvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcbiAgLy8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcbiAgLy8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG4gIHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgIGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcbiAgICByZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuICB9KTtcblxuICAvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcbiAgaWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG4gICAgRXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG4gICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBzdHJ1bmRlZmluZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG4gICAgICAgIHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcbiAgICAgICAgLy8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcbiAgICAgICAgLy8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuICAgICAgICByZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbbV0gOiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG4gICAgICB2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcbiAgICAgIH07XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdXBwb3J0OiBJRTYvN1xuICAgIC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcbiAgICBkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cbiAgICBFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcbiAgICAgIHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICB2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IHN0cnVuZGVmaW5lZCAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgLy8gVGFnXG4gIEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuICAgIGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG4gICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBzdHJ1bmRlZmluZWQgKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcbiAgICAgIH1cbiAgICB9IDpcbiAgICBmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuICAgICAgdmFyIGVsZW0sXG4gICAgICAgIHRtcCA9IFtdLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG4gICAgICAvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG4gICAgICBpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG4gICAgICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICAgICAgICAgIHRtcC5wdXNoKCBlbGVtICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgLy8gQ2xhc3NcbiAgRXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcbiAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiBkb2N1bWVudElzSFRNTCApIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuICAgIH1cbiAgfTtcblxuICAvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cbiAgLy8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcbiAgcmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG4gIC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG4gIC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuICAvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG4gIC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG4gIC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuICByYnVnZ3lRU0EgPSBbXTtcblxuICBpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG4gICAgLy8gQnVpbGQgUVNBIHJlZ2V4XG4gICAgLy8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuICAgIGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgICAgLy8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuICAgICAgLy8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG4gICAgICAvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcbiAgICAgIC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuICAgICAgZGl2LmlubmVySFRNTCA9IFwiPHNlbGVjdD48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG4gICAgICAvLyBTdXBwb3J0OiBJRThcbiAgICAgIC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcbiAgICAgIGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG4gICAgICAgIHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuICAgICAgLy8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcbiAgICAgIGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuICAgICAgICByYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IE9wZXJhIDEwLTEyL0lFOFxuICAgICAgLy8gXj0gJD0gKj0gYW5kIGVtcHR5IHZhbHVlc1xuICAgICAgLy8gU2hvdWxkIG5vdCBzZWxlY3QgYW55dGhpbmdcbiAgICAgIC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuICAgICAgLy8gVGhlIHR5cGUgYXR0cmlidXRlIGlzIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuICAgICAgdmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwidFwiLCBcIlwiICk7XG5cbiAgICAgIGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdF49JyddXCIpLmxlbmd0aCApIHtcbiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcbiAgICAgIH1cblxuICAgICAgLy8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcbiAgICAgIC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG4gICAgICBpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcbiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuICAgICAgfVxuXG4gICAgICAvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuICAgICAgcmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICBkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgIGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgIGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG4gICAgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG4gICAgICAvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3JcbiAgICAgIC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG4gICAgICBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuICAgICAgLy8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuICAgICAgLy8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuICAgICAgbWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcbiAgICAgIHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG4gICAgfSk7XG4gIH1cblxuICByYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuICByYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG4gIC8qIENvbnRhaW5zXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcbiAgLy8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudFxuICAvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuICBjb250YWlucyA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApIHx8IGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gP1xuICAgIGZ1bmN0aW9uKCBhLCBiICkge1xuICAgICAgdmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcbiAgICAgICAgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG4gICAgICByZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcbiAgICAgICAgYWRvd24uY29udGFpbnMgP1xuICAgICAgICAgIGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG4gICAgICAgICAgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG4gICAgICApKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbiggYSwgYiApIHtcbiAgICAgIGlmICggYiApIHtcbiAgICAgICAgd2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG4gICAgICAgICAgaWYgKCBiID09PSBhICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAvKiBTb3J0aW5nXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG4gIHNvcnRPcmRlciA9IGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gP1xuICBmdW5jdGlvbiggYSwgYiApIHtcblxuICAgIC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG4gICAgaWYgKCBhID09PSBiICkge1xuICAgICAgaGFzRHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb21wYXJlID0gYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKTtcblxuICAgIGlmICggY29tcGFyZSApIHtcbiAgICAgIC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuICAgICAgaWYgKCBjb21wYXJlICYgMSB8fFxuICAgICAgICAoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cbiAgICAgICAgLy8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG4gICAgICAgIGlmICggYSA9PT0gZG9jIHx8IGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICggYiA9PT0gZG9jIHx8IGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuICAgICAgICByZXR1cm4gc29ydElucHV0ID9cbiAgICAgICAgICAoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuICAgICAgICAgIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcbiAgICB9XG5cbiAgICAvLyBOb3QgZGlyZWN0bHkgY29tcGFyYWJsZSwgc29ydCBvbiBleGlzdGVuY2Ugb2YgbWV0aG9kXG4gICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyAtMSA6IDE7XG4gIH0gOlxuICBmdW5jdGlvbiggYSwgYiApIHtcbiAgICB2YXIgY3VyLFxuICAgICAgaSA9IDAsXG4gICAgICBhdXAgPSBhLnBhcmVudE5vZGUsXG4gICAgICBidXAgPSBiLnBhcmVudE5vZGUsXG4gICAgICBhcCA9IFsgYSBdLFxuICAgICAgYnAgPSBbIGIgXTtcblxuICAgIC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcbiAgICBpZiAoIGEgPT09IGIgKSB7XG4gICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG5cbiAgICAvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuICAgIH0gZWxzZSBpZiAoICFhdXAgfHwgIWJ1cCApIHtcbiAgICAgIHJldHVybiBhID09PSBkb2MgPyAtMSA6XG4gICAgICAgIGIgPT09IGRvYyA/IDEgOlxuICAgICAgICBhdXAgPyAtMSA6XG4gICAgICAgIGJ1cCA/IDEgOlxuICAgICAgICBzb3J0SW5wdXQgP1xuICAgICAgICAoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuICAgICAgICAwO1xuXG4gICAgLy8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcbiAgICB9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcbiAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuICAgIGN1ciA9IGE7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuICAgICAgYXAudW5zaGlmdCggY3VyICk7XG4gICAgfVxuICAgIGN1ciA9IGI7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuICAgICAgYnAudW5zaGlmdCggY3VyICk7XG4gICAgfVxuXG4gICAgLy8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcbiAgICB3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gaSA/XG4gICAgICAvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3JcbiAgICAgIHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG4gICAgICAvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3RcbiAgICAgIGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG4gICAgICBicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG4gICAgICAwO1xuICB9O1xuXG4gIHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcbiAgcmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcbiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG4gIGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcbiAgICBzZXREb2N1bWVudCggZWxlbSApO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG4gIGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuICBpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG4gICAgKCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuICAgICggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cbiAgICAgIC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcbiAgICAgIGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcbiAgICAgICAgICAvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuICAgICAgICAgIC8vIGZyYWdtZW50IGluIElFIDlcbiAgICAgICAgICBlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge31cbiAgfVxuXG4gIHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG4gIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuICBpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG4gICAgc2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcbiAgfVxuICByZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG4gIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuICBpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG4gICAgc2V0RG9jdW1lbnQoIGVsZW0gKTtcbiAgfVxuXG4gIHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG4gICAgdmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuICAgICAgZm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcbiAgICAgIHVuZGVmaW5lZDtcblxuICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgP1xuICAgIHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG4gICAgICAodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cbiAgICAgICAgdmFsLnZhbHVlIDpcbiAgICAgICAgbnVsbCA6XG4gICAgdmFsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcbiAgdGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG4gIHZhciBlbGVtLFxuICAgIGR1cGxpY2F0ZXMgPSBbXSxcbiAgICBqID0gMCxcbiAgICBpID0gMDtcblxuICAvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG4gIGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG4gIHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuICByZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG4gIGlmICggaGFzRHVwbGljYXRlICkge1xuICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuICAgICAgaWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG4gICAgICAgIGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKCBqLS0gKSB7XG4gICAgICByZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBub2RlLFxuICAgIHJldCA9IFwiXCIsXG4gICAgaSA9IDAsXG4gICAgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG4gIGlmICggIW5vZGVUeXBlICkge1xuICAgIC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG4gICAgZm9yICggOyAobm9kZSA9IGVsZW1baV0pOyBpKysgKSB7XG4gICAgICAvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuICAgICAgcmV0ICs9IGdldFRleHQoIG5vZGUgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcbiAgICAvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG4gICAgLy8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoc2VlICMxMTE1MylcbiAgICBpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuICAgICAgZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG4gICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcbiAgICByZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG4gIH1cbiAgLy8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG4gIC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuICBjYWNoZUxlbmd0aDogNTAsXG5cbiAgY3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cbiAgbWF0Y2g6IG1hdGNoRXhwcixcblxuICBhdHRySGFuZGxlOiB7fSxcblxuICBmaW5kOiB7fSxcblxuICByZWxhdGl2ZToge1xuICAgIFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG4gICAgXCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuICAgIFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcbiAgICBcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuICB9LFxuXG4gIHByZUZpbHRlcjoge1xuICAgIFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG4gICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cbiAgICAgIC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG4gICAgICBtYXRjaFszXSA9ICggbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cbiAgICAgIGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcbiAgICAgICAgbWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuICAgIH0sXG5cbiAgICBcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcbiAgICAgIC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuICAgICAgICAxIHR5cGUgKG9ubHl8bnRofC4uLilcbiAgICAgICAgMiB3aGF0IChjaGlsZHxvZi10eXBlKVxuICAgICAgICAzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuICAgICAgICA0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcbiAgICAgICAgNSBzaWduIG9mIHhuLWNvbXBvbmVudFxuICAgICAgICA2IHggb2YgeG4tY29tcG9uZW50XG4gICAgICAgIDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuICAgICAgICA4IHkgb2YgeS1jb21wb25lbnRcbiAgICAgICovXG4gICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcbiAgICAgICAgLy8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcbiAgICAgICAgaWYgKCAhbWF0Y2hbM10gKSB7XG4gICAgICAgICAgU2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG4gICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcbiAgICAgICAgbWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcbiAgICAgICAgbWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG4gICAgICAvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcbiAgICAgIH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuICAgICAgICBTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9LFxuXG4gICAgXCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuICAgICAgdmFyIGV4Y2VzcyxcbiAgICAgICAgdW5xdW90ZWQgPSAhbWF0Y2hbNV0gJiYgbWF0Y2hbMl07XG5cbiAgICAgIGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG4gICAgICBpZiAoIG1hdGNoWzNdICYmIG1hdGNoWzRdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIG1hdGNoWzJdID0gbWF0Y2hbNF07XG5cbiAgICAgIC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG4gICAgICB9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcbiAgICAgICAgLy8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcbiAgICAgICAgKGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuICAgICAgICAvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcbiAgICAgICAgKGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cbiAgICAgICAgLy8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG4gICAgICAgIG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcbiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuICAgIH1cbiAgfSxcblxuICBmaWx0ZXI6IHtcblxuICAgIFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuICAgICAgICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG4gICAgICB2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cbiAgICAgIHJldHVybiBwYXR0ZXJuIHx8XG4gICAgICAgIChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcbiAgICAgICAgY2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBzdHJ1bmRlZmluZWQgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cbiAgICAgICAgaWYgKCByZXN1bHQgPT0gbnVsbCApIHtcbiAgICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICFvcGVyYXRvciApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBcIlwiO1xuXG4gICAgICAgIHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcbiAgICAgICAgICBvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcbiAgICAgICAgICBvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuICAgICAgICAgIGZhbHNlO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgXCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuICAgICAgdmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcbiAgICAgICAgZm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuICAgICAgICBvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuICAgICAgcmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcbiAgICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgICAgcmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuICAgICAgICB9IDpcblxuICAgICAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuICAgICAgICAgIHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgZGlmZiwgbm9kZUluZGV4LCBzdGFydCxcbiAgICAgICAgICAgIGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlO1xuXG4gICAgICAgICAgaWYgKCBwYXJlbnQgKSB7XG5cbiAgICAgICAgICAgIC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcbiAgICAgICAgICAgIGlmICggc2ltcGxlICkge1xuICAgICAgICAgICAgICB3aGlsZSAoIGRpciApIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZWxlbTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuICAgICAgICAgICAgICAgICAgaWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuICAgICAgICAgICAgLy8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcbiAgICAgICAgICAgIGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcbiAgICAgICAgICAgICAgLy8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG4gICAgICAgICAgICAgIG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAocGFyZW50WyBleHBhbmRvIF0gPSB7fSk7XG4gICAgICAgICAgICAgIGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuICAgICAgICAgICAgICBub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcbiAgICAgICAgICAgICAgZGlmZiA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzJdO1xuICAgICAgICAgICAgICBub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuICAgICAgICAgICAgICB3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG4gICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcbiAgICAgICAgICAgICAgICAoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuICAgICAgICAgICAgICAgIC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuICAgICAgICAgICAgICAgICAgb3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XG4gICAgICAgICAgICAgIGRpZmYgPSBjYWNoZVsxXTtcblxuICAgICAgICAgICAgLy8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuICAgICAgICAgICAgICB3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuICAgICAgICAgICAgICAgIChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XG4gICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICBpZiAoIHVzZUNhY2hlICkge1xuICAgICAgICAgICAgICAgICAgICAobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKCBub2RlID09PSBlbGVtICkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcbiAgICAgICAgICAgIGRpZmYgLT0gbGFzdDtcbiAgICAgICAgICAgIHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgXCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG4gICAgICAvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcbiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcbiAgICAgIC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG4gICAgICAvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG4gICAgICB2YXIgYXJncyxcbiAgICAgICAgZm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuICAgICAgICAgIFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cbiAgICAgIC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcbiAgICAgIC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG4gICAgICAvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG4gICAgICBpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG4gICAgICAgIHJldHVybiBmbiggYXJndW1lbnQgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG4gICAgICBpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG4gICAgICAgIGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuICAgICAgICByZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cbiAgICAgICAgICBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG4gICAgICAgICAgICB2YXIgaWR4LFxuICAgICAgICAgICAgICBtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG4gICAgICAgICAgICAgIGkgPSBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgICAgICBpZHggPSBpbmRleE9mLmNhbGwoIHNlZWQsIG1hdGNoZWRbaV0gKTtcbiAgICAgICAgICAgICAgc2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSA6XG4gICAgICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcbiAgICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICB9LFxuXG4gIHBzZXVkb3M6IHtcbiAgICAvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3NcbiAgICBcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICAgICAgLy8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcbiAgICAgIC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG4gICAgICAvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcbiAgICAgIHZhciBpbnB1dCA9IFtdLFxuICAgICAgICByZXN1bHRzID0gW10sXG4gICAgICAgIG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuICAgICAgcmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG4gICAgICAgIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuICAgICAgICAgIHZhciBlbGVtLFxuICAgICAgICAgICAgdW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuICAgICAgICAgICAgaSA9IHNlZWQubGVuZ3RoO1xuXG4gICAgICAgICAgLy8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuICAgICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgICAgaWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG4gICAgICAgICAgICAgIHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pIDpcbiAgICAgICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcbiAgICAgICAgICBpbnB1dFswXSA9IGVsZW07XG4gICAgICAgICAgbWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuICAgICAgICAgIHJldHVybiAhcmVzdWx0cy5wb3AoKTtcbiAgICAgICAgfTtcbiAgICB9KSxcblxuICAgIFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcbiAgICAgIH07XG4gICAgfSksXG5cbiAgICBcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcbiAgICAgIH07XG4gICAgfSksXG5cbiAgICAvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3JcbiAgICAvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuICAgIC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG4gICAgLy8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cbiAgICAvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cbiAgICAvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuICAgIFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuICAgICAgLy8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuICAgICAgaWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuICAgICAgICBTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG4gICAgICB9XG4gICAgICBsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHZhciBlbGVtTGFuZztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuICAgICAgICAgICAgZWxlbS5sYW5nIDpcbiAgICAgICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuICAgICAgICAgICAgZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgfSksXG5cbiAgICAvLyBNaXNjZWxsYW5lb3VzXG4gICAgXCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgIHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcbiAgICB9LFxuXG4gICAgXCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG4gICAgfSxcblxuICAgIFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuICAgIH0sXG5cbiAgICAvLyBCb29sZWFuIHByb3BlcnRpZXNcbiAgICBcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG4gICAgfSxcblxuICAgIFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgXCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgLy8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcbiAgICB9LFxuXG4gICAgXCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcbiAgICAgIC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcbiAgICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICBlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG4gICAgfSxcblxuICAgIC8vIENvbnRlbnRzXG4gICAgXCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG4gICAgICAvLyA6ZW1wdHkgaXMgb25seSBhZmZlY3RlZCBieSBlbGVtZW50IG5vZGVzIGFuZCBjb250ZW50IG5vZGVzKGluY2x1ZGluZyB0ZXh0KDMpLCBjZGF0YSg0KSksXG4gICAgICAvLyAgIG5vdCBjb21tZW50LCBwcm9jZXNzaW5nIGluc3RydWN0aW9ucywgb3Igb3RoZXJzXG4gICAgICAvLyBUaGFua3MgdG8gRGllZ28gUGVyaW5pIGZvciB0aGUgbm9kZU5hbWUgc2hvcnRjdXRcbiAgICAgIC8vICAgR3JlYXRlciB0aGFuIFwiQFwiIG1lYW5zIGFscGhhIGNoYXJhY3RlcnMgKHNwZWNpZmljYWxseSBub3Qgc3RhcnRpbmcgd2l0aCBcIiNcIiBvciBcIj9cIilcbiAgICAgIGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuICAgICAgICBpZiAoIGVsZW0ubm9kZU5hbWUgPiBcIkBcIiB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDQgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgXCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG4gICAgfSxcblxuICAgIC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcbiAgICBcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcbiAgICB9LFxuXG4gICAgXCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcbiAgICB9LFxuXG4gICAgXCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG4gICAgfSxcblxuICAgIFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBhdHRyO1xuICAgICAgLy8gSUU2IGFuZCA3IHdpbGwgbWFwIGVsZW0udHlwZSB0byAndGV4dCcgZm9yIG5ldyBIVE1MNSB0eXBlcyAoc2VhcmNoLCBldGMpXG4gICAgICAvLyB1c2UgZ2V0QXR0cmlidXRlIGluc3RlYWQgdG8gdGVzdCB0aGlzIGNhc2VcbiAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuICAgICAgICBlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG4gICAgICAgICggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBlbGVtLnR5cGUgKTtcbiAgICB9LFxuXG4gICAgLy8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuICAgIFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbIDAgXTtcbiAgICB9KSxcblxuICAgIFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcbiAgICAgIHJldHVybiBbIGxlbmd0aCAtIDEgXTtcbiAgICB9KSxcblxuICAgIFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuICAgICAgcmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuICAgIH0pLFxuXG4gICAgXCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG4gICAgICAgIG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hJbmRleGVzO1xuICAgIH0pLFxuXG4gICAgXCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG4gICAgICB2YXIgaSA9IDE7XG4gICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcbiAgICAgICAgbWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaEluZGV4ZXM7XG4gICAgfSksXG5cbiAgICBcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcbiAgICAgIHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcbiAgICAgIGZvciAoIDsgLS1pID49IDA7ICkge1xuICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoSW5kZXhlcztcbiAgICB9KSxcblxuICAgIFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuICAgICAgdmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuICAgICAgZm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoSW5kZXhlcztcbiAgICB9KVxuICB9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuICBFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuICBFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG5mdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcbiAgdmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG4gICAgc29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcbiAgICBjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cbiAgaWYgKCBjYWNoZWQgKSB7XG4gICAgcmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcbiAgfVxuXG4gIHNvRmFyID0gc2VsZWN0b3I7XG4gIGdyb3VwcyA9IFtdO1xuICBwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cbiAgd2hpbGUgKCBzb0ZhciApIHtcblxuICAgIC8vIENvbW1hIGFuZCBmaXJzdCBydW5cbiAgICBpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcbiAgICAgIGlmICggbWF0Y2ggKSB7XG4gICAgICAgIC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG4gICAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuICAgICAgfVxuICAgICAgZ3JvdXBzLnB1c2goIHRva2VucyA9IFtdICk7XG4gICAgfVxuXG4gICAgbWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgLy8gQ29tYmluYXRvcnNcbiAgICBpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcbiAgICAgIG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICB2YWx1ZTogbWF0Y2hlZCxcbiAgICAgICAgLy8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG4gICAgICAgIHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG4gICAgICB9KTtcbiAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG4gICAgfVxuXG4gICAgLy8gRmlsdGVyc1xuICAgIGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG4gICAgICBpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG4gICAgICAgIChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuICAgICAgICBtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHZhbHVlOiBtYXRjaGVkLFxuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgbWF0Y2hlczogbWF0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCAhbWF0Y2hlZCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuICAvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcbiAgLy8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG4gIHJldHVybiBwYXJzZU9ubHkgP1xuICAgIHNvRmFyLmxlbmd0aCA6XG4gICAgc29GYXIgP1xuICAgICAgU2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcbiAgICAgIC8vIENhY2hlIHRoZSB0b2tlbnNcbiAgICAgIHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufVxuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG4gIHZhciBpID0gMCxcbiAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLFxuICAgIHNlbGVjdG9yID0gXCJcIjtcbiAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgc2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcbiAgdmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuICAgIGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXG4gICAgZG9uZU5hbWUgPSBkb25lKys7XG5cbiAgcmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuICAgIC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuICAgIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG4gICAgICB3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDpcblxuICAgIC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuICAgIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG4gICAgICB2YXIgZGF0YSwgY2FjaGUsIG91dGVyQ2FjaGUsXG4gICAgICAgIGRpcmtleSA9IGRpcnJ1bnMgKyBcIiBcIiArIGRvbmVOYW1lO1xuXG4gICAgICAvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xuICAgICAgaWYgKCB4bWwgKSB7XG4gICAgICAgIHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG4gICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG4gICAgICAgICAgICBpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG4gICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG4gICAgICAgICAgICBvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG4gICAgICAgICAgICBpZiAoIChjYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJiBjYWNoZVswXSA9PT0gZGlya2V5ICkge1xuICAgICAgICAgICAgICBpZiAoIChkYXRhID0gY2FjaGVbMV0pID09PSB0cnVlIHx8IGRhdGEgPT09IGNhY2hlZHJ1bnMgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEgPT09IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0gPSBbIGRpcmtleSBdO1xuICAgICAgICAgICAgICBjYWNoZVsxXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApIHx8IGNhY2hlZHJ1bnM7XG4gICAgICAgICAgICAgIGlmICggY2FjaGVbMV0gPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG4gIHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cbiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuICAgICAgdmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgaWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSA6XG4gICAgbWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG4gIHZhciBlbGVtLFxuICAgIG5ld1VubWF0Y2hlZCA9IFtdLFxuICAgIGkgPSAwLFxuICAgIGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG4gICAgbWFwcGVkID0gbWFwICE9IG51bGw7XG5cbiAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgaWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG4gICAgICBpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcbiAgICAgICAgbmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcbiAgICAgICAgaWYgKCBtYXBwZWQgKSB7XG4gICAgICAgICAgbWFwLnB1c2goIGkgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcbiAgaWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG4gICAgcG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcbiAgfVxuICBpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcbiAgICBwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG4gIH1cbiAgcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuICAgIHZhciB0ZW1wLCBpLCBlbGVtLFxuICAgICAgcHJlTWFwID0gW10sXG4gICAgICBwb3N0TWFwID0gW10sXG4gICAgICBwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG4gICAgICAvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuICAgICAgZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG4gICAgICAvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cbiAgICAgIG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuICAgICAgICBjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG4gICAgICAgIGVsZW1zLFxuXG4gICAgICBtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG4gICAgICAgIHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuICAgICAgICAgIC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuICAgICAgICAgIFtdIDpcblxuICAgICAgICAgIC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuICAgICAgICAgIHJlc3VsdHMgOlxuICAgICAgICBtYXRjaGVySW47XG5cbiAgICAvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuICAgIGlmICggbWF0Y2hlciApIHtcbiAgICAgIG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgcG9zdEZpbHRlclxuICAgIGlmICggcG9zdEZpbHRlciApIHtcbiAgICAgIHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuICAgICAgcG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG4gICAgICAvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG4gICAgICBpID0gdGVtcC5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgaWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuICAgICAgICAgIG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICggc2VlZCApIHtcbiAgICAgIGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG4gICAgICAgIGlmICggcG9zdEZpbmRlciApIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcbiAgICAgICAgICB0ZW1wID0gW107XG4gICAgICAgICAgaSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgICAgaWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuICAgICAgICAgICAgICAvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuICAgICAgICAgICAgICB0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuICAgICAgICBpID0gbWF0Y2hlck91dC5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgIGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuICAgICAgICAgICAgKHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZi5jYWxsKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cbiAgICAgICAgICAgIHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuICAgIH0gZWxzZSB7XG4gICAgICBtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG4gICAgICAgIG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuICAgICAgICAgIG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG4gICAgICAgICAgbWF0Y2hlck91dFxuICAgICAgKTtcbiAgICAgIGlmICggcG9zdEZpbmRlciApIHtcbiAgICAgICAgcG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcbiAgdmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcbiAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLFxuICAgIGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG4gICAgaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcbiAgICBpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cbiAgICAvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuICAgIG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcbiAgICB9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG4gICAgbWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gaW5kZXhPZi5jYWxsKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuICAgIH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcbiAgICBtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcbiAgICAgIHJldHVybiAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuICAgICAgICAoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuICAgICAgICAgIG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuICAgICAgICAgIG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcbiAgICB9IF07XG5cbiAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgaWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuICAgICAgbWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuICAgICAgLy8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcbiAgICAgIGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuICAgICAgICAvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcbiAgICAgICAgaiA9ICsraTtcbiAgICAgICAgZm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG4gICAgICAgICAgaWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRNYXRjaGVyKFxuICAgICAgICAgIGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuICAgICAgICAgIGkgPiAxICYmIHRvU2VsZWN0b3IoXG4gICAgICAgICAgICAvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuICAgICAgICAgICAgdG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcbiAgICAgICAgICApLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcbiAgICAgICAgICBtYXRjaGVyLFxuICAgICAgICAgIGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuICAgICAgICAgIGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcbiAgICAgICAgICBqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG4gIC8vIEEgY291bnRlciB0byBzcGVjaWZ5IHdoaWNoIGVsZW1lbnQgaXMgY3VycmVudGx5IGJlaW5nIG1hdGNoZWRcbiAgdmFyIG1hdGNoZXJDYWNoZWRSdW5zID0gMCxcbiAgICBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG4gICAgYnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG4gICAgc3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgZXhwYW5kQ29udGV4dCApIHtcbiAgICAgIHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuICAgICAgICBzZXRNYXRjaGVkID0gW10sXG4gICAgICAgIG1hdGNoZWRDb3VudCA9IDAsXG4gICAgICAgIGkgPSBcIjBcIixcbiAgICAgICAgdW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcbiAgICAgICAgb3V0ZXJtb3N0ID0gZXhwYW5kQ29udGV4dCAhPSBudWxsLFxuICAgICAgICBjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcbiAgICAgICAgLy8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBjb250ZXh0XG4gICAgICAgIGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgZXhwYW5kQ29udGV4dCAmJiBjb250ZXh0LnBhcmVudE5vZGUgfHwgY29udGV4dCApLFxuICAgICAgICAvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuICAgICAgICBkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKTtcblxuICAgICAgaWYgKCBvdXRlcm1vc3QgKSB7XG4gICAgICAgIG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuICAgICAgICBjYWNoZWRydW5zID0gbWF0Y2hlckNhY2hlZFJ1bnM7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG4gICAgICAvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcbiAgICAgIGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuICAgICAgICBpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuICAgICAgICAgIGogPSAwO1xuICAgICAgICAgIHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG4gICAgICAgICAgICBpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggb3V0ZXJtb3N0ICkge1xuICAgICAgICAgICAgZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG4gICAgICAgICAgICBjYWNoZWRydW5zID0gKyttYXRjaGVyQ2FjaGVkUnVucztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG4gICAgICAgIGlmICggYnlTZXQgKSB7XG4gICAgICAgICAgLy8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuICAgICAgICAgIGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcbiAgICAgICAgICAgIG1hdGNoZWRDb3VudC0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3RcbiAgICAgICAgICBpZiAoIHNlZWQgKSB7XG4gICAgICAgICAgICB1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcbiAgICAgIG1hdGNoZWRDb3VudCArPSBpO1xuICAgICAgaWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG4gICAgICAgIGogPSAwO1xuICAgICAgICB3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG4gICAgICAgICAgbWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc2VlZCApIHtcbiAgICAgICAgICAvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG4gICAgICAgICAgaWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICAgICAgICAgIGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG4gICAgICAgICAgICAgICAgc2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuICAgICAgICAgIHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cbiAgICAgICAgLy8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG4gICAgICAgIGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG4gICAgICAgICAgU2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcbiAgICAgIGlmICggb3V0ZXJtb3N0ICkge1xuICAgICAgICBkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcbiAgICAgICAgb3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bm1hdGNoZWQ7XG4gICAgfTtcblxuICByZXR1cm4gYnlTZXQgP1xuICAgIG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuICAgIHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBncm91cCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcbiAgdmFyIGksXG4gICAgc2V0TWF0Y2hlcnMgPSBbXSxcbiAgICBlbGVtZW50TWF0Y2hlcnMgPSBbXSxcbiAgICBjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cbiAgaWYgKCAhY2FjaGVkICkge1xuICAgIC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuICAgIGlmICggIWdyb3VwICkge1xuICAgICAgZ3JvdXAgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcbiAgICB9XG4gICAgaSA9IGdyb3VwLmxlbmd0aDtcbiAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgIGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBncm91cFtpXSApO1xuICAgICAgaWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcbiAgICAgICAgc2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG4gICAgY2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlZDtcbn07XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcbiAgdmFyIGkgPSAwLFxuICAgIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgU2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0KCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcbiAgdmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG4gICAgbWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblxuICBpZiAoICFzZWVkICkge1xuICAgIC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIGdyb3VwXG4gICAgaWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cbiAgICAgIC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG4gICAgICB0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG4gICAgICBpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG4gICAgICAgICAgc3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcbiAgICAgICAgICBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG4gICAgICAgIGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcbiAgICAgICAgaWYgKCAhY29udGV4dCApIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuICAgICAgaSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgICAgLy8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuICAgICAgICBpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuICAgICAgICAgIC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuICAgICAgICAgIGlmICggKHNlZWQgPSBmaW5kKFxuICAgICAgICAgICAgdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuICAgICAgICAgICAgcnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiBjb250ZXh0LnBhcmVudE5vZGUgfHwgY29udGV4dFxuICAgICAgICAgICkpICkge1xuXG4gICAgICAgICAgICAvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcbiAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG4gICAgICAgICAgICBpZiAoICFzZWxlY3RvciApIHtcbiAgICAgICAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvblxuICAvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG4gIGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApKFxuICAgIHNlZWQsXG4gICAgY29udGV4dCxcbiAgICAhZG9jdW1lbnRJc0hUTUwsXG4gICAgcmVzdWx0cyxcbiAgICByc2libGluZy50ZXN0KCBzZWxlY3RvciApXG4gICk7XG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWU8MTRcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9IGhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcbiAgLy8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG4gIHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcbiAgZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG4gIGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcbiAgICBpZiAoICFpc1hNTCApIHtcbiAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcbiAgZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcbiAgZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcbiAgcmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcbiAgYWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcbiAgICBpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcbiAgICAgIHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcbiAgcmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG4gIGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcbiAgICB2YXIgdmFsO1xuICAgIGlmICggIWlzWE1MICkge1xuICAgICAgcmV0dXJuICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG4gICAgICAgIHZhbC52YWx1ZSA6XG4gICAgICAgIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgfVxuICB9KTtcbn1cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG59KSggd2luZG93ICk7XG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXG52YXIgb3B0aW9uc0NhY2hlID0ge307XG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcbiAgdmFyIG9iamVjdCA9IG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdID0ge307XG4gIGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcbiAgICBvYmplY3RbIGZsYWcgXSA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICogIG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqICAgICAgdGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKiAgb25jZTogICAgIHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKiAgbWVtb3J5OiAgICAgd2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICogICAgICAgICAgYWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICogICAgICAgICAgdmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICogIHVuaXF1ZTogICAgIHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqICBzdG9wT25GYWxzZTogIGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG4gIC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcbiAgLy8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuICAgICggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOlxuICAgIGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cbiAgdmFyIC8vIExhc3QgZmlyZSB2YWx1ZSAoZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0cylcbiAgICBtZW1vcnksXG4gICAgLy8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcbiAgICBmaXJlZCxcbiAgICAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG4gICAgZmlyaW5nLFxuICAgIC8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKVxuICAgIGZpcmluZ1N0YXJ0LFxuICAgIC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xuICAgIGZpcmluZ0xlbmd0aCxcbiAgICAvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKVxuICAgIGZpcmluZ0luZGV4LFxuICAgIC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG4gICAgbGlzdCA9IFtdLFxuICAgIC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHNcbiAgICBzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sXG4gICAgLy8gRmlyZSBjYWxsYmFja3NcbiAgICBmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7XG4gICAgICBtZW1vcnkgPSBvcHRpb25zLm1lbW9yeSAmJiBkYXRhO1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwO1xuICAgICAgZmlyaW5nU3RhcnQgPSAwO1xuICAgICAgZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgICBmaXJpbmcgPSB0cnVlO1xuICAgICAgZm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkge1xuICAgICAgICBpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG4gICAgICAgICAgbWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGRcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmlyaW5nID0gZmFsc2U7XG4gICAgICBpZiAoIGxpc3QgKSB7XG4gICAgICAgIGlmICggc3RhY2sgKSB7XG4gICAgICAgICAgaWYgKCBzdGFjay5sZW5ndGggKSB7XG4gICAgICAgICAgICBmaXJlKCBzdGFjay5zaGlmdCgpICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG4gICAgICAgICAgbGlzdCA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuICAgIHNlbGYgPSB7XG4gICAgICAvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG4gICAgICBhZGQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGxpc3QgKSB7XG4gICAgICAgICAgLy8gRmlyc3QsIHdlIHNhdmUgdGhlIGN1cnJlbnQgbGVuZ3RoXG4gICAgICAgICAgdmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XG4gICAgICAgICAgKGZ1bmN0aW9uIGFkZCggYXJncyApIHtcbiAgICAgICAgICAgIGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcbiAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcbiAgICAgICAgICAgICAgICAgIGxpc3QucHVzaCggYXJnICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgICAgICAgICAgIC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgICAgICAgICBhZGQoIGFyZyApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSggYXJndW1lbnRzICk7XG4gICAgICAgICAgLy8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cbiAgICAgICAgICBpZiAoIGZpcmluZyApIHtcbiAgICAgICAgICAgIGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgICAgICAgIC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cbiAgICAgICAgICAvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5XG4gICAgICAgICAgfSBlbHNlIGlmICggbWVtb3J5ICkge1xuICAgICAgICAgICAgZmlyaW5nU3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGZpcmUoIG1lbW9yeSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG4gICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGxpc3QgKSB7XG4gICAgICAgICAgalF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcbiAgICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICAgIHdoaWxlKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG4gICAgICAgICAgICAgIGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuICAgICAgICAgICAgICAvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcbiAgICAgICAgICAgICAgaWYgKCBmaXJpbmcgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICBmaXJpbmdMZW5ndGgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcbiAgICAgICAgICAgICAgICAgIGZpcmluZ0luZGV4LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cbiAgICAgIC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuICAgICAgaGFzOiBmdW5jdGlvbiggZm4gKSB7XG4gICAgICAgIHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuICAgICAgfSxcbiAgICAgIC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3RcbiAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdCA9IFtdO1xuICAgICAgICBmaXJpbmdMZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gSXMgaXQgZGlzYWJsZWQ/XG4gICAgICBkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhbGlzdDtcbiAgICAgIH0sXG4gICAgICAvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG4gICAgICBsb2NrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICggIW1lbW9yeSApIHtcbiAgICAgICAgICBzZWxmLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBJcyBpdCBsb2NrZWQ/XG4gICAgICBsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXN0YWNrO1xuICAgICAgfSxcbiAgICAgIC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcbiAgICAgIGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcbiAgICAgICAgaWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG4gICAgICAgICAgYXJncyA9IGFyZ3MgfHwgW107XG4gICAgICAgICAgYXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcbiAgICAgICAgICBpZiAoIGZpcmluZyApIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goIGFyZ3MgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlyZSggYXJncyApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAgZmlyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2VcbiAgICAgIGZpcmVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhZmlyZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5qUXVlcnkuZXh0ZW5kKHtcblxuICBEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG4gICAgdmFyIHR1cGxlcyA9IFtcbiAgICAgICAgLy8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG4gICAgICAgIFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxuICAgICAgICBbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxuICAgICAgICBbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXG4gICAgICBdLFxuICAgICAgc3RhdGUgPSBcInBlbmRpbmdcIixcbiAgICAgIHByb21pc2UgPSB7XG4gICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGFsd2F5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcbiAgICAgICAgICB2YXIgZm5zID0gYXJndW1lbnRzO1xuICAgICAgICAgIHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuICAgICAgICAgICAgalF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gdHVwbGVbIDAgXSxcbiAgICAgICAgICAgICAgICBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuICAgICAgICAgICAgICAvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcbiAgICAgICAgICAgICAgZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICAgICAgICAgIGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybmVkLnByb21pc2UoKVxuICAgICAgICAgICAgICAgICAgICAuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG4gICAgICAgICAgICAgICAgICAgIC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKVxuICAgICAgICAgICAgICAgICAgICAucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBuZXdEZWZlclsgYWN0aW9uICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm5zID0gbnVsbDtcbiAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcbiAgICAgICAgLy8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuICAgICAgICBwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuICAgICAgICAgIHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlZmVycmVkID0ge307XG5cbiAgICAvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG4gICAgcHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG4gICAgLy8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuICAgIGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcbiAgICAgIHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcbiAgICAgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG4gICAgICAvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuICAgICAgcHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG4gICAgICAvLyBIYW5kbGUgc3RhdGVcbiAgICAgIGlmICggc3RhdGVTdHJpbmcgKSB7XG4gICAgICAgIGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cbiAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG4gICAgICAgIC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcbiAgICAgICAgfSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cbiAgICAgIGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcbiAgICB9KTtcblxuICAgIC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuICAgIHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuICAgIC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcbiAgICBpZiAoIGZ1bmMgKSB7XG4gICAgICBmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuICAgIH1cblxuICAgIC8vIEFsbCBkb25lIVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfSxcblxuICAvLyBEZWZlcnJlZCBoZWxwZXJcbiAgd2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgcmVzb2x2ZVZhbHVlcyA9IGNvcmVfc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG4gICAgICBsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuICAgICAgLy8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuICAgICAgcmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuICAgICAgLy8gdGhlIG1hc3RlciBEZWZlcnJlZC4gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG4gICAgICBkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cbiAgICAgIC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcbiAgICAgIHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICAgICAgICBjb250ZXh0c1sgaSBdID0gdGhpcztcbiAgICAgICAgICB2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gY29yZV9zbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuICAgICAgICAgIGlmKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuICAgICAgICAgICAgZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cbiAgICAvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG4gICAgaWYgKCBsZW5ndGggPiAxICkge1xuICAgICAgcHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuICAgICAgcHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG4gICAgICByZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuICAgICAgICAgIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcbiAgICAgICAgICAgIC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG4gICAgICAgICAgICAuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcbiAgICAgICAgICAgIC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC0tcmVtYWluaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuICAgIGlmICggIXJlbWFpbmluZyApIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICB9XG59KTtcbmpRdWVyeS5zdXBwb3J0ID0gKGZ1bmN0aW9uKCBzdXBwb3J0ICkge1xuICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG4gICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLFxuICAgIG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSApO1xuXG4gIC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIGVudmlyb25tZW50c1xuICBpZiAoICFpbnB1dC50eXBlICkge1xuICAgIHJldHVybiBzdXBwb3J0O1xuICB9XG5cbiAgaW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuICAvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcbiAgLy8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gb2xkIFdlYktpdDsgXCJvblwiIGVsc2V3aGVyZSlcbiAgc3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cbiAgLy8gTXVzdCBhY2Nlc3MgdGhlIHBhcmVudCB0byBtYWtlIGFuIG9wdGlvbiBzZWxlY3QgcHJvcGVybHlcbiAgLy8gU3VwcG9ydDogSUU5LCBJRTEwXG4gIHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cbiAgLy8gV2lsbCBiZSBkZWZpbmVkIGxhdGVyXG4gIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCA9IHRydWU7XG4gIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUgPSB0cnVlO1xuICBzdXBwb3J0LnBpeGVsUG9zaXRpb24gPSBmYWxzZTtcblxuICAvLyBNYWtlIHN1cmUgY2hlY2tlZCBzdGF0dXMgaXMgcHJvcGVybHkgY2xvbmVkXG4gIC8vIFN1cHBvcnQ6IElFOSwgSUUxMFxuICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9IGlucHV0LmNsb25lTm9kZSggdHJ1ZSApLmNoZWNrZWQ7XG5cbiAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIG9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlbid0IG1hcmtlZCBhcyBkaXNhYmxlZFxuICAvLyAoV2ViS2l0IG1hcmtzIHRoZW0gYXMgZGlzYWJsZWQpXG4gIHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG4gIHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG4gIC8vIENoZWNrIGlmIGFuIGlucHV0IG1haW50YWlucyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuICAvLyBTdXBwb3J0OiBJRTksIElFMTBcbiAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0LnZhbHVlID0gXCJ0XCI7XG4gIGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG4gIHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcblxuICAvLyAjMTEyMTcgLSBXZWJLaXQgbG9zZXMgY2hlY2sgd2hlbiB0aGUgbmFtZSBpcyBhZnRlciB0aGUgY2hlY2tlZCBhdHRyaWJ1dGVcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJ0XCIgKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuICBmcmFnbWVudC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuICAvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcbiAgLy8gb2xkIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuICBzdXBwb3J0LmNoZWNrQ2xvbmUgPSBmcmFnbWVudC5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuICAvLyBTdXBwb3J0OiBGaXJlZm94LCBDaHJvbWUsIFNhZmFyaVxuICAvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxuICBzdXBwb3J0LmZvY3VzaW5CdWJibGVzID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cbiAgZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuICBkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuICBzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG4gIC8vIFJ1biB0ZXN0cyB0aGF0IG5lZWQgYSBib2R5IGF0IGRvYyByZWFkeVxuICBqUXVlcnkoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbnRhaW5lciwgbWFyZ2luRGl2LFxuICAgICAgLy8gU3VwcG9ydDogRmlyZWZveCwgQW5kcm9pZCAyLjMgKFByZWZpeGVkIGJveC1zaXppbmcgdmVyc2lvbnMpLlxuICAgICAgZGl2UmVzZXQgPSBcInBhZGRpbmc6MDttYXJnaW46MDtib3JkZXI6MDtkaXNwbGF5OmJsb2NrOy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveFwiLFxuICAgICAgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVsgMCBdO1xuXG4gICAgaWYgKCAhYm9keSApIHtcbiAgICAgIC8vIFJldHVybiBmb3IgZnJhbWVzZXQgZG9jcyB0aGF0IGRvbid0IGhhdmUgYSBib2R5XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0Oi05OTk5cHg7bWFyZ2luLXRvcDoxcHhcIjtcblxuICAgIC8vIENoZWNrIGJveC1zaXppbmcgYW5kIG1hcmdpbiBiZWhhdmlvci5cbiAgICBib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG4gICAgZGl2LmlubmVySFRNTCA9IFwiXCI7XG4gICAgLy8gU3VwcG9ydDogRmlyZWZveCwgQW5kcm9pZCAyLjMgKFByZWZpeGVkIGJveC1zaXppbmcgdmVyc2lvbnMpLlxuICAgIGRpdi5zdHlsZS5jc3NUZXh0ID0gXCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzoxcHg7Ym9yZGVyOjFweDtkaXNwbGF5OmJsb2NrO3dpZHRoOjRweDttYXJnaW4tdG9wOjElO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxJVwiO1xuXG4gICAgLy8gV29ya2Fyb3VuZCBmYWlsaW5nIGJveFNpemluZyB0ZXN0IGR1ZSB0byBvZmZzZXRXaWR0aCByZXR1cm5pbmcgd3JvbmcgdmFsdWVcbiAgICAvLyB3aXRoIHNvbWUgbm9uLTEgdmFsdWVzIG9mIGJvZHkgem9vbSwgdGlja2V0ICMxMzU0M1xuICAgIGpRdWVyeS5zd2FwKCBib2R5LCBib2R5LnN0eWxlLnpvb20gIT0gbnVsbCA/IHsgem9vbTogMSB9IDoge30sIGZ1bmN0aW9uKCkge1xuICAgICAgc3VwcG9ydC5ib3hTaXppbmcgPSBkaXYub2Zmc2V0V2lkdGggPT09IDQ7XG4gICAgfSk7XG5cbiAgICAvLyBVc2Ugd2luZG93LmdldENvbXB1dGVkU3R5bGUgYmVjYXVzZSBqc2RvbSBvbiBub2RlLmpzIHdpbGwgYnJlYWsgd2l0aG91dCBpdC5cbiAgICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xuICAgICAgc3VwcG9ydC5waXhlbFBvc2l0aW9uID0gKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICkgfHwge30gKS50b3AgIT09IFwiMSVcIjtcbiAgICAgIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUgPSAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKSB8fCB7IHdpZHRoOiBcIjRweFwiIH0gKS53aWR0aCA9PT0gXCI0cHhcIjtcblxuICAgICAgLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbiAgICAgIC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcbiAgICAgIC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuICAgICAgLy8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG4gICAgICBtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcbiAgICAgIG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPSBkaXZSZXNldDtcbiAgICAgIG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuICAgICAgZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblxuICAgICAgc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0ID1cbiAgICAgICAgIXBhcnNlRmxvYXQoICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTtcbiAgICB9XG5cbiAgICBib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59KSgge30gKTtcblxuLypcbiAgSW1wbGVtZW50YXRpb24gU3VtbWFyeVxuXG4gIDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbiAgMi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4gICAgcGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuICAzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuICA0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4gIDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuICA2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcbiovXG52YXIgZGF0YV91c2VyLCBkYXRhX3ByaXYsXG4gIHJicmFjZSA9IC8oPzpcXHtbXFxzXFxTXSpcXH18XFxbW1xcc1xcU10qXFxdKSQvLFxuICBybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gRGF0YSgpIHtcbiAgLy8gU3VwcG9ydDogQW5kcm9pZCA8IDQsXG4gIC8vIE9sZCBXZWJLaXQgZG9lcyBub3QgaGF2ZSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMvZnJlZXplIG1ldGhvZCxcbiAgLy8gcmV0dXJuIG5ldyBlbXB0eSBvYmplY3QgaW5zdGVhZCB3aXRoIG5vIFtbc2V0XV0gYWNjZXNzb3JcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLmNhY2hlID0ge30sIDAsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBNYXRoLnJhbmRvbSgpO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEuYWNjZXB0cyA9IGZ1bmN0aW9uKCBvd25lciApIHtcbiAgLy8gQWNjZXB0cyBvbmx5OlxuICAvLyAgLSBOb2RlXG4gIC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcbiAgLy8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcbiAgLy8gIC0gT2JqZWN0XG4gIC8vICAgIC0gQW55XG4gIHJldHVybiBvd25lci5ub2RlVHlwZSA/XG4gICAgb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgOiB0cnVlO1xufTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG4gIGtleTogZnVuY3Rpb24oIG93bmVyICkge1xuICAgIC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuICAgIC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG4gICAgLy8gQWx3YXlzIHJldHVybiB0aGUga2V5IGZvciBhIGZyb3plbiBvYmplY3QuXG4gICAgaWYgKCAhRGF0YS5hY2NlcHRzKCBvd25lciApICkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGRlc2NyaXB0b3IgPSB7fSxcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZSBrZXlcbiAgICAgIHVubG9jayA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuICAgIC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuICAgIGlmICggIXVubG9jayApIHtcbiAgICAgIHVubG9jayA9IERhdGEudWlkKys7XG5cbiAgICAgIC8vIFNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlc2NyaXB0b3JbIHRoaXMuZXhwYW5kbyBdID0geyB2YWx1ZTogdW5sb2NrIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBvd25lciwgZGVzY3JpcHRvciApO1xuXG4gICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkIDwgNFxuICAgICAgLy8gRmFsbGJhY2sgdG8gYSBsZXNzIHNlY3VyZSBkZWZpbml0aW9uXG4gICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB1bmxvY2s7XG4gICAgICAgIGpRdWVyeS5leHRlbmQoIG93bmVyLCBkZXNjcmlwdG9yICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoZSBjYWNoZSBvYmplY3RcbiAgICBpZiAoICF0aGlzLmNhY2hlWyB1bmxvY2sgXSApIHtcbiAgICAgIHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHVubG9jaztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuICAgIHZhciBwcm9wLFxuICAgICAgLy8gVGhlcmUgbWF5IGJlIGFuIHVubG9jayBhc3NpZ25lZCB0byB0aGlzIG5vZGUsXG4gICAgICAvLyBpZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBcIm93bmVyXCIsIGNyZWF0ZSBvbmUgaW5saW5lXG4gICAgICAvLyBhbmQgc2V0IHRoZSB1bmxvY2sgYXMgdGhvdWdoIGFuIG93bmVyIGVudHJ5IGhhZCBhbHdheXMgZXhpc3RlZFxuICAgICAgdW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG4gICAgICBjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG4gICAgLy8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuICAgIGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICBjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cbiAgICAvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVzaCBhc3NpZ25tZW50cyBieSBvYmplY3QgYXJlIHNoYWxsb3cgY29waWVkXG4gICAgICBpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuICAgICAgICBqUXVlcnkuZXh0ZW5kKCB0aGlzLmNhY2hlWyB1bmxvY2sgXSwgZGF0YSApO1xuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICggcHJvcCBpbiBkYXRhICkge1xuICAgICAgICAgIGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuICAgIC8vIEVpdGhlciBhIHZhbGlkIGNhY2hlIGlzIGZvdW5kLCBvciB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgLy8gTmV3IGNhY2hlcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIHRoZSB1bmxvY2sgcmV0dXJuZWQsXG4gICAgLy8gYWxsb3dpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgbmV3bHkgY3JlYXRlZFxuICAgIC8vIGVtcHR5IGRhdGEgb2JqZWN0LiBBIHZhbGlkIG93bmVyIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLlxuICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGVbIHRoaXMua2V5KCBvd25lciApIF07XG5cbiAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuICAgICAgY2FjaGUgOiBjYWNoZVsga2V5IF07XG4gIH0sXG4gIGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuICAgIHZhciBzdG9yZWQ7XG4gICAgLy8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuICAgIC8vXG4gICAgLy8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuICAgIC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuICAgIC8vXG4gICAgLy8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG4gICAgLy8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuICAgIC8vXG4gICAgLy8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuICAgIC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcbiAgICAvL1xuICAgIGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgKChrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgKSB7XG5cbiAgICAgIHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cbiAgICAgIHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZShrZXkpICk7XG4gICAgfVxuXG4gICAgLy8gWypdV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcbiAgICAvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcbiAgICAvL1xuICAgIC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcbiAgICAvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuICAgIC8vXG4gICAgdGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cbiAgICAvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcbiAgICAvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuICAgIHZhciBpLCBuYW1lLCBjYW1lbCxcbiAgICAgIHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuICAgICAgY2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuICAgIGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG4gICAgICB0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG4gICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcbiAgICAgICAgLy8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuICAgICAgICAvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxuICAgICAgICAvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cbiAgICAgICAgLy8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcbiAgICAgICAgLy8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxuICAgICAgICAvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cbiAgICAgICAgbmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcbiAgICAgICAgLy8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cbiAgICAgICAgaWYgKCBrZXkgaW4gY2FjaGUgKSB7XG4gICAgICAgICAgbmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuICAgICAgICAgIG5hbWUgPSBjYW1lbDtcbiAgICAgICAgICBuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG4gICAgICAgICAgICBbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggY29yZV9ybm90d2hpdGUgKSB8fCBbXSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGkgPSBuYW1lLmxlbmd0aDtcbiAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICBkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuICAgIHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG4gICAgICB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuICAgICk7XG4gIH0sXG4gIGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcbiAgICBpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIFRoZXNlIG1heSBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIGpRdWVyeSBjb3JlIGNvZGViYXNlXG5kYXRhX3VzZXIgPSBuZXcgRGF0YSgpO1xuZGF0YV9wcml2ID0gbmV3IERhdGEoKTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcbiAgYWNjZXB0RGF0YTogRGF0YS5hY2NlcHRzLFxuXG4gIGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XG4gIH0sXG5cbiAgZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG4gICAgcmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcbiAgfSxcblxuICByZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcbiAgICBkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG4gIH0sXG5cbiAgLy8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcbiAgLy8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuICBfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG4gICAgcmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcbiAgfSxcblxuICBfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG4gICAgZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuICB9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuICAgIHZhciBhdHRycywgbmFtZSxcbiAgICAgIGVsZW0gPSB0aGlzWyAwIF0sXG4gICAgICBpID0gMCxcbiAgICAgIGRhdGEgPSBudWxsO1xuXG4gICAgLy8gR2V0cyBhbGwgdmFsdWVzXG4gICAgaWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIGlmICggdGhpcy5sZW5ndGggKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtICk7XG5cbiAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG4gICAgICAgICAgYXR0cnMgPSBlbGVtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgZm9yICggOyBpIDwgYXR0cnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXG4gICAgICAgICAgICBpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG4gICAgICAgICAgICAgIGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YV9wcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG4gICAgaWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZGF0YV91c2VyLnNldCggdGhpcywga2V5ICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuICAgICAgdmFyIGRhdGEsXG4gICAgICAgIGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cbiAgICAgIC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG4gICAgICAvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuICAgICAgLy8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3RcbiAgICAgIC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcbiAgICAgIC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG4gICAgICBpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAvLyB3aXRoIHRoZSBrZXkgYXMtaXNcbiAgICAgICAgZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGtleSApO1xuICAgICAgICBpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgLy8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxuICAgICAgICBkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcbiAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuICAgICAgICAvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG4gICAgICAgIGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuICAgICAgICBpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdGhlIGRhdGEuLi5cbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRmlyc3QsIGF0dGVtcHQgdG8gc3RvcmUgYSBjb3B5IG9yIHJlZmVyZW5jZSBvZiBhbnlcbiAgICAgICAgLy8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxuICAgICAgICB2YXIgZGF0YSA9IGRhdGFfdXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cbiAgICAgICAgLy8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuICAgICAgICAvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuICAgICAgICAvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcbiAgICAgICAgZGF0YV91c2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XG5cbiAgICAgICAgLy8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xuICAgICAgICAvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XG4gICAgICAgIC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cbiAgICAgICAgaWYgKCBrZXkuaW5kZXhPZihcIi1cIikgIT09IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICBkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuICB9LFxuXG4gIHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGRhdGFfdXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuICAgIH0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcbiAgdmFyIG5hbWU7XG5cbiAgLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuICAvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcbiAgaWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICBuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xuICAgIGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG4gICAgaWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuICAgICAgICAgIGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcbiAgICAgICAgICBkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuICAgICAgICAgIC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG4gICAgICAgICAgK2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuICAgICAgICAgIHJicmFjZS50ZXN0KCBkYXRhICkgPyBKU09OLnBhcnNlKCBkYXRhICkgOlxuICAgICAgICAgIGRhdGE7XG4gICAgICB9IGNhdGNoKCBlICkge31cblxuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG4gICAgICBkYXRhX3VzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5qUXVlcnkuZXh0ZW5kKHtcbiAgcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuICAgIHZhciBxdWV1ZTtcblxuICAgIGlmICggZWxlbSApIHtcbiAgICAgIHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG4gICAgICBxdWV1ZSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuICAgICAgLy8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuICAgICAgaWYgKCBkYXRhICkge1xuICAgICAgICBpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuICAgICAgICAgIHF1ZXVlID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXVlLnB1c2goIGRhdGEgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXVlIHx8IFtdO1xuICAgIH1cbiAgfSxcblxuICBkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcbiAgICB0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cbiAgICB2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcbiAgICAgIHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpLFxuICAgICAgaG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcbiAgICAgIG5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgalF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcbiAgICAgIH07XG5cbiAgICAvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG4gICAgaWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG4gICAgICBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBzdGFydExlbmd0aC0tO1xuICAgIH1cblxuICAgIGlmICggZm4gKSB7XG5cbiAgICAgIC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcbiAgICAgIC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcbiAgICAgIGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuICAgICAgICBxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuICAgICAgfVxuXG4gICAgICAvLyBjbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG4gICAgICBkZWxldGUgaG9va3Muc3RvcDtcbiAgICAgIGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG4gICAgfVxuXG4gICAgaWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG4gICAgICBob29rcy5lbXB0eS5maXJlKCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIG5vdCBpbnRlbmRlZCBmb3IgcHVibGljIGNvbnN1bXB0aW9uIC0gZ2VuZXJhdGVzIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybnMgdGhlIGN1cnJlbnQgb25lXG4gIF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcbiAgICB2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuICAgIHJldHVybiBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcbiAgICAgIGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuICAgICAgICBkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcbiAgICB2YXIgc2V0dGVyID0gMjtcblxuICAgIGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG4gICAgICBkYXRhID0gdHlwZTtcbiAgICAgIHR5cGUgPSBcImZ4XCI7XG4gICAgICBzZXR0ZXItLTtcbiAgICB9XG5cbiAgICBpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG4gICAgICByZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG4gICAgICB0aGlzIDpcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cbiAgICAgICAgLy8gZW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcbiAgICAgICAgalF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cbiAgICAgICAgaWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbMF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuICAgICAgICAgIGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9LFxuICBkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcbiAgICB9KTtcbiAgfSxcbiAgLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuICAvLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG4gIGRlbGF5OiBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcbiAgICB0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuICAgIHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuICAgIHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG4gICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcbiAgICAgIGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuICBjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG4gIH0sXG4gIC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcbiAgLy8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG4gIHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG4gICAgdmFyIHRtcCxcbiAgICAgIGNvdW50ID0gMSxcbiAgICAgIGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG4gICAgICBlbGVtZW50cyA9IHRoaXMsXG4gICAgICBpID0gdGhpcy5sZW5ndGgsXG4gICAgICByZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggISggLS1jb3VudCApICkge1xuICAgICAgICAgIGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICBpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgb2JqID0gdHlwZTtcbiAgICAgIHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuICAgIHdoaWxlKCBpLS0gKSB7XG4gICAgICB0bXAgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcbiAgICAgIGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgdG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXNvbHZlKCk7XG4gICAgcmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuICB9XG59KTtcbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG4gIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nLFxuICBycmV0dXJuID0gL1xcci9nLFxuICByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuICB9LFxuXG4gIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuICAgIH0pO1xuICB9LFxuXG4gIHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuICB9LFxuXG4gIHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG4gICAgfSk7XG4gIH0sXG5cbiAgYWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICB2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaixcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gdGhpcy5sZW5ndGgsXG4gICAgICBwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlO1xuXG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIHByb2NlZWQgKSB7XG4gICAgICAvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxuICAgICAgY2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtdO1xuXG4gICAgICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgZWxlbSA9IHRoaXNbIGkgXTtcbiAgICAgICAgY3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cbiAgICAgICAgICAoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG4gICAgICAgICAgXCIgXCJcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIGN1ciApIHtcbiAgICAgICAgICBqID0gMDtcbiAgICAgICAgICB3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG4gICAgICAgICAgICBpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG4gICAgICAgICAgICAgIGN1ciArPSBjbGF6eiArIFwiIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICB2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaixcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gdGhpcy5sZW5ndGgsXG4gICAgICBwcm9jZWVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWU7XG5cbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcbiAgICAgICAgalF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIHByb2NlZWQgKSB7XG4gICAgICBjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIGNvcmVfcm5vdHdoaXRlICkgfHwgW107XG5cbiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICBlbGVtID0gdGhpc1sgaSBdO1xuICAgICAgICAvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuICAgICAgICAgICggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcbiAgICAgICAgICBcIlwiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCBjdXIgKSB7XG4gICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuICAgICAgICAgICAgd2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPj0gMCApIHtcbiAgICAgICAgICAgICAgY3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgIGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG4gICAgfVxuXG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuICAgICAgICAvLyB0b2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuICAgICAgICB2YXIgY2xhc3NOYW1lLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcbiAgICAgICAgICBjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIGNvcmVfcm5vdHdoaXRlICkgfHwgW107XG5cbiAgICAgICAgd2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xuICAgICAgICAgIC8vIGNoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuICAgICAgICAgIGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG4gICAgICAgICAgICBzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG4gICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSBjb3JlX3N0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcbiAgICAgICAgaWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcbiAgICAgICAgICAvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG4gICAgICAgICAgZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBcImZhbHNlXCIsXG4gICAgICAgIC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG4gICAgICAgIC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG4gICAgICAgIC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cbiAgICAgICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcbiAgICAgIGkgPSAwLFxuICAgICAgbCA9IHRoaXMubGVuZ3RoO1xuICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgIGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICB2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICB2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcbiAgICAgIGVsZW0gPSB0aGlzWzBdO1xuXG4gICAgaWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcbiAgICAgIGlmICggZWxlbSApIHtcbiAgICAgICAgaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cbiAgICAgICAgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBlbGVtLnZhbHVlO1xuXG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cbiAgICAgICAgICAvLyBoYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG4gICAgICAgICAgcmV0LnJlcGxhY2UocnJldHVybiwgXCJcIikgOlxuICAgICAgICAgIC8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuICAgICAgICAgIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG4gICAgICB2YXIgdmFsO1xuXG4gICAgICBpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCBpc0Z1bmN0aW9uICkge1xuICAgICAgICB2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcbiAgICAgIGlmICggdmFsID09IG51bGwgKSB7XG4gICAgICAgIHZhbCA9IFwiXCI7XG4gICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuICAgICAgICB2YWwgKz0gXCJcIjtcbiAgICAgIH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcbiAgICAgICAgdmFsID0galF1ZXJ5Lm1hcCh2YWwsIGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cbiAgICAgIC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG4gICAgICBpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIHZhbEhvb2tzOiB7XG4gICAgb3B0aW9uOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICAvLyBhdHRyaWJ1dGVzLnZhbHVlIGlzIHVuZGVmaW5lZCBpbiBCbGFja2JlcnJ5IDQuNyBidXRcbiAgICAgICAgLy8gdXNlcyAudmFsdWUuIFNlZSAjNjkzMlxuICAgICAgICB2YXIgdmFsID0gZWxlbS5hdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgICByZXR1cm4gIXZhbCB8fCB2YWwuc3BlY2lmaWVkID8gZWxlbS52YWx1ZSA6IGVsZW0udGV4dDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgdmFyIHZhbHVlLCBvcHRpb24sXG4gICAgICAgICAgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcbiAgICAgICAgICBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICBvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcbiAgICAgICAgICB2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG4gICAgICAgICAgbWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgaSA9IGluZGV4IDwgMCA/XG4gICAgICAgICAgICBtYXggOlxuICAgICAgICAgICAgb25lID8gaW5kZXggOiAwO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcbiAgICAgICAgZm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG4gICAgICAgICAgb3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG4gICAgICAgICAgLy8gSUU2LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG4gICAgICAgICAgaWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG4gICAgICAgICAgICAgIC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcbiAgICAgICAgICAgICAgKCBqUXVlcnkuc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT09IG51bGwgKSAmJlxuICAgICAgICAgICAgICAoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuICAgICAgICAgICAgdmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG4gICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuICAgICAgICAgICAgaWYgKCBvbmUgKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICB9LFxuXG4gICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcbiAgICAgICAgdmFyIG9wdGlvblNldCwgb3B0aW9uLFxuICAgICAgICAgIG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG4gICAgICAgICAgdmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcbiAgICAgICAgICBpID0gb3B0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICAgICAgb3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuICAgICAgICAgIGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkob3B0aW9uKS52YWwoKSwgdmFsdWVzICkgPj0gMCkgKSB7XG4gICAgICAgICAgICBvcHRpb25TZXQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG4gICAgICAgIGlmICggIW9wdGlvblNldCApIHtcbiAgICAgICAgICBlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG4gICAgdmFyIGhvb2tzLCByZXQsXG4gICAgICBuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cbiAgICAvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG4gICAgaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBjb3JlX3N0cnVuZGVmaW5lZCApIHtcbiAgICAgIHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcbiAgICB9XG5cbiAgICAvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG4gICAgLy8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuICAgIGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG4gICAgICAgICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG4gICAgfVxuXG4gICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG4gICAgICBpZiAoIHZhbHVlID09PSBudWxsICkge1xuICAgICAgICBqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXG4gICAgICB9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xuICAgICAgcmV0dXJuIHJldDtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cbiAgICAgIC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG4gICAgICByZXR1cm4gcmV0ID09IG51bGwgP1xuICAgICAgICB1bmRlZmluZWQgOlxuICAgICAgICByZXQ7XG4gICAgfVxuICB9LFxuXG4gIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcbiAgICB2YXIgbmFtZSwgcHJvcE5hbWUsXG4gICAgICBpID0gMCxcbiAgICAgIGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApO1xuXG4gICAgaWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICAgIHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XG4gICAgICAgIHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG4gICAgICAgIC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcbiAgICAgICAgaWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcbiAgICAgICAgICAvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuICAgICAgICAgIGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGF0dHJIb29rczoge1xuICAgIHR5cGU6IHtcbiAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiYgalF1ZXJ5Lm5vZGVOYW1lKGVsZW0sIFwiaW5wdXRcIikgKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyB0aGUgdHlwZSBvbiBhIHJhZGlvIGJ1dHRvbiBhZnRlciB0aGUgdmFsdWUgcmVzZXRzIHRoZSB2YWx1ZSBpbiBJRTYtOVxuICAgICAgICAgIC8vIFJlc2V0IHZhbHVlIHRvIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZSBkdXJpbmcgY3JlYXRpb25cbiAgICAgICAgICB2YXIgdmFsID0gZWxlbS52YWx1ZTtcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG4gICAgICAgICAgaWYgKCB2YWwgKSB7XG4gICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgcHJvcEZpeDoge1xuICAgIFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuICAgIFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuICB9LFxuXG4gIHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcbiAgICB2YXIgcmV0LCBob29rcywgbm90eG1sLFxuICAgICAgblR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG4gICAgLy8gZG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuICAgIGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xuXG4gICAgaWYgKCBub3R4bWwgKSB7XG4gICAgICAvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG4gICAgICBuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuICAgICAgaG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG4gICAgfVxuXG4gICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgcmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIHJldCA6XG4gICAgICAgICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cbiAgICAgICAgcmV0IDpcbiAgICAgICAgZWxlbVsgbmFtZSBdO1xuICAgIH1cbiAgfSxcblxuICBwcm9wSG9va3M6IHtcbiAgICB0YWJJbmRleDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uaGFzQXR0cmlidXRlKCBcInRhYmluZGV4XCIgKSB8fCByZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCBlbGVtLmhyZWYgP1xuICAgICAgICAgIGVsZW0udGFiSW5kZXggOlxuICAgICAgICAgIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcbiAgICBpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcbiAgICAgIC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcbiAgICAgIGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lO1xuICB9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuICB2YXIgZ2V0dGVyID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cbiAgalF1ZXJ5LmV4cHIuYXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuICAgIHZhciBmbiA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGVbIG5hbWUgXSxcbiAgICAgIHJldCA9IGlzWE1MID9cbiAgICAgICAgdW5kZWZpbmVkIDpcbiAgICAgICAgLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cbiAgICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZSB0aGlzIGhhbmRsZXIgdG8gY2hlY2sgZXhpc3RlbmNlXG4gICAgICAgIChqUXVlcnkuZXhwci5hdHRySGFuZGxlWyBuYW1lIF0gPSB1bmRlZmluZWQpICE9XG4gICAgICAgICAgZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApID9cblxuICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA6XG4gICAgICAgICAgbnVsbDtcblxuICAgIC8vIFJlc3RvcmUgaGFuZGxlclxuICAgIGpRdWVyeS5leHByLmF0dHJIYW5kbGVbIG5hbWUgXSA9IGZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTkrXG4vLyBTZWxlY3RlZG5lc3MgZm9yIGFuIG9wdGlvbiBpbiBhbiBvcHRncm91cCBjYW4gYmUgaW5hY2N1cmF0ZVxuaWYgKCAhalF1ZXJ5LnN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG4gIGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgICBpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcbiAgICAgICAgcGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxualF1ZXJ5LmVhY2goW1xuICBcInRhYkluZGV4XCIsXG4gIFwicmVhZE9ubHlcIixcbiAgXCJtYXhMZW5ndGhcIixcbiAgXCJjZWxsU3BhY2luZ1wiLFxuICBcImNlbGxQYWRkaW5nXCIsXG4gIFwicm93U3BhblwiLFxuICBcImNvbFNwYW5cIixcbiAgXCJ1c2VNYXBcIixcbiAgXCJmcmFtZUJvcmRlclwiLFxuICBcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcbiAgalF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0pO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcbiAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG4gICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG4gICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuICAgICAgICByZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGlmICggIWpRdWVyeS5zdXBwb3J0LmNoZWNrT24gKSB7XG4gICAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAvLyBTdXBwb3J0OiBXZWJraXRcbiAgICAgIC8vIFwiXCIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBcIm9uXCIgaWYgYSB2YWx1ZSBpc24ndCBzcGVjaWZpZWRcbiAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBya2V5RXZlbnQgPSAvXmtleS8sXG4gIHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxjb250ZXh0bWVudSl8Y2xpY2svLFxuICByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcbiAgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkkLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICB9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cbiAgZ2xvYmFsOiB7fSxcblxuICBhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cbiAgICB2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG4gICAgICBldmVudHMsIHQsIGhhbmRsZU9iaixcbiAgICAgIHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcbiAgICAgIGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG4gICAgLy8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcbiAgICBpZiAoICFlbGVtRGF0YSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcbiAgICBpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcbiAgICAgIGhhbmRsZU9iakluID0gaGFuZGxlcjtcbiAgICAgIGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuICAgICAgc2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3RvcjtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcbiAgICBpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG4gICAgICBoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuICAgIH1cblxuICAgIC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3RcbiAgICBpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcbiAgICAgIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuICAgIH1cbiAgICBpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xuICAgICAgZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcbiAgICAgICAgLy8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcbiAgICAgICAgLy8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuICAgICAgICByZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gY29yZV9zdHJ1bmRlZmluZWQgJiYgKCFlIHx8IGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSkgP1xuICAgICAgICAgIGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZXZlbnRIYW5kbGUuZWxlbSwgYXJndW1lbnRzICkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgICAvLyBBZGQgZWxlbSBhcyBhIHByb3BlcnR5IG9mIHRoZSBoYW5kbGUgZm4gdG8gcHJldmVudCBhIG1lbW9yeSBsZWFrIHdpdGggSUUgbm9uLW5hdGl2ZSBldmVudHNcbiAgICAgIGV2ZW50SGFuZGxlLmVsZW0gPSBlbGVtO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcbiAgICB0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtcIlwiXTtcbiAgICB0ID0gdHlwZXMubGVuZ3RoO1xuICAgIHdoaWxlICggdC0tICkge1xuICAgICAgdG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcbiAgICAgIHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcbiAgICAgIG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG4gICAgICAvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcbiAgICAgIGlmICggIXR5cGUgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcbiAgICAgIHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG4gICAgICAvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcbiAgICAgIHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuICAgICAgLy8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cbiAgICAgIC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG4gICAgICBoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgb3JpZ1R5cGU6IG9yaWdUeXBlLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICBndWlkOiBoYW5kbGVyLmd1aWQsXG4gICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgbmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcbiAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG4gICAgICB9LCBoYW5kbGVPYmpJbiApO1xuXG4gICAgICAvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuICAgICAgaWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xuICAgICAgICBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG4gICAgICAgIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuICAgICAgICBpZiAoICFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgaWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIHNwZWNpYWwuYWRkICkge1xuICAgICAgICBzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuICAgICAgICBpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcbiAgICAgIGlmICggc2VsZWN0b3IgKSB7XG4gICAgICAgIGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuICAgICAgfVxuXG4gICAgICAvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG4gICAgICBqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxuICAgIGVsZW0gPSBudWxsO1xuICB9LFxuXG4gIC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuICByZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG4gICAgdmFyIGosIG9yaWdDb3VudCwgdG1wLFxuICAgICAgZXZlbnRzLCB0LCBoYW5kbGVPYmosXG4gICAgICBzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG4gICAgICBlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG4gICAgaWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcbiAgICB0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtcIlwiXTtcbiAgICB0ID0gdHlwZXMubGVuZ3RoO1xuICAgIHdoaWxlICggdC0tICkge1xuICAgICAgdG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcbiAgICAgIHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcbiAgICAgIG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG4gICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcbiAgICAgIGlmICggIXR5cGUgKSB7XG4gICAgICAgIGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcbiAgICAgIHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcbiAgICAgIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG4gICAgICB0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApO1xuXG4gICAgICAvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG4gICAgICBvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBqLS0gKSB7XG4gICAgICAgIGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cbiAgICAgICAgaWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuICAgICAgICAgICggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG4gICAgICAgICAgKCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuICAgICAgICAgICggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcbiAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuICAgICAgICAgIGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuICAgICAgICAgICAgaGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuICAgICAgICAgICAgc3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3RcbiAgICAgIC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuICAgICAgaWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcbiAgICAgICAgaWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcbiAgICAgICAgICBqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG4gICAgaWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG4gICAgICBkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuICAgICAgZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJldmVudHNcIiApO1xuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuICAgIHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG4gICAgICBldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcbiAgICAgIHR5cGUgPSBjb3JlX2hhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcbiAgICAgIG5hbWVzcGFjZXMgPSBjb3JlX2hhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG4gICAgY3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cbiAgICAvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuICAgIGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcbiAgICAgIC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcbiAgICAgIG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcbiAgICAgIHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG4gICAgICBuYW1lc3BhY2VzLnNvcnQoKTtcbiAgICB9XG4gICAgb250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuICAgIC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuICAgIGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuICAgICAgZXZlbnQgOlxuICAgICAgbmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cbiAgICAvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG4gICAgZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG4gICAgZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcbiAgICBldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xuICAgICAgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcbiAgICAgIG51bGw7XG5cbiAgICAvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcbiAgICBldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuICAgICAgZXZlbnQudGFyZ2V0ID0gZWxlbTtcbiAgICB9XG5cbiAgICAvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG4gICAgZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG4gICAgICBbIGV2ZW50IF0gOlxuICAgICAgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cbiAgICAvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG4gICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG4gICAgaWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG4gICAgLy8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcbiAgICBpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG4gICAgICBidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcbiAgICAgIGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG4gICAgICAgIGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgZm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuICAgICAgICBldmVudFBhdGgucHVzaCggY3VyICk7XG4gICAgICAgIHRtcCA9IGN1cjtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG4gICAgICBpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XG4gICAgICAgIGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG4gICAgICBldmVudC50eXBlID0gaSA+IDEgP1xuICAgICAgICBidWJibGVUeXBlIDpcbiAgICAgICAgc3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG4gICAgICAvLyBqUXVlcnkgaGFuZGxlclxuICAgICAgaGFuZGxlID0gKCBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiYgZGF0YV9wcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG4gICAgICBpZiAoIGhhbmRsZSApIHtcbiAgICAgICAgaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcbiAgICAgIH1cblxuICAgICAgLy8gTmF0aXZlIGhhbmRsZXJcbiAgICAgIGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuICAgICAgaWYgKCBoYW5kbGUgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICYmIGhhbmRsZS5hcHBseSAmJiBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApID09PSBmYWxzZSApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZXZlbnQudHlwZSA9IHR5cGU7XG5cbiAgICAvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG4gICAgaWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuICAgICAgaWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxuICAgICAgICBqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG4gICAgICAgIC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cbiAgICAgICAgLy8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuICAgICAgICBpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG4gICAgICAgICAgLy8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuICAgICAgICAgIHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG4gICAgICAgICAgaWYgKCB0bXAgKSB7XG4gICAgICAgICAgICBlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcbiAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcbiAgICAgICAgICBlbGVtWyB0eXBlIF0oKTtcbiAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKCB0bXAgKSB7XG4gICAgICAgICAgICBlbGVtWyBvbnR5cGUgXSA9IHRtcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQucmVzdWx0O1xuICB9LFxuXG4gIGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cbiAgICAvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3RcbiAgICBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cbiAgICB2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG4gICAgICBoYW5kbGVyUXVldWUgPSBbXSxcbiAgICAgIGFyZ3MgPSBjb3JlX3NsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuICAgICAgaGFuZGxlcnMgPSAoIGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuICAgIC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG4gICAgYXJnc1swXSA9IGV2ZW50O1xuICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuICAgIC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcbiAgICBpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgaGFuZGxlcnNcbiAgICBoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cbiAgICAvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuICAgIGkgPSAwO1xuICAgIHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cbiAgICAgIGogPSAwO1xuICAgICAgd2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG4gICAgICAgIC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3JcbiAgICAgICAgLy8gMikgaGF2ZSBuYW1lc3BhY2UocykgYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG4gICAgICAgIGlmICggIWV2ZW50Lm5hbWVzcGFjZV9yZSB8fCBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG4gICAgICAgICAgZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuICAgICAgICAgIGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuICAgICAgICAgIHJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyIClcbiAgICAgICAgICAgICAgLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuICAgICAgICAgIGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBpZiAoIChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuICAgIGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG4gICAgICBzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudC5yZXN1bHQ7XG4gIH0sXG5cbiAgaGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG4gICAgdmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuICAgICAgaGFuZGxlclF1ZXVlID0gW10sXG4gICAgICBkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcbiAgICAgIGN1ciA9IGV2ZW50LnRhcmdldDtcblxuICAgIC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcbiAgICAvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuICAgIC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxuICAgIGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcblxuICAgICAgZm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cbiAgICAgICAgLy8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG4gICAgICAgIGlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApIHtcbiAgICAgICAgICBtYXRjaGVzID0gW107XG4gICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG4gICAgICAgICAgICBoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG4gICAgICAgICAgICAvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuICAgICAgICAgICAgc2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cbiAgICAgICAgICAgIGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgbWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cbiAgICAgICAgICAgICAgICBqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDpcbiAgICAgICAgICAgICAgICBqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcbiAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG4gICAgaWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuICAgICAgaGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlclF1ZXVlO1xuICB9LFxuXG4gIC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG4gIHByb3BzOiBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxcblxuICBmaXhIb29rczoge30sXG5cbiAga2V5SG9va3M6IHtcbiAgICBwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLFxuICAgIGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuICAgICAgLy8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG4gICAgICBpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG4gICAgICAgIGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfSxcblxuICBtb3VzZUhvb2tzOiB7XG4gICAgcHJvcHM6IFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLFxuICAgIGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcbiAgICAgIHZhciBldmVudERvYywgZG9jLCBib2R5LFxuICAgICAgICBidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcbiAgICAgIGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG4gICAgICAgIGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgIGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgYm9keSA9IGV2ZW50RG9jLmJvZHk7XG5cbiAgICAgICAgZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuICAgICAgICBldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcbiAgICAgIC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG4gICAgICBpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICB9LFxuXG4gIGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgIGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG4gICAgdmFyIGksIHByb3AsIGNvcHksXG4gICAgICB0eXBlID0gZXZlbnQudHlwZSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBldmVudCxcbiAgICAgIGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cbiAgICBpZiAoICFmaXhIb29rICkge1xuICAgICAgdGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG4gICAgICAgIHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG4gICAgICAgIHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcbiAgICAgICAge307XG4gICAgfVxuICAgIGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cbiAgICBldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuICAgIGkgPSBjb3B5Lmxlbmd0aDtcbiAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgIHByb3AgPSBjb3B5WyBpIF07XG4gICAgICBldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXG4gICAgLy8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XG4gICAgaWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuICAgICAgZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZSA8IDI4XG4gICAgLy8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MylcbiAgICBpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmaXhIb29rLmZpbHRlcj8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcbiAgfSxcblxuICBzcGVjaWFsOiB7XG4gICAgbG9hZDoge1xuICAgICAgLy8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuICAgICAgbm9CdWJibGU6IHRydWVcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICAvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3RcbiAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcbiAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuICAgIH0sXG4gICAgYmx1cjoge1xuICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG4gICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcbiAgICB9LFxuICAgIGNsaWNrOiB7XG4gICAgICAvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuICAgICAgICAgIHRoaXMuY2xpY2soKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuICAgICAgX2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICAgICAgcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWZvcmV1bmxvYWQ6IHtcbiAgICAgIHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG4gICAgICAgIC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG4gICAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cbiAgICAgICAgaWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcbiAgICAvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG4gICAgLy8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG4gICAgLy8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG4gICAgdmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuICAgICAgbmV3IGpRdWVyeS5FdmVudCgpLFxuICAgICAgZXZlbnQsXG4gICAgICB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGlzU2ltdWxhdGVkOiB0cnVlLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiB7fVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCBidWJibGUgKSB7XG4gICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuICAgIH1cbiAgICBpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcbiAgaWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7XG4gIH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcbiAgaWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpICkge1xuICAgIHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG4gIH1cblxuICAvLyBFdmVudCBvYmplY3RcbiAgaWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG4gICAgdGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuICAgIHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG4gICAgLy8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcbiAgICAvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9ICggc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcbiAgICAgIHNyYy5nZXRQcmV2ZW50RGVmYXVsdCAmJiBzcmMuZ2V0UHJldmVudERlZmF1bHQoKSApID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlO1xuXG4gIC8vIEV2ZW50IHR5cGVcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnR5cGUgPSBzcmM7XG4gIH1cblxuICAvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuICBpZiAoIHByb3BzICkge1xuICAgIGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG4gIH1cblxuICAvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuICB0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuICAvLyBNYXJrIGl0IGFzIGZpeGVkXG4gIHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG4gIGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG4gIGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcbiAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuICAgIGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG4gICAgaWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH0sXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG4gICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTUrXG5qUXVlcnkuZWFjaCh7XG4gIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcbiAgalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcbiAgICBkZWxlZ2F0ZVR5cGU6IGZpeCxcbiAgICBiaW5kVHlwZTogZml4LFxuXG4gICAgaGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICB2YXIgcmV0LFxuICAgICAgICB0YXJnZXQgPSB0aGlzLFxuICAgICAgICByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcbiAgICAgICAgaGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG4gICAgICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG4gICAgICAvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuICAgICAgaWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHtcbiAgICAgICAgZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcbiAgICAgICAgcmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICBldmVudC50eXBlID0gZml4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH07XG59KTtcblxuLy8gQ3JlYXRlIFwiYnViYmxpbmdcIiBmb2N1cyBhbmQgYmx1ciBldmVudHNcbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXG5pZiAoICFqUXVlcnkuc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcbiAgalF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG4gICAgLy8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuICAgIHZhciBhdHRhY2hlcyA9IDAsXG4gICAgICBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICBqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XG4gICAgICB9O1xuXG4gICAgalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGF0dGFjaGVzKysgPT09IDAgKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGVhcmRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIC0tYXR0YWNoZXMgPT09IDAgKSB7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXG4gIG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHtcbiAgICB2YXIgb3JpZ0ZuLCB0eXBlO1xuXG4gICAgLy8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG4gICAgaWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG4gICAgICAgIC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcbiAgICAgICAgZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZm9yICggdHlwZSBpbiB0eXBlcyApIHtcbiAgICAgICAgdGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcbiAgICAgIC8vICggdHlwZXMsIGZuIClcbiAgICAgIGZuID0gc2VsZWN0b3I7XG4gICAgICBkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcbiAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuICAgICAgICAvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuICAgICAgICBmbiA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG4gICAgICAgIGZuID0gZGF0YTtcbiAgICAgICAgZGF0YSA9IHNlbGVjdG9yO1xuICAgICAgICBzZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCBmbiA9PT0gZmFsc2UgKSB7XG4gICAgICBmbiA9IHJldHVybkZhbHNlO1xuICAgIH0gZWxzZSBpZiAoICFmbiApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICggb25lID09PSAxICkge1xuICAgICAgb3JpZ0ZuID0gZm47XG4gICAgICBmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICAgICAgLy8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG4gICAgICAgIGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcbiAgICAgICAgcmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICB9O1xuICAgICAgLy8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cbiAgICAgIGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgIGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSxcbiAgb25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuICB9LFxuICBvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuICAgIHZhciBoYW5kbGVPYmosIHR5cGU7XG4gICAgaWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG4gICAgICAvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG4gICAgICBoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG4gICAgICBqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuICAgICAgICBoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxuICAgICAgICBoYW5kbGVPYmouc2VsZWN0b3IsXG4gICAgICAgIGhhbmRsZU9iai5oYW5kbGVyXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuICAgICAgLy8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcbiAgICAgIGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG4gICAgICAgIHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuICAgICAgLy8gKCB0eXBlcyBbLCBmbl0gKVxuICAgICAgZm4gPSBzZWxlY3RvcjtcbiAgICAgIHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIGZuID09PSBmYWxzZSApIHtcbiAgICAgIGZuID0gcmV0dXJuRmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG4gICAgfSk7XG4gIH0sXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcbiAgICB2YXIgZWxlbSA9IHRoaXNbMF07XG4gICAgaWYgKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG4gICAgfVxuICB9XG59KTtcbnZhciBpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLyxcbiAgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG4gIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsXG4gIC8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG4gIGd1YXJhbnRlZWRVbmlxdWUgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgY29udGVudHM6IHRydWUsXG4gICAgbmV4dDogdHJ1ZSxcbiAgICBwcmV2OiB0cnVlXG4gIH07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgdmFyIGksXG4gICAgICByZXQgPSBbXSxcbiAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgbGVuID0gc2VsZi5sZW5ndGg7XG5cbiAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICBpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pICk7XG4gICAgfVxuXG4gICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcbiAgICB9XG5cbiAgICAvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcbiAgICByZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG4gICAgcmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG4gICAgdmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuICAgICAgbCA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgZm9yICggOyBpIDwgbDsgaSsrICkge1xuICAgICAgICBpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1tpXSApICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlKSApO1xuICB9LFxuXG4gIGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuICEhd2lubm93KFxuICAgICAgdGhpcyxcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuICAgICAgLy8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuICAgICAgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG4gICAgICAgIGpRdWVyeSggc2VsZWN0b3IgKSA6XG4gICAgICAgIHNlbGVjdG9yIHx8IFtdLFxuICAgICAgZmFsc2VcbiAgICApLmxlbmd0aDtcbiAgfSxcblxuICBjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuICAgIHZhciBjdXIsXG4gICAgICBpID0gMCxcbiAgICAgIGwgPSB0aGlzLmxlbmd0aCxcbiAgICAgIG1hdGNoZWQgPSBbXSxcbiAgICAgIHBvcyA9ICggcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICkgP1xuICAgICAgICBqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG4gICAgICAgIDA7XG5cbiAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgICBmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcbiAgICAgICAgLy8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG4gICAgICAgIGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XG4gICAgICAgICAgcG9zLmluZGV4KGN1cikgPiAtMSA6XG5cbiAgICAgICAgICAvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcbiAgICAgICAgICBjdXIubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICAgICAgIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpICkge1xuXG4gICAgICAgICAgY3VyID0gbWF0Y2hlZC5wdXNoKCBjdXIgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuICB9LFxuXG4gIC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW5cbiAgLy8gdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzXG4gIGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgIC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG4gICAgaWYgKCAhZWxlbSApIHtcbiAgICAgIHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcbiAgICB9XG5cbiAgICAvLyBpbmRleCBpbiBzZWxlY3RvclxuICAgIGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICByZXR1cm4gY29yZV9pbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcbiAgICB9XG5cbiAgICAvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcbiAgICByZXR1cm4gY29yZV9pbmRleE9mLmNhbGwoIHRoaXMsXG5cbiAgICAgIC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuICAgICAgZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG4gICAgKTtcbiAgfSxcblxuICBhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcbiAgICB2YXIgc2V0ID0gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID9cbiAgICAgICAgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIDpcbiAgICAgICAgalF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IgJiYgc2VsZWN0b3Iubm9kZVR5cGUgPyBbIHNlbGVjdG9yIF0gOiBzZWxlY3RvciApLFxuICAgICAgYWxsID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBzZXQgKTtcblxuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LnVuaXF1ZShhbGwpICk7XG4gIH0sXG5cbiAgYWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICAgIHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG4gICAgICB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuICAgICk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcbiAgd2hpbGUgKCAoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cbiAgcmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuICBwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcbiAgfSxcbiAgcGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG4gIH0sXG4gIHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcbiAgfSxcbiAgbmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuICB9LFxuICBwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuICB9LFxuICBuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG4gIH0sXG4gIHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG4gIH0sXG4gIG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG4gIH0sXG4gIHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuICB9LFxuICBzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcbiAgfSxcbiAgY2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG4gIH0sXG4gIGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG4gIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcbiAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuICAgIHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cbiAgICBpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcbiAgICAgIHNlbGVjdG9yID0gdW50aWw7XG4gICAgfVxuXG4gICAgaWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICBtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcbiAgICB9XG5cbiAgICBpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcbiAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzXG4gICAgICBpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG4gICAgICAgIGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcbiAgICAgIGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcbiAgICAgICAgbWF0Y2hlZC5yZXZlcnNlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG4gIH07XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIGZpbHRlcjogZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG4gICAgdmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG4gICAgaWYgKCBub3QgKSB7XG4gICAgICBleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG4gICAgICBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuICAgICAgalF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG4gICAgICB9KSk7XG4gIH0sXG5cbiAgZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcbiAgICB2YXIgbWF0Y2hlZCA9IFtdLFxuICAgICAgdHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG4gICAgd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICBpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoZWQucHVzaCggZWxlbSApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlZDtcbiAgfSxcblxuICBzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcbiAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuXG4gICAgZm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcbiAgICAgIGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuICAgICAgICBtYXRjaGVkLnB1c2goIG4gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hlZDtcbiAgfVxufSk7XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcbiAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG4gICAgICAvKiBqc2hpbnQgLVcwMTggKi9cbiAgICAgIHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcbiAgICB9KTtcblxuICB9XG5cbiAgaWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuICAgIH0pO1xuXG4gIH1cblxuICBpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgaWYgKCBpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcbiAgICAgIHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbiAgICB9XG5cbiAgICBxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG4gIH1cblxuICByZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gKCBjb3JlX2luZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPj0gMCApICE9PSBub3Q7XG4gIH0pO1xufVxudmFyIHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcbiAgcnRhZ05hbWUgPSAvPChbXFx3Ol0rKS8sXG4gIHJodG1sID0gLzx8JiM/XFx3KzsvLFxuICBybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuICBtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSxcbiAgLy8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG4gIHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcbiAgcnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxuICByc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuICByY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXG5cbiAgLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbiAgd3JhcE1hcCA9IHtcblxuICAgIC8vIFN1cHBvcnQ6IElFIDlcbiAgICBvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuICAgIHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcbiAgICBjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuICAgIHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcbiAgICB0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cbiAgICBfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbiAgfTtcblxuLy8gU3VwcG9ydDogSUUgOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICB0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5hY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgalF1ZXJ5LnRleHQoIHRoaXMgKSA6XG4gICAgICAgIHRoaXMuZW1wdHkoKS5hcHBlbmQoICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkuY3JlYXRlVGV4dE5vZGUoIHZhbHVlICkgKTtcbiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICBpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgYmVmb3JlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuICAgICAgICB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgYWZ0ZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgaWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvLyBrZWVwRGF0YSBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHktLWRvIG5vdCBkb2N1bWVudFxuICByZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG4gICAgdmFyIGVsZW0sXG4gICAgICBlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG4gICAgICBpID0gMDtcblxuICAgIGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuICAgICAgaWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICAgICAgalF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcbiAgICAgICAgICBzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuICAgICAgICB9XG4gICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbSxcbiAgICAgIGkgPSAwO1xuXG4gICAgZm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcbiAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuICAgICAgICAvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuICAgICAgICBlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuICAgIGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG4gICAgZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG4gICAgcmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuICAgIH0pO1xuICB9LFxuXG4gIGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICByZXR1cm4gZWxlbS5pbm5lckhUTUw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcbiAgICAgIGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuICAgICAgICAhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICAgIGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcbiAgICAgICAgICAgICAgZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtID0gMDtcblxuICAgICAgICAvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcbiAgICAgICAgfSBjYXRjaCggZSApIHt9XG4gICAgICB9XG5cbiAgICAgIGlmICggZWxlbSApIHtcbiAgICAgICAgdGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcbiAgICAgIH1cbiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcbiAgICB2YXJcbiAgICAgIC8vIFNuYXBzaG90IHRoZSBET00gaW4gY2FzZSAuZG9tTWFuaXAgc3dlZXBzIHNvbWV0aGluZyByZWxldmFudCBpbnRvIGl0cyBmcmFnbWVudFxuICAgICAgYXJncyA9IGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gWyBlbGVtLm5leHRTaWJsaW5nLCBlbGVtLnBhcmVudE5vZGUgXTtcbiAgICAgIH0pLFxuICAgICAgaSA9IDA7XG5cbiAgICAvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcbiAgICB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgdmFyIG5leHQgPSBhcmdzWyBpKysgXSxcbiAgICAgICAgcGFyZW50ID0gYXJnc1sgaSsrIF07XG5cbiAgICAgIGlmICggcGFyZW50ICkge1xuICAgICAgICAvLyBEb24ndCB1c2UgdGhlIHNuYXBzaG90IG5leHQgaWYgaXQgaGFzIG1vdmVkICgjMTM4MTApXG4gICAgICAgIGlmICggbmV4dCAmJiBuZXh0LnBhcmVudE5vZGUgIT09IHBhcmVudCApIHtcbiAgICAgICAgICBuZXh0ID0gdGhpcy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICBqUXVlcnkoIHRoaXMgKS5yZW1vdmUoKTtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSggZWxlbSwgbmV4dCApO1xuICAgICAgfVxuICAgIC8vIEFsbG93IG5ldyBjb250ZW50IHRvIGluY2x1ZGUgZWxlbWVudHMgZnJvbSB0aGUgY29udGV4dCBzZXRcbiAgICB9LCB0cnVlICk7XG5cbiAgICAvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXG4gICAgcmV0dXJuIGkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcbiAgfSxcblxuICBkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XG4gIH0sXG5cbiAgZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjaywgYWxsb3dJbnRlcnNlY3Rpb24gKSB7XG5cbiAgICAvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG4gICAgYXJncyA9IGNvcmVfY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG4gICAgdmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuICAgICAgaSA9IDAsXG4gICAgICBsID0gdGhpcy5sZW5ndGgsXG4gICAgICBzZXQgPSB0aGlzLFxuICAgICAgaU5vQ2xvbmUgPSBsIC0gMSxcbiAgICAgIHZhbHVlID0gYXJnc1sgMCBdLFxuICAgICAgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG4gICAgLy8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG4gICAgaWYgKCBpc0Z1bmN0aW9uIHx8ICEoIGwgPD0gMSB8fCB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgfHwgalF1ZXJ5LnN1cHBvcnQuY2hlY2tDbG9uZSB8fCAhcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG4gICAgICAgIHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuICAgICAgICBpZiAoIGlzRnVuY3Rpb24gKSB7XG4gICAgICAgICAgYXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2ssIGFsbG93SW50ZXJzZWN0aW9uICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIGwgKSB7XG4gICAgICBmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsICFhbGxvd0ludGVyc2VjdGlvbiAmJiB0aGlzICk7XG4gICAgICBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICAgIGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG4gICAgICAgIGZyYWdtZW50ID0gZmlyc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmICggZmlyc3QgKSB7XG4gICAgICAgIHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcbiAgICAgICAgaGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW0gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG4gICAgICAgIC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG4gICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICBub2RlID0gZnJhZ21lbnQ7XG5cbiAgICAgICAgICBpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuICAgICAgICAgICAgbm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG4gICAgICAgICAgICAvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG4gICAgICAgICAgICBpZiAoIGhhc1NjcmlwdHMgKSB7XG4gICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG4gICAgICAgICAgICAgIC8vIGpRdWVyeS5tZXJnZSBiZWNhdXNlIGNvcmVfcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuICAgICAgICAgICAgICBqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGhhc1NjcmlwdHMgKSB7XG4gICAgICAgICAgZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuICAgICAgICAgIC8vIFJlZW5hYmxlIHNjcmlwdHNcbiAgICAgICAgICBqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cbiAgICAgICAgICAvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG4gICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG4gICAgICAgICAgICBub2RlID0gc2NyaXB0c1sgaSBdO1xuICAgICAgICAgICAgaWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG4gICAgICAgICAgICAgICFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cbiAgICAgICAgICAgICAgaWYgKCBub2RlLnNyYyApIHtcbiAgICAgICAgICAgICAgICAvLyBIb3BlIGFqYXggaXMgYXZhaWxhYmxlLi4uXG4gICAgICAgICAgICAgICAgalF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcbiAgYXBwZW5kVG86IFwiYXBwZW5kXCIsXG4gIHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG4gIGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcbiAgaW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcbiAgcmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG4gIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICAgIHZhciBlbGVtcyxcbiAgICAgIHJldCA9IFtdLFxuICAgICAgaW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuICAgICAgbGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuICAgICAgaSA9IDA7XG5cbiAgICBmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuICAgICAgZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcbiAgICAgIGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuICAgICAgLy8gU3VwcG9ydDogUXRXZWJLaXRcbiAgICAgIC8vIC5nZXQoKSBiZWNhdXNlIGNvcmVfcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuICAgICAgY29yZV9wdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcbiAgfTtcbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcbiAgY2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcbiAgICB2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcbiAgICAgIGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcbiAgICAgIGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cbiAgICAvLyBTdXBwb3J0OiBJRSA+PSA5XG4gICAgLy8gRml4IENsb25pbmcgaXNzdWVzXG4gICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiYgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG4gICAgICAvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuICAgICAgZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuICAgICAgc3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuICAgICAgZm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgIGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcbiAgICBpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG4gICAgICBpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuICAgICAgICBzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuICAgICAgICBkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG4gICAgICAgIGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuICAgICAgICAgIGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG4gICAgZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuICAgIGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG4gICAgICBzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcbiAgICByZXR1cm4gY2xvbmU7XG4gIH0sXG5cbiAgYnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XG4gICAgdmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcbiAgICAgIGkgPSAwLFxuICAgICAgbCA9IGVsZW1zLmxlbmd0aCxcbiAgICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBub2RlcyA9IFtdO1xuXG4gICAgZm9yICggOyBpIDwgbDsgaSsrICkge1xuICAgICAgZWxlbSA9IGVsZW1zWyBpIF07XG5cbiAgICAgIGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG4gICAgICAgIC8vIEFkZCBub2RlcyBkaXJlY3RseVxuICAgICAgICBpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydDogUXRXZWJLaXRcbiAgICAgICAgICAvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBjb3JlX3B1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3NcbiAgICAgICAgICBqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cbiAgICAgICAgLy8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG4gICAgICAgICAgbm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cbiAgICAgICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcblxuICAgICAgICAgIC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cbiAgICAgICAgICB0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbXCJcIiwgXCJcIl0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgd3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG4gICAgICAgICAgdG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICkgKyB3cmFwWyAyIF07XG5cbiAgICAgICAgICAvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcbiAgICAgICAgICBqID0gd3JhcFsgMCBdO1xuICAgICAgICAgIHdoaWxlICggai0tICkge1xuICAgICAgICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdXBwb3J0OiBRdFdlYktpdFxuICAgICAgICAgIC8vIGpRdWVyeS5tZXJnZSBiZWNhdXNlIGNvcmVfcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuICAgICAgICAgIGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cbiAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuICAgICAgICAgIHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICAgICAgICAvLyBGaXhlcyAjMTIzNDZcbiAgICAgICAgICAvLyBTdXBwb3J0OiBXZWJraXQsIElFXG4gICAgICAgICAgdG1wLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgICBmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBpID0gMDtcbiAgICB3aGlsZSAoIChlbGVtID0gbm9kZXNbIGkrKyBdKSApIHtcblxuICAgICAgLy8gIzQwODcgLSBJZiBvcmlnaW4gYW5kIGRlc3RpbmF0aW9uIGVsZW1lbnRzIGFyZSB0aGUgc2FtZSwgYW5kIHRoaXMgaXNcbiAgICAgIC8vIHRoYXQgZWxlbWVudCwgZG8gbm90IGRvIGFueXRoaW5nXG4gICAgICBpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG4gICAgICAvLyBBcHBlbmQgdG8gZnJhZ21lbnRcbiAgICAgIHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG4gICAgICAvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG4gICAgICBpZiAoIGNvbnRhaW5zICkge1xuICAgICAgICBzZXRHbG9iYWxFdmFsKCB0bXAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuICAgICAgaWYgKCBzY3JpcHRzICkge1xuICAgICAgICBqID0gMDtcbiAgICAgICAgd2hpbGUgKCAoZWxlbSA9IHRtcFsgaisrIF0pICkge1xuICAgICAgICAgIGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcbiAgICAgICAgICAgIHNjcmlwdHMucHVzaCggZWxlbSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfSxcblxuICBjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgZGF0YSwgZWxlbSwgZXZlbnRzLCB0eXBlLCBrZXksIGosXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG4gICAgICBpID0gMDtcblxuICAgIGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG4gICAgICBpZiAoIERhdGEuYWNjZXB0cyggZWxlbSApICkge1xuICAgICAgICBrZXkgPSBlbGVtWyBkYXRhX3ByaXYuZXhwYW5kbyBdO1xuXG4gICAgICAgIGlmICgga2V5ICYmIChkYXRhID0gZGF0YV9wcml2LmNhY2hlWyBrZXkgXSkgKSB7XG4gICAgICAgICAgZXZlbnRzID0gT2JqZWN0LmtleXMoIGRhdGEuZXZlbnRzIHx8IHt9ICk7XG4gICAgICAgICAgaWYgKCBldmVudHMubGVuZ3RoICkge1xuICAgICAgICAgICAgZm9yICggaiA9IDA7ICh0eXBlID0gZXZlbnRzW2pdKSAhPT0gdW5kZWZpbmVkOyBqKysgKSB7XG4gICAgICAgICAgICAgIGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggZGF0YV9wcml2LmNhY2hlWyBrZXkgXSApIHtcbiAgICAgICAgICAgIC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgcHJpdmF0ZWAgZGF0YVxuICAgICAgICAgICAgZGVsZXRlIGRhdGFfcHJpdi5jYWNoZVsga2V5IF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHVzZXJgIGRhdGFcbiAgICAgIGRlbGV0ZSBkYXRhX3VzZXIuY2FjaGVbIGVsZW1bIGRhdGFfdXNlci5leHBhbmRvIF0gXTtcbiAgICB9XG4gIH0sXG5cbiAgX2V2YWxVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5hamF4KHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgZ2xvYmFsOiBmYWxzZSxcbiAgICAgIFwidGhyb3dzXCI6IHRydWVcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcbiAgcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcbiAgICBqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgPT09IDEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cbiAgICBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcbiAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG4gICAgZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcbiAgZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcbiAgcmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuICB2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuICBpZiAoIG1hdGNoICkge1xuICAgIGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG4gIH0gZWxzZSB7XG4gICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuICB2YXIgbCA9IGVsZW1zLmxlbmd0aCxcbiAgICBpID0gMDtcblxuICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgZGF0YV9wcml2LnNldChcbiAgICAgIGVsZW1zWyBpIF0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YV9wcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcbiAgdmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cbiAgaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG4gIGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xuICAgIHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XG4gICAgcGRhdGFDdXIgPSBkYXRhX3ByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuICAgIGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuICAgIGlmICggZXZlbnRzICkge1xuICAgICAgZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcbiAgICAgIHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG4gICAgICBmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcbiAgICAgICAgZm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgICAgalF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gMi4gQ29weSB1c2VyIGRhdGFcbiAgaWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XG4gICAgdWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcbiAgICB1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG4gICAgZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuICB2YXIgcmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcbiAgICAgIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCA/IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuICAgICAgW107XG5cbiAgcmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cbiAgICBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG4gICAgcmV0O1xufVxuXG4vLyBTdXBwb3J0OiBJRSA+PSA5XG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuICB2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG4gIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiBtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcbiAgICBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuICAvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuICB9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG4gICAgZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuICB9XG59XG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgd3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG4gICAgdmFyIHdyYXA7XG5cbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuICAgICAgICBqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICggdGhpc1sgMCBdICkge1xuXG4gICAgICAvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuICAgICAgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cbiAgICAgIGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcbiAgICAgIH1cblxuICAgICAgd3JhcC5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlbGVtID0gdGhpcztcblxuICAgICAgICB3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG4gICAgICAgICAgZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgIH0pLmFwcGVuZCggdGhpcyApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcbiAgICAgICAgalF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuICAgICAgICBjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuICAgICAgaWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG4gICAgICAgIGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5hcHBlbmQoIGh0bWwgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuICAgICAgalF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwgKTtcbiAgICB9KTtcbiAgfSxcblxuICB1bndyYXA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcbiAgICAgIH1cbiAgICB9KS5lbmQoKTtcbiAgfVxufSk7XG52YXIgY3VyQ1NTLCBpZnJhbWUsXG4gIC8vIHN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGUgZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG4gIC8vIHNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuICByZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG4gIHJtYXJnaW4gPSAvXm1hcmdpbi8sXG4gIHJudW1zcGxpdCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIGNvcmVfcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG4gIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIGNvcmVfcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICksXG4gIHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgY29yZV9wbnVtICsgXCIpXCIsIFwiaVwiICksXG4gIGVsZW1kaXNwbGF5ID0geyBCT0RZOiBcImJsb2NrXCIgfSxcblxuICBjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcbiAgY3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgZm9udFdlaWdodDogNDAwXG4gIH0sXG5cbiAgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF0sXG4gIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XG5cbi8vIHJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBzdHlsZSwgbmFtZSApIHtcblxuICAvLyBzaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuICBpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cblxuICAvLyBjaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG4gIHZhciBjYXBOYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG4gICAgb3JpZ05hbWUgPSBuYW1lLFxuICAgIGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCBpLS0gKSB7XG4gICAgbmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuICAgIGlmICggbmFtZSBpbiBzdHlsZSApIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcmlnTmFtZTtcbn1cblxuZnVuY3Rpb24gaXNIaWRkZW4oIGVsZW0sIGVsICkge1xuICAvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuICAvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcbiAgZWxlbSA9IGVsIHx8IGVsZW07XG4gIHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcbn1cblxuLy8gTk9URTogd2UndmUgaW5jbHVkZWQgdGhlIFwid2luZG93XCIgaW4gd2luZG93LmdldENvbXB1dGVkU3R5bGVcbi8vIGJlY2F1c2UganNkb20gb24gbm9kZS5qcyB3aWxsIGJyZWFrIHdpdGhvdXQgaXQuXG5mdW5jdGlvbiBnZXRTdHlsZXMoIGVsZW0gKSB7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG4gIHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG4gICAgdmFsdWVzID0gW10sXG4gICAgaW5kZXggPSAwLFxuICAgIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICBmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuICAgIGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcbiAgICBpZiAoICFlbGVtLnN0eWxlICkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcbiAgICBkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICggc2hvdyApIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcbiAgICAgIC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3RcbiAgICAgIGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcbiAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuICAgICAgLy8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcbiAgICAgIC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcbiAgICAgIGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG4gICAgICAgIHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBjc3NfZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG4gICAgICAgIGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cbiAgICAgICAgaWYgKCBkaXNwbGF5ICYmIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG4gICAgICAgICAgZGF0YV9wcml2LnNldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKGVsZW0sIFwiZGlzcGxheVwiKSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3BcbiAgLy8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuICBmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuICAgIGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcbiAgICBpZiAoICFlbGVtLnN0eWxlICkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG4gICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuICAgICAgdmFyIHN0eWxlcywgbGVuLFxuICAgICAgICBtYXAgPSB7fSxcbiAgICAgICAgaSA9IDA7XG5cbiAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcbiAgICAgICAgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG4gICAgICAgIGxlbiA9IG5hbWUubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICAgIG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgalF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcbiAgICAgICAgalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuICAgIH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuICB9LFxuICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcbiAgfSxcbiAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG4gIH0sXG4gIHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuICAgIGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcbiAgICAgIHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcbiAgICAgICAgalF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgalF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuICAvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcbiAgY3NzSG9va3M6IHtcbiAgICBvcGFjaXR5OiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcbiAgICAgICAgaWYgKCBjb21wdXRlZCApIHtcbiAgICAgICAgICAvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuICAgICAgICAgIHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG4gICAgICAgICAgcmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG4gIGNzc051bWJlcjoge1xuICAgIFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcbiAgICBcImZpbGxPcGFjaXR5XCI6IHRydWUsXG4gICAgXCJmb250V2VpZ2h0XCI6IHRydWUsXG4gICAgXCJsaW5lSGVpZ2h0XCI6IHRydWUsXG4gICAgXCJvcGFjaXR5XCI6IHRydWUsXG4gICAgXCJvcmRlclwiOiB0cnVlLFxuICAgIFwib3JwaGFuc1wiOiB0cnVlLFxuICAgIFwid2lkb3dzXCI6IHRydWUsXG4gICAgXCJ6SW5kZXhcIjogdHJ1ZSxcbiAgICBcInpvb21cIjogdHJ1ZVxuICB9LFxuXG4gIC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcbiAgLy8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuICBjc3NQcm9wczoge1xuICAgIC8vIG5vcm1hbGl6ZSBmbG9hdCBjc3MgcHJvcGVydHlcbiAgICBcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuICB9LFxuXG4gIC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG4gIHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuICAgIC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuICAgIGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuICAgIHZhciByZXQsIHR5cGUsIGhvb2tzLFxuICAgICAgb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG4gICAgICBzdHlsZSA9IGVsZW0uc3R5bGU7XG5cbiAgICBuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XG5cbiAgICAvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uXG4gICAgLy8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvblxuICAgIGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG4gICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgICAgLy8gY29udmVydCByZWxhdGl2ZSBudW1iZXIgc3RyaW5ncyAoKz0gb3IgLT0pIHRvIHJlbGF0aXZlIG51bWJlcnMuICM3MzQ1XG4gICAgICBpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG4gICAgICAgIHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcbiAgICAgICAgLy8gRml4ZXMgYnVnICM5MjM3XG4gICAgICAgIHR5cGUgPSBcIm51bWJlclwiO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCBOYU4gYW5kIG51bGwgdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTZcbiAgICAgIGlmICggdmFsdWUgPT0gbnVsbCB8fCB0eXBlID09PSBcIm51bWJlclwiICYmIGlzTmFOKCB2YWx1ZSApICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuICAgICAgaWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuICAgICAgICB2YWx1ZSArPSBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpeGVzICM4OTA4LCBpdCBjYW4gYmUgZG9uZSBtb3JlIGNvcnJlY3RseSBieSBzcGVjaWZ5aW5nIHNldHRlcnMgaW4gY3NzSG9va3MsXG4gICAgICAvLyBidXQgaXQgd291bGQgbWVhbiB0byBkZWZpbmUgZWlnaHQgKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xuICAgICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZihcImJhY2tncm91bmRcIikgPT09IDAgKSB7XG4gICAgICAgIHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG4gICAgICBpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcbiAgICAgIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3RcbiAgICAgIHJldHVybiBzdHlsZVsgbmFtZSBdO1xuICAgIH1cbiAgfSxcblxuICBjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuICAgIHZhciB2YWwsIG51bSwgaG9va3MsXG4gICAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuICAgIG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xuXG4gICAgLy8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuICAgIC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cbiAgICBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuICAgIC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG4gICAgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuICAgICAgdmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG4gICAgaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG4gICAgfVxuXG4gICAgLy9jb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcbiAgICBpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcbiAgICAgIHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuICAgIH1cblxuICAgIC8vIFJldHVybiwgY29udmVydGluZyB0byBudW1iZXIgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcbiAgICBpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuICAgICAgbnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG4gICAgICByZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxufSk7XG5cbmN1ckNTUyA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBfY29tcHV0ZWQgKSB7XG4gIHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLFxuICAgIGNvbXB1dGVkID0gX2NvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApLFxuXG4gICAgLy8gU3VwcG9ydDogSUU5XG4gICAgLy8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XG4gICAgcmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZCxcbiAgICBzdHlsZSA9IGVsZW0uc3R5bGU7XG5cbiAgaWYgKCBjb21wdXRlZCApIHtcblxuICAgIGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuICAgICAgcmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydDogU2FmYXJpIDUuMVxuICAgIC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcbiAgICAvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcbiAgICAvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcbiAgICBpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgICAgd2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgIG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG4gICAgICBtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG4gICAgICAvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG4gICAgICBzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG4gICAgICByZXQgPSBjb21wdXRlZC53aWR0aDtcblxuICAgICAgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuICAgICAgc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgIHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG4gICAgICBzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG4gIHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG4gIHJldHVybiBtYXRjaGVzID9cbiAgICAvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuICAgIE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuICAgIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG4gIHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG4gICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG4gICAgNCA6XG4gICAgLy8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuICAgIG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG4gICAgdmFsID0gMDtcblxuICBmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG4gICAgLy8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuICAgIGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG4gICAgICB2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG4gICAgfVxuXG4gICAgaWYgKCBpc0JvcmRlckJveCApIHtcbiAgICAgIC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuICAgICAgaWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG4gICAgICAgIHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcbiAgICAgIGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG4gICAgICAgIHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuICAgICAgdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG4gICAgICAvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG4gICAgICBpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcbiAgICAgICAgdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cbiAgLy8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcbiAgdmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuICAgIHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcbiAgICBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcbiAgICBpc0JvcmRlckJveCA9IGpRdWVyeS5zdXBwb3J0LmJveFNpemluZyAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG4gIC8vIHNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuICAvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcbiAgLy8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG4gIGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG4gICAgLy8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG4gICAgdmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcbiAgICBpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG4gICAgICB2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cbiAgICBpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIC8vIHdlIG5lZWQgdGhlIGNoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG4gICAgLy8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuICAgIHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJiAoIGpRdWVyeS5zdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cbiAgICAvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG4gICAgdmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcbiAgfVxuXG4gIC8vIHVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG4gIHJldHVybiAoIHZhbCArXG4gICAgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG4gICAgICBlbGVtLFxuICAgICAgbmFtZSxcbiAgICAgIGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcbiAgICAgIHZhbHVlSXNCb3JkZXJCb3gsXG4gICAgICBzdHlsZXNcbiAgICApXG4gICkgKyBcInB4XCI7XG59XG5cbi8vIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG5mdW5jdGlvbiBjc3NfZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQsXG4gICAgZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG4gIGlmICggIWRpc3BsYXkgKSB7XG4gICAgZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuICAgIC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuICAgIGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG4gICAgICAvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcbiAgICAgIGlmcmFtZSA9ICggaWZyYW1lIHx8XG4gICAgICAgIGpRdWVyeShcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIilcbiAgICAgICAgLmNzcyggXCJjc3NUZXh0XCIsIFwiZGlzcGxheTpibG9jayAhaW1wb3J0YW50XCIgKVxuICAgICAgKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG4gICAgICAvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2VcbiAgICAgIGRvYyA9ICggaWZyYW1lWzBdLmNvbnRlbnRXaW5kb3cgfHwgaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCApLmRvY3VtZW50O1xuICAgICAgZG9jLndyaXRlKFwiPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+XCIpO1xuICAgICAgZG9jLmNsb3NlKCk7XG5cbiAgICAgIGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG4gICAgICBpZnJhbWUuZGV0YWNoKCk7XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG4gICAgZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuICB9XG5cbiAgcmV0dXJuIGRpc3BsYXk7XG59XG5cbi8vIENhbGxlZCBPTkxZIGZyb20gd2l0aGluIGNzc19kZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuICB2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuICAgIGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtWzBdLCBcImRpc3BsYXlcIiApO1xuICBlbGVtLnJlbW92ZSgpO1xuICByZXR1cm4gZGlzcGxheTtcbn1cblxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG4gIGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcbiAgICAgIGlmICggY29tcHV0ZWQgKSB7XG4gICAgICAgIC8vIGNlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuICAgICAgICAvLyBob3dldmVyLCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0IGZyb20gdGhpc1xuICAgICAgICByZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCAmJiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApID9cbiAgICAgICAgICBqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcbiAgICAgICAgICB9KSA6XG4gICAgICAgICAgZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuICAgICAgdmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xuICAgICAgcmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xuICAgICAgICBhdWdtZW50V2lkdGhPckhlaWdodChcbiAgICAgICAgICBlbGVtLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgZXh0cmEsXG4gICAgICAgICAgalF1ZXJ5LnN1cHBvcnQuYm94U2l6aW5nICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgc3R5bGVzXG4gICAgICAgICkgOiAwXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBUaGVzZSBob29rcyBjYW5ub3QgYmUgYWRkZWQgdW50aWwgRE9NIHJlYWR5IGJlY2F1c2UgdGhlIHN1cHBvcnQgdGVzdFxuLy8gZm9yIGl0IGlzIG5vdCBydW4gdW50aWwgYWZ0ZXIgRE9NIHJlYWR5XG5qUXVlcnkoZnVuY3Rpb24oKSB7XG4gIC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4gIGlmICggIWpRdWVyeS5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQgKSB7XG4gICAgalF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG4gICAgICAgIGlmICggY29tcHV0ZWQgKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbiAgICAgICAgICAvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcbiAgICAgICAgICAvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2tcbiAgICAgICAgICByZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcbiAgICAgICAgICAgIGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuICAvLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0XG4gIC8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCB3ZSBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG4gIGlmICggIWpRdWVyeS5zdXBwb3J0LnBpeGVsUG9zaXRpb24gJiYgalF1ZXJ5LmZuLnBvc2l0aW9uICkge1xuICAgIGpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuICAgICAgalF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuICAgICAgICAgIGlmICggY29tcHV0ZWQgKSB7XG4gICAgICAgICAgICBjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuICAgICAgICAgICAgLy8gaWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuICAgICAgICAgICAgICBqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuICAgICAgICAgICAgICBjb21wdXRlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxufSk7XG5cbmlmICggalF1ZXJ5LmV4cHIgJiYgalF1ZXJ5LmV4cHIuZmlsdGVycyApIHtcbiAgalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuICAgIC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcbiAgICByZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IDw9IDA7XG4gIH07XG5cbiAgalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xuICB9O1xufVxuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCh7XG4gIG1hcmdpbjogXCJcIixcbiAgcGFkZGluZzogXCJcIixcbiAgYm9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcbiAgalF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcbiAgICBleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgZXhwYW5kZWQgPSB7fSxcblxuICAgICAgICAvLyBhc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcbiAgICAgICAgcGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbIHZhbHVlIF07XG5cbiAgICAgIGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcbiAgICAgICAgZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuICAgICAgICAgIHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4cGFuZGVkO1xuICAgIH1cbiAgfTtcblxuICBpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuICAgIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG4gIH1cbn0pO1xudmFyIHIyMCA9IC8lMjAvZyxcbiAgcmJyYWNrZXQgPSAvXFxbXFxdJC8sXG4gIHJDUkxGID0gL1xccj9cXG4vZyxcbiAgcnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuICByc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuICB9LFxuICBzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7XG4gICAgICAvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG4gICAgICB2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG4gICAgICByZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgLy8gVXNlIC5pcyhcIjpkaXNhYmxlZFwiKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuICAgICAgcmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuICAgICAgICByc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG4gICAgICAgICggdGhpcy5jaGVja2VkIHx8ICFtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICl7XG4gICAgICB2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cbiAgICAgIHJldHVybiB2YWwgPT0gbnVsbCA/XG4gICAgICAgIG51bGwgOlxuICAgICAgICBqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuICAgICAgICAgIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApe1xuICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcbiAgICAgICAgICB9KSA6XG4gICAgICAgICAgeyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuICAgIH0pLmdldCgpO1xuICB9XG59KTtcblxuLy9TZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy9rZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcbiAgdmFyIHByZWZpeCxcbiAgICBzID0gW10sXG4gICAgYWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG4gICAgICAvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcbiAgICAgIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG4gICAgICBzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuICAgIH07XG5cbiAgLy8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cbiAgaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuICB9XG5cbiAgLy8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cbiAgaWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcbiAgICAvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcbiAgICBqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG4gICAgICBhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcbiAgICAvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cbiAgICBmb3IgKCBwcmVmaXggaW4gYSApIHtcbiAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuICByZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcbiAgdmFyIG5hbWU7XG5cbiAgaWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG4gICAgalF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG4gICAgICBpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuICAgICAgICAvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG4gICAgICAgIGFkZCggcHJlZml4LCB2ICk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuICAgICAgICBidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcbiAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG4gICAgZm9yICggbmFtZSBpbiBvYmogKSB7XG4gICAgICBidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgLy8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuICAgIGFkZCggcHJlZml4LCBvYmogKTtcbiAgfVxufVxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcbiAgXCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG4gIFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG4gIC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG4gIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG4gICAgICB0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcbiAgICAgIHRoaXMudHJpZ2dlciggbmFtZSApO1xuICB9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG4gICAgcmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG4gIH0sXG5cbiAgYmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG4gIH0sXG4gIHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuICB9LFxuXG4gIGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuICB9LFxuICB1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcbiAgICAvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG4gIH1cbn0pO1xudmFyXG4gIC8vIERvY3VtZW50IGxvY2F0aW9uXG4gIGFqYXhMb2NQYXJ0cyxcbiAgYWpheExvY2F0aW9uLFxuXG4gIGFqYXhfbm9uY2UgPSBqUXVlcnkubm93KCksXG5cbiAgYWpheF9ycXVlcnkgPSAvXFw/LyxcbiAgcmhhc2ggPSAvIy4qJC8sXG4gIHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcbiAgcmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuICAvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cbiAgcmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcbiAgcm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG4gIHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcbiAgcnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxuXG4gIC8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbiAgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZCxcblxuICAvKiBQcmVmaWx0ZXJzXG4gICAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG4gICAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG4gICAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcbiAgICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuICAgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG4gICAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcbiAgICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcbiAgICovXG4gIHByZWZpbHRlcnMgPSB7fSxcblxuICAvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG4gICAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuICAgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcbiAgICovXG4gIHRyYW5zcG9ydHMgPSB7fSxcblxuICAvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cbiAgYWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KFwiKlwiKTtcblxuLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcbi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldFxudHJ5IHtcbiAgYWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjtcbn0gY2F0Y2goIGUgKSB7XG4gIC8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50XG4gIC8vIHNpbmNlIElFIHdpbGwgbW9kaWZ5IGl0IGdpdmVuIGRvY3VtZW50LmxvY2F0aW9uXG4gIGFqYXhMb2NhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG4gIGFqYXhMb2NhdGlvbi5ocmVmID0gXCJcIjtcbiAgYWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7XG59XG5cbi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xuYWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuICAvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG4gIHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG4gICAgaWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcbiAgICAgIGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuICAgIH1cblxuICAgIHZhciBkYXRhVHlwZSxcbiAgICAgIGkgPSAwLFxuICAgICAgZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIGNvcmVfcm5vdHdoaXRlICkgfHwgW107XG5cbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG4gICAgICAvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG4gICAgICB3aGlsZSAoIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSApIHtcbiAgICAgICAgLy8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKCBkYXRhVHlwZVswXSA9PT0gXCIrXCIgKSB7XG4gICAgICAgICAgZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuICAgICAgICAgIChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTtcblxuICAgICAgICAvLyBPdGhlcndpc2UgYXBwZW5kXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cbiAgdmFyIGluc3BlY3RlZCA9IHt9LFxuICAgIHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG4gIGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuICAgIHZhciBzZWxlY3RlZDtcbiAgICBpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuICAgIGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG4gICAgICB2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuICAgICAgaWYoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuICAgICAgICBpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG4gICAgICAgIHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gIH1cblxuICByZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuICB2YXIga2V5LCBkZWVwLFxuICAgIGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuICBmb3IgKCBrZXkgaW4gc3JjICkge1xuICAgIGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgKCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG4gICAgfVxuICB9XG4gIGlmICggZGVlcCApIHtcbiAgICBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcbiAgaWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuICAgIHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuICAgIHNlbGYgPSB0aGlzLFxuICAgIG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcblxuICBpZiAoIG9mZiA+PSAwICkge1xuICAgIHNlbGVjdG9yID0gdXJsLnNsaWNlKCBvZmYgKTtcbiAgICB1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuICB9XG5cbiAgLy8gSWYgaXQncyBhIGZ1bmN0aW9uXG4gIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcbiAgICBjYWxsYmFjayA9IHBhcmFtcztcbiAgICBwYXJhbXMgPSB1bmRlZmluZWQ7XG5cbiAgLy8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuICB9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcbiAgICB0eXBlID0gXCJQT1NUXCI7XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuICBpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcbiAgICBqUXVlcnkuYWpheCh7XG4gICAgICB1cmw6IHVybCxcblxuICAgICAgLy8gaWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRhdGFUeXBlOiBcImh0bWxcIixcbiAgICAgIGRhdGE6IHBhcmFtc1xuICAgIH0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuICAgICAgLy8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG4gICAgICByZXNwb25zZSA9IGFyZ3VtZW50cztcblxuICAgICAgc2VsZi5odG1sKCBzZWxlY3RvciA/XG5cbiAgICAgICAgLy8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG4gICAgICAgIC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuICAgICAgICBqUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcbiAgICAgICAgcmVzcG9uc2VUZXh0ICk7XG5cbiAgICB9KS5jb21wbGV0ZSggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG4gICAgICBzZWxmLmVhY2goIGNhbGxiYWNrLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggWyBcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICl7XG4gIGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICl7XG4gICAgcmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG4gIH07XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cbiAgLy8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG4gIGFjdGl2ZTogMCxcblxuICAvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG4gIGxhc3RNb2RpZmllZDoge30sXG4gIGV0YWc6IHt9LFxuXG4gIGFqYXhTZXR0aW5nczoge1xuICAgIHVybDogYWpheExvY2F0aW9uLFxuICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgaXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcbiAgICBnbG9iYWw6IHRydWUsXG4gICAgcHJvY2Vzc0RhdGE6IHRydWUsXG4gICAgYXN5bmM6IHRydWUsXG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG4gICAgLypcbiAgICB0aW1lb3V0OiAwLFxuICAgIGRhdGE6IG51bGwsXG4gICAgZGF0YVR5cGU6IG51bGwsXG4gICAgdXNlcm5hbWU6IG51bGwsXG4gICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgY2FjaGU6IG51bGwsXG4gICAgdGhyb3dzOiBmYWxzZSxcbiAgICB0cmFkaXRpb25hbDogZmFsc2UsXG4gICAgaGVhZGVyczoge30sXG4gICAgKi9cblxuICAgIGFjY2VwdHM6IHtcbiAgICAgIFwiKlwiOiBhbGxUeXBlcyxcbiAgICAgIHRleHQ6IFwidGV4dC9wbGFpblwiLFxuICAgICAgaHRtbDogXCJ0ZXh0L2h0bWxcIixcbiAgICAgIHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG4gICAgICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG4gICAgfSxcblxuICAgIGNvbnRlbnRzOiB7XG4gICAgICB4bWw6IC94bWwvLFxuICAgICAgaHRtbDogL2h0bWwvLFxuICAgICAganNvbjogL2pzb24vXG4gICAgfSxcblxuICAgIHJlc3BvbnNlRmllbGRzOiB7XG4gICAgICB4bWw6IFwicmVzcG9uc2VYTUxcIixcbiAgICAgIHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG4gICAgICBqc29uOiBcInJlc3BvbnNlSlNPTlwiXG4gICAgfSxcblxuICAgIC8vIERhdGEgY29udmVydGVyc1xuICAgIC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICBjb252ZXJ0ZXJzOiB7XG5cbiAgICAgIC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuICAgICAgXCIqIHRleHRcIjogU3RyaW5nLFxuXG4gICAgICAvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcbiAgICAgIFwidGV4dCBodG1sXCI6IHRydWUsXG5cbiAgICAgIC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cbiAgICAgIFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cbiAgICAgIC8vIFBhcnNlIHRleHQgYXMgeG1sXG4gICAgICBcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuICAgIH0sXG5cbiAgICAvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuICAgIC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcbiAgICAvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuICAgIC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuICAgIGZsYXRPcHRpb25zOiB7XG4gICAgICB1cmw6IHRydWUsXG4gICAgICBjb250ZXh0OiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG4gIC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cbiAgLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cbiAgYWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcbiAgICByZXR1cm4gc2V0dGluZ3MgP1xuXG4gICAgICAvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuICAgICAgYWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG4gICAgICAvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG4gICAgICBhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcbiAgfSxcblxuICBhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcbiAgYWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cbiAgLy8gTWFpbiBtZXRob2RcbiAgYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuICAgIC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG4gICAgaWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuICAgICAgb3B0aW9ucyA9IHVybDtcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIHRyYW5zcG9ydCxcbiAgICAgIC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cbiAgICAgIGNhY2hlVVJMLFxuICAgICAgLy8gUmVzcG9uc2UgaGVhZGVyc1xuICAgICAgcmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgLy8gdGltZW91dCBoYW5kbGVcbiAgICAgIHRpbWVvdXRUaW1lcixcbiAgICAgIC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xuICAgICAgcGFydHMsXG4gICAgICAvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcbiAgICAgIGZpcmVHbG9iYWxzLFxuICAgICAgLy8gTG9vcCB2YXJpYWJsZVxuICAgICAgaSxcbiAgICAgIC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3RcbiAgICAgIHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuICAgICAgLy8gQ2FsbGJhY2tzIGNvbnRleHRcbiAgICAgIGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuICAgICAgLy8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG4gICAgICAgIGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuICAgICAgICBqUXVlcnkuZXZlbnQsXG4gICAgICAvLyBEZWZlcnJlZHNcbiAgICAgIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG4gICAgICBjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcbiAgICAgIHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG4gICAgICAvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuICAgICAgcmVxdWVzdEhlYWRlcnMgPSB7fSxcbiAgICAgIHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcbiAgICAgIC8vIFRoZSBqcVhIUiBzdGF0ZVxuICAgICAgc3RhdGUgPSAwLFxuICAgICAgLy8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG4gICAgICBzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcbiAgICAgIC8vIEZha2UgeGhyXG4gICAgICBqcVhIUiA9IHtcbiAgICAgICAgcmVhZHlTdGF0ZTogMCxcblxuICAgICAgICAvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuICAgICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgICBpZiAoIHN0YXRlID09PSAyICkge1xuICAgICAgICAgICAgaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgd2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gUmF3IHN0cmluZ1xuICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQ2FjaGVzIHRoZSBoZWFkZXJcbiAgICAgICAgc2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuICAgICAgICAgIHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoICFzdGF0ZSApIHtcbiAgICAgICAgICAgIG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICAgICAgICBpZiAoICFzdGF0ZSApIHtcbiAgICAgICAgICAgIHMubWltZVR5cGUgPSB0eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuICAgICAgICBzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuICAgICAgICAgIHZhciBjb2RlO1xuICAgICAgICAgIGlmICggbWFwICkge1xuICAgICAgICAgICAgaWYgKCBzdGF0ZSA8IDIgKSB7XG4gICAgICAgICAgICAgIGZvciAoIGNvZGUgaW4gbWFwICkge1xuICAgICAgICAgICAgICAgIC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG4gICAgICAgICAgICAgIGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3RcbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuICAgICAgICAgIHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuICAgICAgICAgIGlmICggdHJhbnNwb3J0ICkge1xuICAgICAgICAgICAgdHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9uZSggMCwgZmluYWxUZXh0ICk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAvLyBBdHRhY2ggZGVmZXJyZWRzXG4gICAgZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuICAgIGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuICAgIGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuICAgIC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuICAgIC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuICAgIC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG4gICAgLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG4gICAgcy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcbiAgICAgIC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XG5cbiAgICAvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcbiAgICBzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG4gICAgLy8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuICAgIHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtcIlwiXTtcblxuICAgIC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB3ZSBoYXZlIGEgcHJvdG9jb2w6aG9zdDpwb3J0IG1pc21hdGNoXG4gICAgaWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG4gICAgICBwYXJ0cyA9IHJ1cmwuZXhlYyggcy51cmwudG9Mb3dlckNhc2UoKSApO1xuICAgICAgcy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJlxuICAgICAgICAoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XG4gICAgICAgICAgKCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgIT09XG4gICAgICAgICAgICAoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG4gICAgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgcy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcbiAgICB9XG5cbiAgICAvLyBBcHBseSBwcmVmaWx0ZXJzXG4gICAgaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cbiAgICAvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuICAgIGlmICggc3RhdGUgPT09IDIgKSB7XG4gICAgICByZXR1cm4ganFYSFI7XG4gICAgfVxuXG4gICAgLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cbiAgICBmaXJlR2xvYmFscyA9IHMuZ2xvYmFsO1xuXG4gICAgLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuICAgIGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG4gICAgfVxuXG4gICAgLy8gVXBwZXJjYXNlIHRoZSB0eXBlXG4gICAgcy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuICAgIHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG4gICAgLy8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG4gICAgLy8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG4gICAgY2FjaGVVUkwgPSBzLnVybDtcblxuICAgIC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG4gICAgaWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG4gICAgICAvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG4gICAgICBpZiAoIHMuZGF0YSApIHtcbiAgICAgICAgY2FjaGVVUkwgPSAoIHMudXJsICs9ICggYWpheF9ycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuICAgICAgICAvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG4gICAgICAgIGRlbGV0ZSBzLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcbiAgICAgIGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG4gICAgICAgIHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcbiAgICAgICAgICBjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgYWpheF9ub25jZSsrICkgOlxuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuICAgICAgICAgIGNhY2hlVVJMICsgKCBhamF4X3JxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgYWpheF9ub25jZSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG4gICAgaWYgKCBzLmlmTW9kaWZpZWQgKSB7XG4gICAgICBpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG4gICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuICAgICAgfVxuICAgICAgaWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcbiAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG4gICAgaWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG4gICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICBcIkFjY2VwdFwiLFxuICAgICAgcy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuICAgICAgICBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuICAgICAgICBzLmFjY2VwdHNbIFwiKlwiIF1cbiAgICApO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG4gICAgZm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG4gICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuICAgIH1cblxuICAgIC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcbiAgICBpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG4gICAgICAvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cbiAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpO1xuICAgIH1cblxuICAgIC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuICAgIHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG4gICAgLy8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG4gICAgZm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuICAgICAganFYSFJbIGkgXSggc1sgaSBdICk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRyYW5zcG9ydFxuICAgIHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG4gICAgLy8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG4gICAgaWYgKCAhdHJhbnNwb3J0ICkge1xuICAgICAgZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcbiAgICB9IGVsc2Uge1xuICAgICAganFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cbiAgICAgIC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG4gICAgICBpZiAoIGZpcmVHbG9iYWxzICkge1xuICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcbiAgICAgIH1cbiAgICAgIC8vIFRpbWVvdXRcbiAgICAgIGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuICAgICAgICB0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcbiAgICAgICAgfSwgcy50aW1lb3V0ICk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0YXRlID0gMTtcbiAgICAgICAgdHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG4gICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgLy8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuICAgICAgICBpZiAoIHN0YXRlIDwgMiApIHtcbiAgICAgICAgICBkb25lKCAtMSwgZSApO1xuICAgICAgICAvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG4gICAgZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG4gICAgICB2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuICAgICAgICBzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuICAgICAgLy8gQ2FsbGVkIG9uY2VcbiAgICAgIGlmICggc3RhdGUgPT09IDIgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG4gICAgICBzdGF0ZSA9IDI7XG5cbiAgICAgIC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG4gICAgICBpZiAoIHRpbWVvdXRUaW1lciApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgIC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG4gICAgICB0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcbiAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuICAgICAgLy8gU2V0IHJlYWR5U3RhdGVcbiAgICAgIGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cbiAgICAgIC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG4gICAgICBpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuICAgICAgLy8gR2V0IHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmICggcmVzcG9uc2VzICkge1xuICAgICAgICByZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuICAgICAgcmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuICAgICAgLy8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcbiAgICAgIGlmICggaXNTdWNjZXNzICkge1xuXG4gICAgICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG4gICAgICAgIGlmICggcy5pZk1vZGlmaWVkICkge1xuICAgICAgICAgIG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuICAgICAgICAgIGlmICggbW9kaWZpZWQgKSB7XG4gICAgICAgICAgICBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuICAgICAgICAgIGlmICggbW9kaWZpZWQgKSB7XG4gICAgICAgICAgICBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vIGNvbnRlbnRcbiAgICAgICAgaWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuICAgICAgICAgIHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG4gICAgICAgIC8vIGlmIG5vdCBtb2RpZmllZFxuICAgICAgICB9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcbiAgICAgICAgICBzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcbiAgICAgICAgICBzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICAgICAgICAgIGlzU3VjY2VzcyA9ICFlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgZXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHRcbiAgICAgICAgLy8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXG4gICAgICAgIGVycm9yID0gc3RhdHVzVGV4dDtcbiAgICAgICAgaWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG4gICAgICAgICAgc3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcbiAgICAgICAgICBpZiAoIHN0YXR1cyA8IDAgKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuICAgICAganFYSFIuc3RhdHVzID0gc3RhdHVzO1xuICAgICAganFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG4gICAgICAvLyBTdWNjZXNzL0Vycm9yXG4gICAgICBpZiAoIGlzU3VjY2VzcyApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcbiAgICAgIGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcbiAgICAgIHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICggZmlyZUdsb2JhbHMgKSB7XG4gICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuICAgICAgICAgIFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbXBsZXRlXG4gICAgICBjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG4gICAgICBpZiAoIGZpcmVHbG9iYWxzICkge1xuICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG4gICAgICAgIC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuICAgICAgICBpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ganFYSFI7XG4gIH0sXG5cbiAgZ2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG4gIH0sXG5cbiAgZ2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcbiAgICByZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG4gIH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuICBqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG4gICAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG4gICAgICB0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcbiAgICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpRdWVyeS5hamF4KHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgZGF0YVR5cGU6IHR5cGUsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgc3VjY2VzczogY2FsbGJhY2tcbiAgICB9KTtcbiAgfTtcbn0pO1xuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cbiAgdmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuICAgIGNvbnRlbnRzID0gcy5jb250ZW50cyxcbiAgICBkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuICAvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuICB3aGlsZSggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuICAgIGRhdGFUeXBlcy5zaGlmdCgpO1xuICAgIGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcbiAgaWYgKCBjdCApIHtcbiAgICBmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuICAgICAgaWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcbiAgICAgICAgZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG4gIGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuICAgIGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG4gICAgZm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG4gICAgICBpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xuICAgICAgICBmaW5hbERhdGFUeXBlID0gdHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoICFmaXJzdERhdGFUeXBlICkge1xuICAgICAgICBmaXJzdERhdGFUeXBlID0gdHlwZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG4gICAgZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcbiAgfVxuXG4gIC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcbiAgLy8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICBpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG4gICAgaWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcbiAgICAgIGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcbiAgfVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuICB2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcbiAgICBjb252ZXJ0ZXJzID0ge30sXG4gICAgLy8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuICAgIGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cbiAgLy8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG4gIGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG4gICAgZm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG4gICAgICBjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuICAgIH1cbiAgfVxuXG4gIGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuICAvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuICB3aGlsZSAoIGN1cnJlbnQgKSB7XG5cbiAgICBpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcbiAgICAgIGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG4gICAgaWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuICAgICAgcmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG4gICAgfVxuXG4gICAgcHJldiA9IGN1cnJlbnQ7XG4gICAgY3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG4gICAgaWYgKCBjdXJyZW50ICkge1xuXG4gICAgLy8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuICAgICAgaWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuICAgICAgICBjdXJyZW50ID0gcHJldjtcblxuICAgICAgLy8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuICAgICAgfSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuICAgICAgICAvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuICAgICAgICBjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuICAgICAgICAvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuICAgICAgICBpZiAoICFjb252ICkge1xuICAgICAgICAgIGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cbiAgICAgICAgICAgIC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuICAgICAgICAgICAgdG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG4gICAgICAgICAgICBpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG4gICAgICAgICAgICAgIC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuICAgICAgICAgICAgICBjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG4gICAgICAgICAgICAgIGlmICggY29udiApIHtcbiAgICAgICAgICAgICAgICAvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCBjb252ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgY29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0bXBbIDAgXTtcbiAgICAgICAgICAgICAgICAgIGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuICAgICAgICBpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cbiAgICAgICAgICAvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG4gICAgICAgICAgaWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcbiAgYWNjZXB0czoge1xuICAgIHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG4gIH0sXG4gIGNvbnRlbnRzOiB7XG4gICAgc2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cbiAgfSxcbiAgY29udmVydGVyczoge1xuICAgIFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG4gICAgICBqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICB9XG59KTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuICBpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcbiAgICBzLmNhY2hlID0gZmFsc2U7XG4gIH1cbiAgaWYgKCBzLmNyb3NzRG9tYWluICkge1xuICAgIHMudHlwZSA9IFwiR0VUXCI7XG4gIH1cbn0pO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcbiAgLy8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuICBpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG4gICAgdmFyIHNjcmlwdCwgY2FsbGJhY2s7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcbiAgICAgICAgc2NyaXB0ID0galF1ZXJ5KFwiPHNjcmlwdD5cIikucHJvcCh7XG4gICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuICAgICAgICAgIHNyYzogcy51cmxcbiAgICAgICAgfSkub24oXG4gICAgICAgICAgXCJsb2FkIGVycm9yXCIsXG4gICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuICAgICAgICAgICAgc2NyaXB0LnJlbW92ZSgpO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCBldnQgKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcbiAgICAgIH0sXG4gICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggY2FsbGJhY2sgKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuICByanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcbiAganNvbnA6IFwiY2FsbGJhY2tcIixcbiAganNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggYWpheF9ub25jZSsrICkgKTtcbiAgICB0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH1cbn0pO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG4gIHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcbiAgICBqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuICAgICAgXCJ1cmxcIiA6XG4gICAgICB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG4gICAgKTtcblxuICAvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG4gIGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG4gICAgLy8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuICAgIGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG4gICAgICBzLmpzb25wQ2FsbGJhY2soKSA6XG4gICAgICBzLmpzb25wQ2FsbGJhY2s7XG5cbiAgICAvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG4gICAgaWYgKCBqc29uUHJvcCApIHtcbiAgICAgIHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG4gICAgfSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG4gICAgICBzLnVybCArPSAoIGFqYXhfcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG4gICAgfVxuXG4gICAgLy8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuICAgIHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcbiAgICAgICAgalF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcbiAgICB9O1xuXG4gICAgLy8gZm9yY2UganNvbiBkYXRhVHlwZVxuICAgIHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuICAgIC8vIEluc3RhbGwgY2FsbGJhY2tcbiAgICBvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG4gICAgd2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG4gICAgfTtcblxuICAgIC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuICAgIGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcbiAgICAgIHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblxuICAgICAgLy8gU2F2ZSBiYWNrIGFzIGZyZWVcbiAgICAgIGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuICAgICAgICBzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cbiAgICAgICAgLy8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuICAgICAgICBvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuICAgICAgaWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcbiAgICAgICAgb3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuICAgIHJldHVybiBcInNjcmlwdFwiO1xuICB9XG59KTtcbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB9IGNhdGNoKCBlICkge31cbn07XG5cbnZhciB4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpLFxuICB4aHJTdWNjZXNzU3RhdHVzID0ge1xuICAgIC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG4gICAgMDogMjAwLFxuICAgIC8vIFN1cHBvcnQ6IElFOVxuICAgIC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuICAgIDEyMjM6IDIwNFxuICB9LFxuICAvLyBTdXBwb3J0OiBJRTlcbiAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIG91dGJvdW5kIHhociBhbmQgYWJvcnQgdGhlbSBtYW51YWxseVxuICAvLyBiZWNhdXNlIElFIGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZG8gaXQgYWxsIGJ5IGl0c2VsZlxuICB4aHJJZCA9IDAsXG4gIHhockNhbGxiYWNrcyA9IHt9O1xuXG5pZiAoIHdpbmRvdy5BY3RpdmVYT2JqZWN0ICkge1xuICBqUXVlcnkoIHdpbmRvdyApLm9uKCBcInVubG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICBmb3IoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuICAgICAgeGhyQ2FsbGJhY2tzWyBrZXkgXSgpO1xuICAgIH1cbiAgICB4aHJDYWxsYmFja3MgPSB1bmRlZmluZWQ7XG4gIH0pO1xufVxuXG5qUXVlcnkuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xualF1ZXJ5LnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcbiAgdmFyIGNhbGxiYWNrO1xuICAvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG4gIGlmICggalF1ZXJ5LnN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcbiAgICAgICAgdmFyIGksIGlkLFxuICAgICAgICAgIHhociA9IG9wdGlvbnMueGhyKCk7XG4gICAgICAgIHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG4gICAgICAgIC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcbiAgICAgICAgaWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcbiAgICAgICAgICBmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuICAgICAgICAgICAgeGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG4gICAgICAgIGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcbiAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG4gICAgICAgIC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcbiAgICAgICAgLy8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cbiAgICAgICAgLy8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG4gICAgICAgIC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuICAgICAgICBpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcbiAgICAgICAgICBoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgaGVhZGVyc1xuICAgICAgICBmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCBjYWxsYmFjayApIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcbiAgICAgICAgICAgICAgY2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcbiAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKFxuICAgICAgICAgICAgICAgICAgLy8gZmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwLCBhc3N1bWUgNDA0XG4gICAgICAgICAgICAgICAgICB4aHIuc3RhdHVzIHx8IDQwNCxcbiAgICAgICAgICAgICAgICAgIHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShcbiAgICAgICAgICAgICAgICAgIHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBJRTlcbiAgICAgICAgICAgICAgICAgIC8vICMxMTQyNjogV2hlbiByZXF1ZXN0aW5nIGJpbmFyeSBkYXRhLCBJRTkgd2lsbCB0aHJvdyBhbiBleGNlcHRpb25cbiAgICAgICAgICAgICAgICAgIC8vIG9uIGFueSBhdHRlbXB0IHRvIGFjY2VzcyByZXNwb25zZVRleHRcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIExpc3RlbiB0byBldmVudHNcbiAgICAgICAgeGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIHhoci5vbmVycm9yID0gY2FsbGJhY2soXCJlcnJvclwiKTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuICAgICAgICBjYWxsYmFjayA9IHhockNhbGxiYWNrc1soIGlkID0geGhySWQrKyApXSA9IGNhbGxiYWNrKFwiYWJvcnRcIik7XG4gICAgICAgIC8vIERvIHNlbmQgdGhlIHJlcXVlc3RcbiAgICAgICAgLy8gVGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uIHdoaWNoIGlzIGFjdHVhbGx5XG4gICAgICAgIC8vIGhhbmRsZWQgaW4galF1ZXJ5LmFqYXggKHNvIG5vIHRyeS9jYXRjaCBoZXJlKVxuICAgICAgICB4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG4gICAgICB9LFxuICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGNhbGxiYWNrICkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbnZhciBmeE5vdywgdGltZXJJZCxcbiAgcmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG4gIHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIGNvcmVfcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcbiAgcnJ1biA9IC9xdWV1ZUhvb2tzJC8sXG4gIGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcbiAgdHdlZW5lcnMgPSB7XG4gICAgXCIqXCI6IFtmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG4gICAgICB2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxuICAgICAgICB0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcbiAgICAgICAgcGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcbiAgICAgICAgdW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cbiAgICAgICAgLy8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcbiAgICAgICAgc3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXG4gICAgICAgICAgcmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxuICAgICAgICBzY2FsZSA9IDEsXG4gICAgICAgIG1heEl0ZXJhdGlvbnMgPSAyMDtcblxuICAgICAgaWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xuICAgICAgICAvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG4gICAgICAgIHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuICAgICAgICBwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuXG4gICAgICAgIC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG4gICAgICAgIHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKlxuICAgICAgICAgIC8vIFVzZSBhIHN0cmluZyBmb3IgZG91YmxpbmcgZmFjdG9yIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG4gICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cbiAgICAgICAgICAvLyBBZGp1c3QgYW5kIGFwcGx5XG4gICAgICAgICAgc3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuICAgICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcbiAgICAgICAgLy8gQW5kIGJyZWFraW5nIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcbiAgICAgICAgfSB3aGlsZSAoIHNjYWxlICE9PSAoc2NhbGUgPSB0d2Vlbi5jdXIoKSAvIHRhcmdldCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSB0d2VlbiBwcm9wZXJ0aWVzXG4gICAgICBpZiAoIHBhcnRzICkge1xuICAgICAgICBzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcbiAgICAgICAgdHdlZW4udW5pdCA9IHVuaXQ7XG4gICAgICAgIC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxuICAgICAgICB0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cbiAgICAgICAgICBzdGFydCArICggcGFydHNbIDEgXSArIDEgKSAqIHBhcnRzWyAyIF0gOlxuICAgICAgICAgICtwYXJ0c1sgMiBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHdlZW47XG4gICAgfV1cbiAgfTtcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZnhOb3cgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICByZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcbiAgdmFyIHR3ZWVuLFxuICAgIGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyBcIipcIiBdICksXG4gICAgaW5kZXggPSAwLFxuICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICBmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuICAgIGlmICggKHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkpICkge1xuXG4gICAgICAvLyB3ZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuICAgICAgcmV0dXJuIHR3ZWVuO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG4gIHZhciByZXN1bHQsXG4gICAgc3RvcHBlZCxcbiAgICBpbmRleCA9IDAsXG4gICAgbGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXG4gICAgZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gZG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG4gICAgICBkZWxldGUgdGljay5lbGVtO1xuICAgIH0pLFxuICAgIHRpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICggc3RvcHBlZCApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuICAgICAgICAvLyBhcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgMSAtICggMC41IHx8IDAgKSAoIzEyNDk3KVxuICAgICAgICB0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG4gICAgICAgIHBlcmNlbnQgPSAxIC0gdGVtcCxcbiAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICBsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG4gICAgICAgIGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG4gICAgICB9XG5cbiAgICAgIGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cbiAgICAgIGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG4gICAgICBlbGVtOiBlbGVtLFxuICAgICAgcHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG4gICAgICBvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcbiAgICAgIG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcbiAgICAgIG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcbiAgICAgIHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcbiAgICAgIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgdHdlZW5zOiBbXSxcbiAgICAgIGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuICAgICAgICB2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG4gICAgICAgICAgICBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG4gICAgICAgIGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcbiAgICAgICAgcmV0dXJuIHR3ZWVuO1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIC8vIGlmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuICAgICAgICAgIGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG4gICAgICAgIGlmICggc3RvcHBlZCApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWVcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCByZWplY3RcbiAgICAgICAgaWYgKCBnb3RvRW5kICkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0pLFxuICAgIHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG4gIHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cbiAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG4gICAgcmVzdWx0ID0gYW5pbWF0aW9uUHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuICAgIGlmICggcmVzdWx0ICkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICBqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG4gIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG4gICAgYW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG4gIH1cblxuICBqUXVlcnkuZngudGltZXIoXG4gICAgalF1ZXJ5LmV4dGVuZCggdGljaywge1xuICAgICAgZWxlbTogZWxlbSxcbiAgICAgIGFuaW06IGFuaW1hdGlvbixcbiAgICAgIHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuICAgIH0pXG4gICk7XG5cbiAgLy8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcbiAgcmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuICAgIC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG4gICAgLmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuICAgIC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcbiAgdmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuICAvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3NcbiAgZm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG4gICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG4gICAgZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuICAgIHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG4gICAgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcbiAgICAgIGVhc2luZyA9IHZhbHVlWyAxIF07XG4gICAgICB2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcbiAgICB9XG5cbiAgICBpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuICAgICAgcHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuICAgIH1cblxuICAgIGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG4gICAgaWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuICAgICAgdmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG4gICAgICBkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuICAgICAgLy8gbm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbnQgb3ZlcndyaXRlIGtleXMgYWxyZWFkeSBwcmVzZW50LlxuICAgICAgLy8gYWxzbyAtIHJldXNpbmcgJ2luZGV4JyBmcm9tIGFib3ZlIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuICAgICAgZm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG4gICAgICAgIGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcbiAgICAgICAgICBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuICAgICAgICAgIHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuICAgIH1cbiAgfVxufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cbiAgdHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuICAgICAgY2FsbGJhY2sgPSBwcm9wcztcbiAgICAgIHByb3BzID0gWyBcIipcIiBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuICAgICAgcHJvcCA9IHByb3BzWyBpbmRleCBdO1xuICAgICAgdHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG4gICAgICB0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG4gICAgfVxuICB9LFxuXG4gIHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuICAgIGlmICggcHJlcGVuZCApIHtcbiAgICAgIGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsXG4gICAgYW5pbSA9IHRoaXMsXG4gICAgb3JpZyA9IHt9LFxuICAgIHN0eWxlID0gZWxlbS5zdHlsZSxcbiAgICBoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG4gICAgZGF0YVNob3cgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cbiAgLy8gaGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xuICBpZiAoICFvcHRzLnF1ZXVlICkge1xuICAgIGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcbiAgICBpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG4gICAgICBob29rcy51bnF1ZXVlZCA9IDA7XG4gICAgICBvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcbiAgICAgIGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG4gICAgICAgICAgb2xkZmlyZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBob29rcy51bnF1ZXVlZCsrO1xuXG4gICAgYW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBkb2luZyB0aGlzIG1ha2VzIHN1cmUgdGhhdCB0aGUgY29tcGxldGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZFxuICAgICAgLy8gYmVmb3JlIHRoaXMgY29tcGxldGVzXG4gICAgICBhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgaG9va3MudW5xdWV1ZWQtLTtcbiAgICAgICAgaWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG4gICAgICAgICAgaG9va3MuZW1wdHkuZmlyZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG4gIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG4gICAgLy8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XG4gICAgLy8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG4gICAgLy8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcbiAgICBvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuICAgIC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG4gICAgLy8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuICAgIGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJpbmxpbmVcIiAmJlxuICAgICAgICBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIH1cbiAgfVxuXG4gIGlmICggb3B0cy5vdmVyZmxvdyApIHtcbiAgICBzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgYW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICBzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcbiAgICAgIHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgLy8gc2hvdy9oaWRlIHBhc3NcbiAgZm9yICggcHJvcCBpbiBwcm9wcyApIHtcbiAgICB2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG4gICAgaWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuICAgICAgZGVsZXRlIHByb3BzWyBwcm9wIF07XG4gICAgICB0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG4gICAgICBpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuICAgICAgICBpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuICAgIGlmICggZGF0YVNob3cgKSB7XG4gICAgICBpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG4gICAgICAgIGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YVNob3cgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuICAgIH1cblxuICAgIC8vIHN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcbiAgICBpZiAoIHRvZ2dsZSApIHtcbiAgICAgIGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG4gICAgfVxuICAgIGlmICggaGlkZGVuICkge1xuICAgICAgalF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGpRdWVyeSggZWxlbSApLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJvcDtcblxuICAgICAgZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuICAgICAgZm9yICggcHJvcCBpbiBvcmlnICkge1xuICAgICAgICBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZvciAoIHByb3AgaW4gb3JpZyApIHtcbiAgICAgIHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cbiAgICAgIGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuICAgICAgICBkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG4gICAgICAgIGlmICggaGlkZGVuICkge1xuICAgICAgICAgIHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuICAgICAgICAgIHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG4gIHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHdlZW4sXG4gIGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMucHJvcCA9IHByb3A7XG4gICAgdGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgXCJzd2luZ1wiO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuICB9LFxuICBjdXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cbiAgICByZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cbiAgICAgIGhvb2tzLmdldCggdGhpcyApIDpcbiAgICAgIFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcbiAgfSxcbiAgcnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcbiAgICB2YXIgZWFzZWQsXG4gICAgICBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cbiAgICBpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcbiAgICAgIHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuICAgICAgICBwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuICAgIH1cbiAgICB0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cbiAgICBpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuICAgICAgdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuICAgIH1cblxuICAgIGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuICAgICAgaG9va3Muc2V0KCB0aGlzICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuICBfZGVmYXVsdDoge1xuICAgIGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgaWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJlxuICAgICAgICAoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xuICAgICAgICByZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuICAgICAgfVxuXG4gICAgICAvLyBwYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcbiAgICAgIC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHNcbiAgICAgIC8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdC5cbiAgICAgIC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMgaXMuXG4gICAgICByZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG4gICAgICAvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cbiAgICAgIHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG4gICAgICAvLyB1c2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdCAtIHVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZSAtIHVzZSAuc3R5bGUgaWYgaXRzXG4gICAgICAvLyBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZVxuICAgICAgaWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuICAgICAgICBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuICAgICAgfSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuICAgICAgICBqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcbiAgc2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG4gICAgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcbiAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcbiAgICB9XG4gIH1cbn07XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuICB2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcbiAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG4gICAgcmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG4gICAgICBjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuICAgICAgdGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuICB9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cbiAgICAvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG4gICAgICAvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcbiAgICAgIC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcbiAgfSxcbiAgYW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuICAgIHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG4gICAgICBvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG4gICAgICBkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuICAgICAgICB2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cbiAgICAgICAgLy8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG4gICAgICAgIGlmICggZW1wdHkgfHwgZGF0YV9wcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuICAgICAgICAgIGFuaW0uc3RvcCggdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cbiAgICByZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG4gICAgICB0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuICAgICAgdGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcbiAgICB2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuICAgICAgdmFyIHN0b3AgPSBob29rcy5zdG9wO1xuICAgICAgZGVsZXRlIGhvb2tzLnN0b3A7XG4gICAgICBzdG9wKCBnb3RvRW5kICk7XG4gICAgfTtcblxuICAgIGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG4gICAgICBnb3RvRW5kID0gY2xlYXJRdWV1ZTtcbiAgICAgIGNsZWFyUXVldWUgPSB0eXBlO1xuICAgICAgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuICAgICAgdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkZXF1ZXVlID0gdHJ1ZSxcbiAgICAgICAgaW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuICAgICAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuICAgICAgICBkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApO1xuXG4gICAgICBpZiAoIGluZGV4ICkge1xuICAgICAgICBpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuICAgICAgICAgIHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuICAgICAgICAgIGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuICAgICAgICAgICAgc3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG4gICAgICAgIGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xuICAgICAgICAgIHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcbiAgICAgICAgICBkZXF1ZXVlID0gZmFsc2U7XG4gICAgICAgICAgdGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkXG4gICAgICAvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZVxuICAgICAgLy8gYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmRcbiAgICAgIGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcbiAgICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICBpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuICAgICAgdHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZGV4LFxuICAgICAgICBkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxuICAgICAgICBxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcbiAgICAgICAgaG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcbiAgICAgICAgdGltZXJzID0galF1ZXJ5LnRpbWVycyxcbiAgICAgICAgbGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG4gICAgICAvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG4gICAgICBkYXRhLmZpbmlzaCA9IHRydWU7XG5cbiAgICAgIC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuICAgICAgalF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG4gICAgICBpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG4gICAgICAgIGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuICAgICAgZm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcbiAgICAgICAgaWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG4gICAgICAgICAgdGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuICAgICAgICAgIHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cbiAgICAgIGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG4gICAgICAgIGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuICAgICAgICAgIHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcbiAgICAgIGRlbGV0ZSBkYXRhLmZpbmlzaDtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuICB2YXIgd2hpY2gsXG4gICAgYXR0cnMgPSB7IGhlaWdodDogdHlwZSB9LFxuICAgIGkgPSAwO1xuXG4gIC8vIGlmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcbiAgLy8gaWYgd2UgZG9uJ3QgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuICBpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGg/IDEgOiAwO1xuICBmb3IoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG4gICAgd2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcbiAgICBhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcbiAgfVxuXG4gIGlmICggaW5jbHVkZVdpZHRoICkge1xuICAgIGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG4gIH1cblxuICByZXR1cm4gYXR0cnM7XG59XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcbiAgc2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG4gIHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcbiAgc2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuICBmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcbiAgZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuICBmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuICBqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcbiAgICByZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcbiAgfTtcbn0pO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG4gIHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcbiAgICBjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuICAgICAgalF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG4gICAgZHVyYXRpb246IHNwZWVkLFxuICAgIGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuICB9O1xuXG4gIG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG4gICAgb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cbiAgLy8gbm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG4gIGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuICAgIG9wdC5xdWV1ZSA9IFwiZnhcIjtcbiAgfVxuXG4gIC8vIFF1ZXVlaW5nXG4gIG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cbiAgb3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuICAgICAgb3B0Lm9sZC5jYWxsKCB0aGlzICk7XG4gICAgfVxuXG4gICAgaWYgKCBvcHQucXVldWUgKSB7XG4gICAgICBqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuICBsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuICAgIHJldHVybiBwO1xuICB9LFxuICBzd2luZzogZnVuY3Rpb24oIHAgKSB7XG4gICAgcmV0dXJuIDAuNSAtIE1hdGguY29zKCBwKk1hdGguUEkgKSAvIDI7XG4gIH1cbn07XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRpbWVyLFxuICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG4gICAgaSA9IDA7XG5cbiAgZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cbiAgZm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuICAgIHRpbWVyID0gdGltZXJzWyBpIF07XG4gICAgLy8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG4gICAgaWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG4gICAgICB0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuICAgIGpRdWVyeS5meC5zdG9wKCk7XG4gIH1cbiAgZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG4gIGlmICggdGltZXIoKSAmJiBqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICkgKSB7XG4gICAgalF1ZXJ5LmZ4LnN0YXJ0KCk7XG4gIH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xuXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGltZXJJZCApIHtcbiAgICB0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcbiAgfVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuICB0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG4gIHNsb3c6IDYwMCxcbiAgZmFzdDogMjAwLFxuICAvLyBEZWZhdWx0IHNwZWVkXG4gIF9kZWZhdWx0OiA0MDBcbn07XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5pZiAoIGpRdWVyeS5leHByICYmIGpRdWVyeS5leHByLmZpbHRlcnMgKSB7XG4gIGpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuICAgICAgcmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG4gICAgfSkubGVuZ3RoO1xuICB9O1xufVxualF1ZXJ5LmZuLm9mZnNldCA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICBpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG4gICAgICB0aGlzIDpcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcbiAgICAgICAgalF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgdmFyIGRvY0VsZW0sIHdpbixcbiAgICBlbGVtID0gdGhpc1sgMCBdLFxuICAgIGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG4gICAgZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cbiAgaWYgKCAhZG9jICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuICBpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcbiAgICByZXR1cm4gYm94O1xuICB9XG5cbiAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3JcbiAgLy8gQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuICBpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gY29yZV9zdHJ1bmRlZmluZWQgKSB7XG4gICAgYm94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuICB3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuICByZXR1cm4ge1xuICAgIHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG4gIH07XG59O1xuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXG4gIHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG4gICAgdmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcbiAgICAgIHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG4gICAgICBjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG4gICAgICBwcm9wcyA9IHt9O1xuXG4gICAgLy8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuICAgIGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG4gICAgICBlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgIH1cblxuICAgIGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG4gICAgY3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuICAgIGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuICAgIGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJiAoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG4gICAgLy8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXIgdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG4gICAgaWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcbiAgICAgIGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuICAgICAgY3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuICAgICAgY3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgY3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcbiAgICAgIGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcbiAgICB9XG5cbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBjdXJPZmZzZXQgKTtcbiAgICB9XG5cbiAgICBpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG4gICAgICBwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuICAgIH1cbiAgICBpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuICAgICAgcHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG4gICAgfVxuXG4gICAgaWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcbiAgICAgIG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJFbGVtLmNzcyggcHJvcHMgKTtcbiAgICB9XG4gIH1cbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cbiAgcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGlmICggIXRoaXNbIDAgXSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG4gICAgICBlbGVtID0gdGhpc1sgMCBdLFxuICAgICAgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuICAgIC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXQncyBvbmx5IG9mZnNldCBwYXJlbnRcbiAgICBpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG4gICAgICAvLyBXZSBhc3N1bWUgdGhhdCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgYXZhaWxhYmxlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcbiAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcbiAgICAgIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cbiAgICAgIC8vIEdldCBjb3JyZWN0IG9mZnNldHNcbiAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG4gICAgICBpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuICAgICAgICBwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuICAgICAgcGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG4gICAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuICAgIH1cblxuICAgIC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcbiAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG4gICAgfTtcbiAgfSxcblxuICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXG4gICAgICB3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIikgPT09IFwic3RhdGljXCIgKSApIHtcbiAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuICAgIH0pO1xuICB9XG59KTtcblxuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7c2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIn0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG4gIHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cbiAgalF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5hY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcbiAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuICAgICAgaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgcmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG4gICAgICB9XG5cbiAgICAgIGlmICggd2luICkge1xuICAgICAgICB3aW4uc2Nyb2xsVG8oXG4gICAgICAgICAgIXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICB0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG4gICAgICB9XG4gICAgfSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG4gIHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcbiAgalF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcbiAgICAvLyBtYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcbiAgICBqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcbiAgICAgIHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG4gICAgICAgIGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuICAgICAgcmV0dXJuIGpRdWVyeS5hY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcbiAgICAgICAgdmFyIGRvYztcblxuICAgICAgICBpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuICAgICAgICAgIC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG4gICAgICAgICAgLy8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG4gICAgICAgICAgcmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG4gICAgICAgICAgZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgICAvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG4gICAgICAgICAgLy8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KFxuICAgICAgICAgICAgZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG4gICAgICAgICAgICBlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcbiAgICAgICAgICAgIGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgLy8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuICAgICAgICAgIGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG4gICAgICAgICAgLy8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuICAgICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG4gICAgICB9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuICAgIH07XG4gIH0pO1xufSk7XG4vLyBMaW1pdCBzY29wZSBwb2xsdXRpb24gZnJvbSBhbnkgZGVwcmVjYXRlZCBBUElcbi8vIChmdW5jdGlvbigpIHtcblxuLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXRcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmxlbmd0aDtcbn07XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cbi8vIH0pKCk7XG5pZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcbiAgLy8gRXhwb3NlIGpRdWVyeSBhcyBtb2R1bGUuZXhwb3J0cyBpbiBsb2FkZXJzIHRoYXQgaW1wbGVtZW50IHRoZSBOb2RlXG4gIC8vIG1vZHVsZSBwYXR0ZXJuIChpbmNsdWRpbmcgYnJvd3NlcmlmeSkuIERvIG5vdCBjcmVhdGUgdGhlIGdsb2JhbCwgc2luY2VcbiAgLy8gdGhlIHVzZXIgd2lsbCBiZSBzdG9yaW5nIGl0IHRoZW1zZWx2ZXMgbG9jYWxseSwgYW5kIGdsb2JhbHMgYXJlIGZyb3duZWRcbiAgLy8gdXBvbiBpbiB0aGUgTm9kZSBtb2R1bGUgd29ybGQuXG4gIG1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xufSBlbHNlIHtcbiAgLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4gIC8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbiAgLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4gIC8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbiAgLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4gIC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuICAvLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG4gICAgZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24gKCkgeyByZXR1cm4galF1ZXJ5OyB9ICk7XG4gIH1cbn1cblxuLy8gSWYgdGhlcmUgaXMgYSB3aW5kb3cgb2JqZWN0LCB0aGF0IGF0IGxlYXN0IGhhcyBhIGRvY3VtZW50IHByb3BlcnR5LFxuLy8gZGVmaW5lIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVyc1xuaWYgKCB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgPT09IFwib2JqZWN0XCIgKSB7XG4gIHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxufSkoIHdpbmRvdyApO1xuIiwiLy8gU2ltcGxlIEphdmFTY3JpcHQgVGVtcGxhdGluZ1xuLy8gSm9obiBSZXNpZyAtIGh0dHA6Ly9lam9obi5vcmcvIC0gTUlUIExpY2Vuc2VkXG4vLyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nL1xuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWNoZSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gdG1wbChzdHIsIGRhdGEpe1xuICAgICAgICAvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIGdldHRpbmcgYSB0ZW1wbGF0ZSwgb3IgaWYgd2UgbmVlZCB0b1xuICAgICAgICAvLyBsb2FkIHRoZSB0ZW1wbGF0ZSAtIGFuZCBiZSBzdXJlIHRvIGNhY2hlIHRoZSByZXN1bHQuXG4gICAgICAgIHZhciBmbiA9ICEvXFxXLy50ZXN0KHN0cikgP1xuICAgICAgICBjYWNoZVtzdHJdID0gY2FjaGVbc3RyXSB8fFxuICAgICAgICB0bXBsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN0cikuaW5uZXJIVE1MKSA6XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgYSByZXVzYWJsZSBmdW5jdGlvbiB0aGF0IHdpbGwgc2VydmUgYXMgYSB0ZW1wbGF0ZVxuICAgICAgICAvLyBnZW5lcmF0b3IgKGFuZCB3aGljaCB3aWxsIGJlIGNhY2hlZCkuXG4gICAgICAgIG5ldyBGdW5jdGlvbihcIm9ialwiLFxuICAgICAgICBcInZhciBwPVtdLHByaW50PWZ1bmN0aW9uKCl7cC5wdXNoLmFwcGx5KHAsYXJndW1lbnRzKTt9O1wiICtcblxuICAgICAgICAvLyBJbnRyb2R1Y2UgdGhlIGRhdGEgYXMgbG9jYWwgdmFyaWFibGVzIHVzaW5nIHdpdGgoKXt9XG4gICAgICAgIFwid2l0aChvYmope3AucHVzaCgnXCIgK1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHRlbXBsYXRlIGludG8gcHVyZSBKYXZhU2NyaXB0XG4gICAgICAgIHN0clxuICAgICAgICAucmVwbGFjZSgvW1xcclxcdFxcbl0vZywgXCIgXCIpXG4gICAgICAgIC5zcGxpdChcIjwlXCIpLmpvaW4oXCJcXHRcIilcbiAgICAgICAgLnJlcGxhY2UoLygoXnwlPilbXlxcdF0qKScvZywgZnVuY3Rpb24obWF0Y2gpeyByZXR1cm4gbWF0Y2gucmVwbGFjZSgvXFwnL2csIFwiXFxyXCIpO30pXG4gICAgICAgIC5yZXBsYWNlKC9cXHQ9KC4qPyklPi9nLCBcIicsJDEsJ1wiKVxuICAgICAgICAuc3BsaXQoXCJcXHRcIikuam9pbihcIicpO1wiKVxuICAgICAgICAuc3BsaXQoXCIlPlwiKS5qb2luKFwicC5wdXNoKCdcIilcbiAgICAgICAgLnNwbGl0KFwiXFxyXCIpLmpvaW4oXCJcXFxcJ1wiKVxuICAgICAgICArIFwiJyk7fXJldHVybiBwLmpvaW4oJycpO1wiKTtcblxuICAgICAgICAvLyBQcm92aWRlIHNvbWUgYmFzaWMgY3VycnlpbmcgdG8gdGhlIHVzZXJcbiAgICAgICAgcmV0dXJuIGRhdGEgPyBmbiggZGF0YSApIDogZm47XG4gICAgfVxuXG4gICAgd2luZG93LnRtcGwgPSB0bXBsO1xufSkoKTtcbiIsInZhciBtYXBWaWV3ID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJCgnI21hcERpdicpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmQoJzxkaXYgaWQ9XCJtYXBcIj48L2Rpdj4nKTtcbiAgICB9XG59O1xuIiwidmFyIGJpb1ZpZXcgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKCcjaGVhZGVyJyk7XG4gICAgICAgIHRoaXMuY29udGFjdHNWaWV3ID0gbmV3IENvbnRhY3RzVmlldyh0aGlzLiRlbGVtZW50LmZpbmQoJyN0b3BDb250YWN0cycpKTtcbiAgICAgICAgdGhpcy5za2lsbHNWaWV3ID0gbmV3IFNraWxsc1ZpZXcodGhpcy4kZWxlbWVudC5maW5kKCcjc2tpbGxzJykpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGJpbyA9IG9jdG9wdXMuZ2V0QmlvKCk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnI25hbWUnKS50ZXh0KGJpby5uYW1lKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcjcm9sZScpLnRleHQoYmlvLnJvbGUpO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJyNwcm9maWxlSW1hZ2UnKS5hdHRyKCdzcmMnLCBiaW8uYmlvcGljKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcjd2VsY29tZU1lc3NhZ2UnKS50ZXh0KGJpby53ZWxjb21lTWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29udGFjdHNWaWV3LnJlbmRlcigpO1xuICAgICAgICB0aGlzLnNraWxsc1ZpZXcucmVuZGVyKCk7XG4gICAgfVxufTtcbiIsInZhciB3b3JrVmlldyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoJyN3b3JrRXhwZXJpZW5jZScpO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdG1wbCgnd29ya190ZW1wbGF0ZScpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdvcmtPYmogPSBvY3RvcHVzLmdldFdvcmsoKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLnRlbXBsYXRlKHdvcmtPYmopO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZChodG1sKTtcbiAgICB9XG59O1xuIiwidmFyIHByb2plY3RzVmlldyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoJyNwcm9qZWN0cycpO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdG1wbCgncHJvamVjdHNfdGVtcGxhdGUnKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwcm9qZWN0c09iaiA9IG9jdG9wdXMuZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLnRlbXBsYXRlKHByb2plY3RzT2JqKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmQoaHRtbCk7XG4gICAgfVxufTtcbiIsInZhciBlZHVjYXRpb25WaWV3ID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJCgnI2VkdWNhdGlvbicpO1xuICAgICAgICB0aGlzLnNjaG9vbHNUZW1wbGF0ZSA9IHRtcGwoJ2VkdWNhdGlvbl9zY2hvb2xzX3RlbXBsYXRlJyk7XG4gICAgICAgIHRoaXMub25saW5lQ291cnNlc1RlbXBsYXRlID0gdG1wbCgnZWR1Y2F0aW9uX29ubGluZUNvdXJzZXNfdGVtcGxhdGUnKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlZHVjYXRpb24gPSBvY3RvcHVzLmdldEVkdWNhdGlvbigpO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZCh0aGlzLnNjaG9vbHNUZW1wbGF0ZShlZHVjYXRpb24pKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmQodGhpcy5vbmxpbmVDb3Vyc2VzVGVtcGxhdGUoZWR1Y2F0aW9uKSk7XG4gICAgfVxufTtcbiIsInZhciBsZXRzQ29ubmVjdFZpZXcgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKCcjbGV0cy1jb25uZWN0Jyk7XG4gICAgICAgIHRoaXMuY29udGFjdHNWaWV3ID0gbmV3IENvbnRhY3RzVmlldyh0aGlzLiRlbGVtZW50LmZpbmQoJyNmb290ZXJDb250YWN0cycpKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY29udGFjdHNWaWV3LnJlbmRlcigpO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
